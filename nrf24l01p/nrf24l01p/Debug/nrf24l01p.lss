
nrf24l01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000428  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000298  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000512c  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006fc  00000000  00000000  0000581c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ab3  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000a30  00000000  00000000  000069cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00001120  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003ade  00000000  00000000  0000851c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000290  00000000  00000000  0000bffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:




int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	60 97       	sbiw	r28, 0x10	; 16
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	RF24 radio;
  a4:	ce 01       	movw	r24, r28
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	0e 94 01 01 	call	0x202	; 0x202 <_ZN4RF24C1Ev>

	radio.begin();
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	0e 94 84 01 	call	0x308	; 0x308 <_ZN4RF245beginEv>
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x24>

000000b6 <_Z21spi_master_initializev>:
  printf_P(PSTR("Data Rate\t = %s\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = %s\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = %s\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
  printf_P(PSTR("PA Power\t = %s\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
#else
  printf_P(PSTR("Data Rate\t = %S\r\n"), pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	8c 62       	ori	r24, 0x2C	; 44
  ba:	84 b9       	out	0x04, r24	; 4
  bc:	24 98       	cbi	0x04, 4	; 4
  be:	8c b5       	in	r24, 0x2c	; 44
  c0:	80 65       	ori	r24, 0x50	; 80
  c2:	8c bd       	out	0x2c, r24	; 44
  printf_P(PSTR("Model\t\t = %S\r\n"),   pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  c4:	08 95       	ret

000000c6 <_Z28spi_master_transmit_byte_valh>:
  c6:	8e bd       	out	0x2e, r24	; 46
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <_Z28spi_master_transmit_byte_valh+0x2>
  ce:	8e b5       	in	r24, 0x2e	; 46
  d0:	08 95       	ret

000000d2 <__vector_14>:
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	80 91 02 01 	lds	r24, 0x0102
  printf_P(PSTR("CRC Length\t = %S\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 03 01 	sts	0x0103, r25
  ee:	80 93 02 01 	sts	0x0102, r24
  f2:	80 91 02 01 	lds	r24, 0x0102
  f6:	90 91 03 01 	lds	r25, 0x0103
  fa:	84 36       	cpi	r24, 0x64	; 100
  fc:	91 05       	cpc	r25, r1
  fe:	74 f0       	brlt	.+28     	; 0x11c <__vector_14+0x4a>
 100:	10 92 03 01 	sts	0x0103, r1
 104:	10 92 02 01 	sts	0x0102, r1
 108:	80 91 00 01 	lds	r24, 0x0100
  printf_P(PSTR("PA Power\t = %S\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 01 01 	sts	0x0101, r25
 116:	80 93 00 01 	sts	0x0100, r24
 11a:	00 00       	nop
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_ZN4RF243csnEb>:
 12a:	66 23       	and	r22, r22
 12c:	41 f0       	breq	.+16     	; 0x13e <_ZN4RF243csnEb+0x14>
 12e:	2a 9a       	sbi	0x05, 2	; 5
 130:	87 ec       	ldi	r24, 0xC7	; 199
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <_ZN4RF243csnEb+0xa>
 138:	00 c0       	rjmp	.+0      	; 0x13a <_ZN4RF243csnEb+0x10>
 13a:	00 00       	nop
 13c:	08 95       	ret
 13e:	2a 98       	cbi	0x05, 2	; 5
#endif

}
 140:	9d e1       	ldi	r25, 0x1D	; 29
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <_ZN4RF243csnEb+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 152:	16 2f       	mov	r17, r22

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 154:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
  result = *++prx;   // result is 2nd byte of receive buffer  

	#elif defined(__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( R_REGISTER | ( REGISTER_MASK & reg ) );
 160:	81 2f       	mov	r24, r17
 162:	8f 71       	andi	r24, 0x1F	; 31
 164:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
	result = AVR_SPI_MSTR_TRANSMIT_VAL(0xff);
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
 16e:	18 2f       	mov	r17, r24
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	ce 01       	movw	r24, r28
 174:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return result;
}
 178:	81 2f       	mov	r24, r17
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <_ZN4RF2414write_registerEhh>:
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	16 2f       	mov	r17, r22
 18e:	04 2f       	mov	r16, r20

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	ce 01       	movw	r24, r28
 198:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
	_SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
	status = *prx++; // status is 1st byte of receive buffer

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
 19c:	81 2f       	mov	r24, r17
 19e:	8f 71       	andi	r24, 0x1F	; 31
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
 1a6:	18 2f       	mov	r17, r24
	AVR_SPI_MSTR_TRANSMIT_VAL(value);
 1a8:	80 2f       	mov	r24, r16
 1aa:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
 1b6:	81 2f       	mov	r24, r17
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <_ZN4RF248spiTransEh>:
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
 1ca:	16 2f       	mov	r17, r22

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 1cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
    csn(LOW);
    status = _SPI.transfer( cmd );

  #elif defined (__AVR__)
  beginTransaction();
  status = AVR_SPI_MSTR_TRANSMIT_VAL( cmd );
 1d8:	81 2f       	mov	r24, r17
 1da:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
 1de:	18 2f       	mov	r17, r24
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
 1e8:	81 2f       	mov	r24, r17
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
 1f2:	62 ee       	ldi	r22, 0xE2	; 226
 1f4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN4RF248spiTransEh>
}
 1f8:	08 95       	ret

000001fa <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
 1fa:	61 ee       	ldi	r22, 0xE1	; 225
 1fc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN4RF248spiTransEh>
}
 200:	08 95       	ret

00000202 <_ZN4RF24C1Ev>:
  printf_P(PSTR("\r\n"));
}
#endif
/****************************************************************************/

RF24::RF24():p_variant(false),
 202:	fc 01       	movw	r30, r24
payload_size(32), dynamic_payloads_enabled(false), addr_width(5)
 204:	12 82       	std	Z+2, r1	; 0x02
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	83 83       	std	Z+3, r24	; 0x03
 20a:	14 82       	std	Z+4, r1	; 0x04
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	82 87       	std	Z+10, r24	; 0x0a
{
	pipe0_reading_address[0]=0;
 210:	15 82       	std	Z+5, r1	; 0x05
 212:	08 95       	ret

00000214 <_ZN4RF2410setChannelEh>:
#endif

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 214:	46 2f       	mov	r20, r22
  const uint8_t max_channel = 127;
  write_register(RF_CH,rf24_min(channel,max_channel));
 216:	60 38       	cpi	r22, 0x80	; 128
 218:	08 f0       	brcs	.+2      	; 0x21c <_ZN4RF2410setChannelEh+0x8>
 21a:	4f e7       	ldi	r20, 0x7F	; 127
 21c:	65 e0       	ldi	r22, 0x05	; 5
 21e:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>
 222:	08 95       	ret

00000224 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
   uint8_t cfg = read_register(CONFIG);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN4RF2413read_registerEh>

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
 230:	81 fd       	sbrc	r24, 1
 232:	10 c0       	rjmp	.+32     	; 0x254 <_ZN4RF247powerUpEv+0x30>
      write_register(CONFIG,read_register(CONFIG) | _BV(PWR_UP));
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	ce 01       	movw	r24, r28
 238:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN4RF2413read_registerEh>
 23c:	48 2f       	mov	r20, r24
 23e:	42 60       	ori	r20, 0x02	; 2
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	ce 01       	movw	r24, r28
 244:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e0       	ldi	r24, 0x0F	; 15
 24a:	97 e2       	ldi	r25, 0x27	; 39
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <_ZN4RF247powerUpEv+0x28>
 250:	00 c0       	rjmp	.+0      	; 0x252 <_ZN4RF247powerUpEv+0x2e>
 252:	00 00       	nop
	  _delay_ms(5);
	  #else
      delay(5);
	  #endif
   }
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 260:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	ce 01       	movw	r24, r28
 268:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
    _SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	csn(HIGH);
  #elif defined (__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( ACTIVATE );
 26c:	80 e5       	ldi	r24, 0x50	; 80
 26e:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
	AVR_SPI_MSTR_TRANSMIT_VAL( 0x73 );
 272:	83 e7       	ldi	r24, 0x73	; 115
 274:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z28spi_master_transmit_byte_valh>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
  #endif

}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	16 2f       	mov	r17, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
 294:	66 e0       	ldi	r22, 0x06	; 6
 296:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 29a:	87 7d       	andi	r24, 0xD7	; 215
 29c:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
  #endif
  if( speed == RF24_250KBPS )
 29e:	12 30       	cpi	r17, 0x02	; 2
 2a0:	59 f4       	brne	.+22     	; 0x2b8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x32>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
 2a6:	0b e9       	ldi	r16, 0x9B	; 155
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	0b 87       	std	Y+11, r16	; 0x0b
 2b0:	1c 87       	std	Y+12, r17	; 0x0c
 2b2:	2d 87       	std	Y+13, r18	; 0x0d
 2b4:	3e 87       	std	Y+14, r19	; 0x0e
 2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 2b8:	11 30       	cpi	r17, 0x01	; 1
 2ba:	49 f0       	breq	.+18     	; 0x2ce <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
 2bc:	05 e5       	ldi	r16, 0x55	; 85
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	0b 87       	std	Y+11, r16	; 0x0b
 2c6:	1c 87       	std	Y+12, r17	; 0x0c
 2c8:	2d 87       	std	Y+13, r18	; 0x0d
 2ca:	3e 87       	std	Y+14, r19	; 0x0e
 2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
 2ce:	88 60       	ori	r24, 0x08	; 8
 2d0:	f8 2e       	mov	r15, r24
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txRxDelay=190;
      #else //16Mhz Arduino	  
	  txRxDelay=65;
 2d2:	01 e4       	ldi	r16, 0x41	; 65
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	0b 87       	std	Y+11, r16	; 0x0b
 2dc:	1c 87       	std	Y+12, r17	; 0x0c
 2de:	2d 87       	std	Y+13, r18	; 0x0d
 2e0:	3e 87       	std	Y+14, r19	; 0x0e
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
 2e2:	4f 2d       	mov	r20, r15
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	ce 01       	movw	r24, r28
 2e8:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
 2ec:	66 e0       	ldi	r22, 0x06	; 6
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN4RF2413read_registerEh>
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	f8 12       	cpse	r15, r24
 2f8:	90 e0       	ldi	r25, 0x00	; 0
  {
    result = true;
  }
  return result;
}
 2fa:	89 2f       	mov	r24, r25
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	08 95       	ret

00000308 <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
  #elif defined(LITTLEWIRE)
    pinMode(csn_pin,OUTPUT);
    _SPI.begin();
    csn(HIGH);
  #elif defined(__AVR__)
	CE_PORT |= (1<<CE_BIT);
 30e:	5f 9a       	sbi	0x0b, 7	; 11
	CSN_PORT|=(1<<CSN_BIT);
 310:	28 9a       	sbi	0x05, 0	; 5
	spi_master_initialize();
 312:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z21spi_master_initializev>
	csn(HIGH);
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	ce 01       	movw	r24, r28
 31a:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4RF243csnEb>
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	97 e2       	ldi	r25, 0x27	; 39
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <_ZN4RF245beginEv+0x1a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <_ZN4RF245beginEv+0x20>
 328:	00 00       	nop
  #else
  delay( 5 ) ;
  #endif

  // Reset CONFIG and enable 16-bit CRC.
  write_register( CONFIG, 0b00001100 ) ;
 32a:	4c e0       	ldi	r20, 0x0C	; 12
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	ce 01       	movw	r24, r28
 330:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
 334:	4f e5       	ldi	r20, 0x5F	; 95
 336:	64 e0       	ldi	r22, 0x04	; 4
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	ce 01       	movw	r24, r28
 342:	0e 94 43 01 	call	0x286	; 0x286 <_ZN4RF2411setDataRateE15rf24_datarate_e>
 346:	88 23       	and	r24, r24
 348:	11 f0       	breq	.+4      	; 0x34e <_ZN4RF245beginEv+0x46>
  {
    p_variant = true ;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	8a 83       	std	Y+2, r24	; 0x02
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	ce 01       	movw	r24, r28
 352:	0e 94 43 01 	call	0x286	; 0x286 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
 356:	ce 01       	movw	r24, r28
 358:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	6d e1       	ldi	r22, 0x1D	; 29
 360:	ce 01       	movw	r24, r28
 362:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	6c e1       	ldi	r22, 0x1C	; 28
 36a:	ce 01       	movw	r24, r28
 36c:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
 370:	40 e7       	ldi	r20, 0x70	; 112
 372:	67 e0       	ldi	r22, 0x07	; 7
 374:	ce 01       	movw	r24, r28
 376:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
 37a:	6c e4       	ldi	r22, 0x4C	; 76
 37c:	ce 01       	movw	r24, r28
 37e:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
 382:	ce 01       	movw	r24, r28
 384:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN4RF248flush_rxEv>
  flush_tx();
 388:	ce 01       	movw	r24, r28
 38a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
 38e:	ce 01       	movw	r24, r28
 390:	0e 94 12 01 	call	0x224	; 0x224 <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	ce 01       	movw	r24, r28
 398:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN4RF2413read_registerEh>
 39c:	48 2f       	mov	r20, r24
 39e:	4e 7f       	andi	r20, 0xFE	; 254
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	ce 01       	movw	r24, r28
 3a4:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
}
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
