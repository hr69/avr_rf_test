
nrf24l01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00001c80  00001d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800268  00800268  00001e7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005d4a  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4e  00000000  00000000  00007f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dbc  00000000  00000000  00008960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000af0  00000000  00000000  0000971c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001379  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e8f  00000000  00000000  0000b585  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000f414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	11 12       	cpse	r1, r17
      6a:	13 14       	cp	r1, r3
      6c:	15 16       	cp	r1, r21

0000006e <_ZL10child_pipe>:
      6e:	0a 0b 0c 0d 0e 0f                                   ......

00000074 <_ZL17child_pipe_enable>:
      74:	00 01 02 03 04 05                                   ......

0000007a <__c.2299>:
      7a:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000086 <__ctors_start>:
      86:	39 02       	muls	r19, r25

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e0 e8       	ldi	r30, 0x80	; 128
      9c:	fc e1       	ldi	r31, 0x1C	; 28
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a8 36       	cpi	r26, 0x68	; 104
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	22 e0       	ldi	r18, 0x02	; 2
      ac:	a8 e6       	ldi	r26, 0x68	; 104
      ae:	b2 e0       	ldi	r27, 0x02	; 2
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a0 39       	cpi	r26, 0x90	; 144
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c8 e8       	ldi	r28, 0x88	; 136
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	22 97       	sbiw	r28, 0x02	; 2
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 76 06 	call	0xcec	; 0xcec <__tablejump__>
      ca:	c6 38       	cpi	r28, 0x86	; 134
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 b9 00 	call	0x172	; 0x172 <main>
      d4:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_Z23usart_transmit_byte_valh>:
/**
 * transmit byte via pass by value
 * @param data data byte to be sent
 */
void usart_transmit_byte_val(uint8_t data){
	 while (!(UCSR0A & (1<<UDRE0)));
      dc:	e0 ec       	ldi	r30, 0xC0	; 192
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	90 81       	ld	r25, Z
      e2:	95 ff       	sbrs	r25, 5
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <_Z23usart_transmit_byte_valh+0x4>
	 UDR0 = data;
      e6:	80 93 c6 00 	sts	0x00C6, r24
      ea:	08 95       	ret

000000ec <_Z12uart_putcharcP6__file>:

/**
 * putchar for streaming file out
 */
int uart_putchar(char ch, FILE *stream)
{
      ec:	cf 93       	push	r28
      ee:	c8 2f       	mov	r28, r24
	if(ch=='\n')
      f0:	8a 30       	cpi	r24, 0x0A	; 10
      f2:	19 f4       	brne	.+6      	; 0xfa <_Z12uart_putcharcP6__file+0xe>
	uart_putchar('\r',stream);
      f4:	8d e0       	ldi	r24, 0x0D	; 13
      f6:	0e 94 76 00 	call	0xec	; 0xec <_Z12uart_putcharcP6__file>
	stdio_serial_send_function((uint8_t) ch);
      fa:	8c 2f       	mov	r24, r28
      fc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z23usart_transmit_byte_valh>
	return 0;
}
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_Z22usart_receive_byte_refPh>:
/**
 * receive byte via reference
 * @param data address of data byte into which the data shall be recieved
 */
void usart_receive_byte_ref(uint8_t *data){
	 while (!(UCSR0A & (1<<RXC0)));
     108:	e0 ec       	ldi	r30, 0xC0	; 192
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	20 81       	ld	r18, Z
     10e:	22 23       	and	r18, r18
     110:	ec f7       	brge	.-6      	; 0x10c <_Z22usart_receive_byte_refPh+0x4>
	 *data = UDR0;
     112:	20 91 c6 00 	lds	r18, 0x00C6
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
     11a:	08 95       	ret

0000011c <_Z12uart_getcharP6__file>:
/**
 * get char for streaming file in
 */
int uart_getchar(FILE *stream)
{
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	8c 01       	movw	r16, r24
	char ch;
	stdio_serial_receive_function( (uint8_t *) &ch);
     12c:	ce 01       	movw	r24, r28
     12e:	01 96       	adiw	r24, 0x01	; 1
     130:	0e 94 84 00 	call	0x108	; 0x108 <_Z22usart_receive_byte_refPh>
	
	/* Echo the output back to the terminal */
	uart_putchar(ch,stream);
     134:	b8 01       	movw	r22, r16
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	0e 94 76 00 	call	0xec	; 0xec <_Z12uart_putcharcP6__file>

	return ch;
     13c:	89 81       	ldd	r24, Y+1	; 0x01
}
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0f 90       	pop	r0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <_Z23stdio_serial_initializev>:
/**
 * initializing the stdio file stream over uart
 */
void stdio_serial_initialize()
{
	uart_str = fdevopen(uart_putchar,uart_getchar);	
     14c:	6e e8       	ldi	r22, 0x8E	; 142
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	86 e7       	ldi	r24, 0x76	; 118
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 83 06 	call	0xd06	; 0xd06 <fdevopen>
     158:	90 93 7b 02 	sts	0x027B, r25
     15c:	80 93 7a 02 	sts	0x027A, r24
	stdout = stdin = uart_str;
     160:	90 93 87 02 	sts	0x0287, r25
     164:	80 93 86 02 	sts	0x0286, r24
     168:	90 93 89 02 	sts	0x0289, r25
     16c:	80 93 88 02 	sts	0x0288, r24
     170:	08 95       	ret

00000172 <main>:

// Used to control whether this node is sending or receiving
bool role = 0;

int main(void)
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	62 97       	sbiw	r28, 0x12	; 18
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
 * initialize the usart baud rate
 * @param baud_rate the baud rate for teh usart module
 */
void usart_set_baud_rate(unsigned long baud_rate){
	unsigned int ubrr = (F_CPU/16/baud_rate)-1;
	UBRR0H = (unsigned char)(ubrr>>8);
     186:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     18a:	83 e3       	ldi	r24, 0x33	; 51
     18c:	80 93 c4 00 	sts	0x00C4, r24
 * @param stop_bits	0->1 stop bit, 1-> 2 stop bits
 * @param char_size	0->5-bit, 1->6-bit, 2->7-bit, 3->8-bit,7->9-bit
 * @param pol		0->tx or rising, rx on falling, 1-> tx on falling, rx on rising
 */
void usart_setup(uint8_t mode, uint8_t parity, uint8_t stop_bits, uint8_t char_size,uint8_t pol){
	 UCSR0C =  (mode<<6) | (parity<<4) | (stop_bits<<3) |(char_size<<1) | (pol<<0);
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	80 93 c2 00 	sts	0x00C2, r24

/**
 * enable the USART tx and rx
 */
void usart_enable(){
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     196:	88 e1       	ldi	r24, 0x18	; 24
     198:	80 93 c1 00 	sts	0x00C1, r24
	//UART
	usart_set_baud_rate(9600);
	usart_setup(0,0,0,3,0);
	usart_enable();
	stdio_serial_initialize();
     19c:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z23stdio_serial_initializev>
	
	printf("RF24/examples/GettingStarted\n");
     1a0:	8d e1       	ldi	r24, 0x1D	; 29
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>
	printf("*** PRESS 'T' to begin transmitting to the other node\n");
     1a8:	8a e3       	ldi	r24, 0x3A	; 58
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>

    radio.begin();
     1b0:	89 e6       	ldi	r24, 0x69	; 105
     1b2:	92 e0       	ldi	r25, 0x02	; 2
     1b4:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN4RF245beginEv>
	//radio.setDataRate(RF24_250KBPS);
	radio.setPALevel(RF24_PA_LOW);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	89 e6       	ldi	r24, 0x69	; 105
     1bc:	92 e0       	ldi	r25, 0x02	; 2
     1be:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN4RF2410setPALevelEh>
	
  // Open a writing and reading pipe on each radio, with opposite addresses
	if(radioNumber) {
     1c2:	80 91 79 02 	lds	r24, 0x0279
     1c6:	88 23       	and	r24, r24
     1c8:	71 f0       	breq	.+28     	; 0x1e6 <main+0x74>
		radio.openWritingPipe(addresses[1]);
     1ca:	6c e0       	ldi	r22, 0x0C	; 12
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	89 e6       	ldi	r24, 0x69	; 105
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN4RF2415openWritingPipeEPKh>
		radio.openReadingPipe(1,addresses[0]);
     1d6:	46 e0       	ldi	r20, 0x06	; 6
     1d8:	51 e0       	ldi	r21, 0x01	; 1
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	89 e6       	ldi	r24, 0x69	; 105
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN4RF2415openReadingPipeEhPKh>
     1e4:	0d c0       	rjmp	.+26     	; 0x200 <main+0x8e>
	}
	else {
		radio.openWritingPipe(addresses[0]);
     1e6:	66 e0       	ldi	r22, 0x06	; 6
     1e8:	71 e0       	ldi	r23, 0x01	; 1
     1ea:	89 e6       	ldi	r24, 0x69	; 105
     1ec:	92 e0       	ldi	r25, 0x02	; 2
     1ee:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN4RF2415openWritingPipeEPKh>
		radio.openReadingPipe(1,addresses[1]);
     1f2:	4c e0       	ldi	r20, 0x0C	; 12
     1f4:	51 e0       	ldi	r21, 0x01	; 1
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	89 e6       	ldi	r24, 0x69	; 105
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN4RF2415openReadingPipeEhPKh>
	}
    
    radio.startListening();
     200:	89 e6       	ldi	r24, 0x69	; 105
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN4RF2414startListeningEv>
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	9a 8b       	std	Y+18, r25	; 0x12
     20e:	89 8b       	std	Y+17, r24	; 0x11
		
				radio.stopListening();                                        // First, stop listening so we can talk
				radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.
				radio.startListening();                                       // Now, resume listening so we catch the next packets.
				printf("Sent response ");
				printf("%ld\n", got_time);
     210:	0f 2e       	mov	r0, r31
     212:	f2 e9       	ldi	r31, 0x92	; 146
     214:	4f 2e       	mov	r4, r31
     216:	f1 e0       	ldi	r31, 0x01	; 1
     218:	5f 2e       	mov	r5, r31
     21a:	f0 2d       	mov	r31, r0
		        radio.read( &got_time, sizeof(unsigned long) );
		        unsigned long time = millis();
		        
		        // Spew it
		        printf("Sent ");
		        printf("%ld", time);
     21c:	0f 2e       	mov	r0, r31
     21e:	f1 e3       	ldi	r31, 0x31	; 49
     220:	2f 2e       	mov	r2, r31
     222:	f2 e0       	ldi	r31, 0x02	; 2
     224:	3f 2e       	mov	r3, r31
     226:	f0 2d       	mov	r31, r0
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     228:	69 88       	ldd	r6, Y+17	; 0x11
     22a:	7a 88       	ldd	r7, Y+18	; 0x12
	        radio.stopListening();                                    // First, stop listening so we can talk.
	        
	        
	        printf("Now sending\n");

	        unsigned long time = 123456;                             // Take the time, and send it.  This will block until complete
     22c:	0f 2e       	mov	r0, r31
     22e:	f0 e4       	ldi	r31, 0x40	; 64
     230:	cf 2e       	mov	r12, r31
     232:	f2 ee       	ldi	r31, 0xE2	; 226
     234:	df 2e       	mov	r13, r31
     236:	ee 24       	eor	r14, r14
     238:	e3 94       	inc	r14
     23a:	f1 2c       	mov	r15, r1
     23c:	f0 2d       	mov	r31, r0
				printf("%ld\n", got_time);
			}
		}

		/****************** Change Roles via Serial Commands ***************************/
		if ( bit_is_set(UCSR0A, RXC0) )
     23e:	00 ec       	ldi	r16, 0xC0	; 192
     240:	10 e0       	ldi	r17, 0x00	; 0
	
	
    while(1) {
		
        /****************** Ping Out Role ***************************/
        if (role == 1)  {
     242:	80 91 68 02 	lds	r24, 0x0268
     246:	88 23       	and	r24, r24
     248:	09 f4       	brne	.+2      	; 0x24c <main+0xda>
     24a:	51 c0       	rjmp	.+162    	; 0x2ee <main+0x17c>
	        
	        radio.stopListening();                                    // First, stop listening so we can talk.
     24c:	89 e6       	ldi	r24, 0x69	; 105
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	0e 94 18 04 	call	0x830	; 0x830 <_ZN4RF2413stopListeningEv>
	        
	        
	        printf("Now sending\n");
     254:	80 e7       	ldi	r24, 0x70	; 112
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>

	        unsigned long time = 123456;                             // Take the time, and send it.  This will block until complete
     25c:	cd 86       	std	Y+13, r12	; 0x0d
     25e:	de 86       	std	Y+14, r13	; 0x0e
     260:	ef 86       	std	Y+15, r14	; 0x0f
     262:	f8 8a       	std	Y+16, r15	; 0x10
	        if (!radio.write( &time, sizeof(unsigned long) )){
     264:	44 e0       	ldi	r20, 0x04	; 4
     266:	be 01       	movw	r22, r28
     268:	63 5f       	subi	r22, 0xF3	; 243
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	89 e6       	ldi	r24, 0x69	; 105
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF245writeEPKvh>
     274:	81 11       	cpse	r24, r1
     276:	08 c0       	rjmp	.+16     	; 0x288 <main+0x116>
		        printf("failed");
     278:	ac e7       	ldi	r26, 0x7C	; 124
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	bf 93       	push	r27
     27e:	af 93       	push	r26
     280:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
	        }
	        
	        radio.startListening();                                    // Now, continue listening
     288:	89 e6       	ldi	r24, 0x69	; 105
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN4RF2414startListeningEv>
extern volatile int elapsed_us;
extern volatile int elapsed_ms;

inline int millis(){
	
	return elapsed_ms;
     290:	80 90 7c 02 	lds	r8, 0x027C
     294:	90 90 7d 02 	lds	r9, 0x027D
	        
	        unsigned long started_waiting_at = millis();               // Set up a timeout period, get the current microseconds
     298:	aa 24       	eor	r10, r10
     29a:	97 fc       	sbrc	r9, 7
     29c:	a0 94       	com	r10
     29e:	ba 2c       	mov	r11, r10
	        bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
	        
	        while ( ! radio.available() ){                             // While nothing is received
     2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <main+0x154>
     2a2:	80 91 7c 02 	lds	r24, 0x027C
     2a6:	90 91 7d 02 	lds	r25, 0x027D
		        if (millis() - started_waiting_at > 200 ){            // If waited longer than 200ms, indicate timeout and exit while loop
     2aa:	aa 27       	eor	r26, r26
     2ac:	97 fd       	sbrc	r25, 7
     2ae:	a0 95       	com	r26
     2b0:	ba 2f       	mov	r27, r26
     2b2:	88 19       	sub	r24, r8
     2b4:	99 09       	sbc	r25, r9
     2b6:	aa 09       	sbc	r26, r10
     2b8:	bb 09       	sbc	r27, r11
     2ba:	89 3c       	cpi	r24, 0xC9	; 201
     2bc:	91 05       	cpc	r25, r1
     2be:	a1 05       	cpc	r26, r1
     2c0:	b1 05       	cpc	r27, r1
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <main+0x154>
     2c4:	82 c0       	rjmp	.+260    	; 0x3ca <main+0x258>
	        radio.startListening();                                    // Now, continue listening
	        
	        unsigned long started_waiting_at = millis();               // Set up a timeout period, get the current microseconds
	        bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
	        
	        while ( ! radio.available() ){                             // While nothing is received
     2c6:	89 e6       	ldi	r24, 0x69	; 105
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN4RF249availableEv>
     2ce:	88 23       	and	r24, r24
     2d0:	41 f3       	breq	.-48     	; 0x2a2 <main+0x130>
     2d2:	80 c0       	rjmp	.+256    	; 0x3d4 <main+0x262>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	ff ef       	ldi	r31, 0xFF	; 255
     2d6:	29 e6       	ldi	r18, 0x69	; 105
     2d8:	88 e1       	ldi	r24, 0x18	; 24
     2da:	f1 50       	subi	r31, 0x01	; 1
     2dc:	20 40       	sbci	r18, 0x00	; 0
     2de:	80 40       	sbci	r24, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x168>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x172>
     2e4:	00 00       	nop
	        _delay_ms(1000);
        }

		/****************** Pong Back Role ***************************/

		if ( role == 0 )
     2e6:	80 91 68 02 	lds	r24, 0x0268
     2ea:	81 11       	cpse	r24, r1
     2ec:	3a c0       	rjmp	.+116    	; 0x362 <main+0x1f0>
		{
			unsigned long got_time;
	
			if( radio.available()){
     2ee:	89 e6       	ldi	r24, 0x69	; 105
     2f0:	92 e0       	ldi	r25, 0x02	; 2
     2f2:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN4RF249availableEv>
     2f6:	88 23       	and	r24, r24
     2f8:	a1 f1       	breq	.+104    	; 0x362 <main+0x1f0>
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <main+0x198>
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     2fc:	44 e0       	ldi	r20, 0x04	; 4
     2fe:	66 2d       	mov	r22, r6
     300:	77 2d       	mov	r23, r7
     302:	89 e6       	ldi	r24, 0x69	; 105
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN4RF244readEPvh>
		{
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
     30a:	89 e6       	ldi	r24, 0x69	; 105
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN4RF249availableEv>
     312:	81 11       	cpse	r24, r1
     314:	f3 cf       	rjmp	.-26     	; 0x2fc <main+0x18a>
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
				}
		
				radio.stopListening();                                        // First, stop listening so we can talk
     316:	89 e6       	ldi	r24, 0x69	; 105
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	0e 94 18 04 	call	0x830	; 0x830 <_ZN4RF2413stopListeningEv>
				radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.
     31e:	44 e0       	ldi	r20, 0x04	; 4
     320:	66 2d       	mov	r22, r6
     322:	77 2d       	mov	r23, r7
     324:	89 e6       	ldi	r24, 0x69	; 105
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF245writeEPKvh>
				radio.startListening();                                       // Now, resume listening so we catch the next packets.
     32c:	89 e6       	ldi	r24, 0x69	; 105
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN4RF2414startListeningEv>
				printf("Sent response ");
     334:	a3 e8       	ldi	r26, 0x83	; 131
     336:	b1 e0       	ldi	r27, 0x01	; 1
     338:	bf 93       	push	r27
     33a:	af 93       	push	r26
     33c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
				printf("%ld\n", got_time);
     340:	8c 81       	ldd	r24, Y+4	; 0x04
     342:	8f 93       	push	r24
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	8f 93       	push	r24
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	8f 93       	push	r24
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	8f 93       	push	r24
     350:	5f 92       	push	r5
     352:	4f 92       	push	r4
     354:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
			}
		}

		/****************** Change Roles via Serial Commands ***************************/
		if ( bit_is_set(UCSR0A, RXC0) )
     362:	d8 01       	movw	r26, r16
     364:	8c 91       	ld	r24, X
     366:	88 23       	and	r24, r24
     368:	0c f0       	brlt	.+2      	; 0x36c <main+0x1fa>
     36a:	6b cf       	rjmp	.-298    	; 0x242 <main+0xd0>
		{
			char buffer[12];
			char c = scanf("%12s", buffer);
     36c:	ba 89       	ldd	r27, Y+18	; 0x12
     36e:	bf 93       	push	r27
     370:	e9 89       	ldd	r30, Y+17	; 0x11
     372:	ef 93       	push	r30
     374:	87 e9       	ldi	r24, 0x97	; 151
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	9f 93       	push	r25
     37a:	8f 93       	push	r24
     37c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <scanf>
			if ( c == 'T' && role == 0 ){
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	84 35       	cpi	r24, 0x54	; 84
     38a:	61 f4       	brne	.+24     	; 0x3a4 <main+0x232>
     38c:	80 91 68 02 	lds	r24, 0x0268
     390:	81 11       	cpse	r24, r1
     392:	55 cf       	rjmp	.-342    	; 0x23e <main+0xcc>
				printf("*** CHANGING TO TRANSMIT ROLE -- PRESS 'R' TO SWITCH BACK\n");
     394:	8c e9       	ldi	r24, 0x9C	; 156
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>
				role = 1;                  // Become the primary transmitter (ping out)
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 68 02 	sts	0x0268, r24
     3a2:	4d cf       	rjmp	.-358    	; 0x23e <main+0xcc>
				
			}else
			if ( c == 'R' && role == 1 ){
     3a4:	82 35       	cpi	r24, 0x52	; 82
     3a6:	09 f0       	breq	.+2      	; 0x3aa <main+0x238>
     3a8:	4a cf       	rjmp	.-364    	; 0x23e <main+0xcc>
     3aa:	80 91 68 02 	lds	r24, 0x0268
     3ae:	88 23       	and	r24, r24
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <main+0x242>
     3b2:	45 cf       	rjmp	.-374    	; 0x23e <main+0xcc>
				printf("*** CHANGING TO RECEIVE ROLE -- PRESS 'T' TO SWITCH BACK\n");
     3b4:	86 ed       	ldi	r24, 0xD6	; 214
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>
				role = 0;                // Become the primary receiver (pong back)
     3bc:	10 92 68 02 	sts	0x0268, r1
				radio.startListening();
     3c0:	89 e6       	ldi	r24, 0x69	; 105
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN4RF2414startListeningEv>
     3c8:	3a cf       	rjmp	.-396    	; 0x23e <main+0xcc>
			        break;
		        }
	        }
	        
	        if ( timeout ){                                             // Describe the results
		        printf("Failed, response timed out.\n");
     3ca:	8f e0       	ldi	r24, 0x0F	; 15
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>
     3d2:	80 cf       	rjmp	.-256    	; 0x2d4 <main+0x162>
		        } else {
		        unsigned long got_time;                                 // Grab the response, compare, and send to debugging spew
		        radio.read( &got_time, sizeof(unsigned long) );
     3d4:	44 e0       	ldi	r20, 0x04	; 4
     3d6:	66 2d       	mov	r22, r6
     3d8:	77 2d       	mov	r23, r7
     3da:	89 e6       	ldi	r24, 0x69	; 105
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN4RF244readEPvh>
     3e2:	80 90 7c 02 	lds	r8, 0x027C
     3e6:	90 90 7d 02 	lds	r9, 0x027D
		        unsigned long time = millis();
     3ea:	aa 24       	eor	r10, r10
     3ec:	97 fc       	sbrc	r9, 7
     3ee:	a0 94       	com	r10
     3f0:	ba 2c       	mov	r11, r10
		        
		        // Spew it
		        printf("Sent ");
     3f2:	ab e2       	ldi	r26, 0x2B	; 43
     3f4:	b2 e0       	ldi	r27, 0x02	; 2
     3f6:	bf 93       	push	r27
     3f8:	af 93       	push	r26
     3fa:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
		        printf("%ld", time);
     3fe:	bf 92       	push	r11
     400:	af 92       	push	r10
     402:	9f 92       	push	r9
     404:	8f 92       	push	r8
     406:	3f 92       	push	r3
     408:	2f 92       	push	r2
     40a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
		        printf(", Got response ");
     40e:	a5 e3       	ldi	r26, 0x35	; 53
     410:	b2 e0       	ldi	r27, 0x02	; 2
     412:	bf 93       	push	r27
     414:	af 93       	push	r26
     416:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
		        printf("%ld", got_time);
     41a:	8c 81       	ldd	r24, Y+4	; 0x04
     41c:	8f 93       	push	r24
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	8f 93       	push	r24
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	8f 93       	push	r24
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	8f 93       	push	r24
     42a:	3f 92       	push	r3
     42c:	2f 92       	push	r2
     42e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
		        printf(", Round-trip delay ");
     432:	a5 e4       	ldi	r26, 0x45	; 69
     434:	b2 e0       	ldi	r27, 0x02	; 2
     436:	bf 93       	push	r27
     438:	af 93       	push	r26
     43a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
		        printf("%ld", time-got_time);
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	ab 81       	ldd	r26, Y+3	; 0x03
     444:	bc 81       	ldd	r27, Y+4	; 0x04
     446:	88 1a       	sub	r8, r24
     448:	99 0a       	sbc	r9, r25
     44a:	aa 0a       	sbc	r10, r26
     44c:	bb 0a       	sbc	r11, r27
     44e:	bf 92       	push	r11
     450:	af 92       	push	r10
     452:	9f 92       	push	r9
     454:	8f 92       	push	r8
     456:	3f 92       	push	r3
     458:	2f 92       	push	r2
     45a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <printf>
		        printf(" microseconds\n");
     45e:	89 e5       	ldi	r24, 0x59	; 89
     460:	92 e0       	ldi	r25, 0x02	; 2
     462:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <puts>
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	31 cf       	rjmp	.-414    	; 0x2d4 <main+0x162>

00000472 <_GLOBAL__sub_I__Z19usart_set_baud_ratem>:
/****************** User Config ***************************/
/***      Set this radio as radio number 0 or 1         ***/
bool radioNumber = 0;

/* Hardware configuration: Set up nRF24L01 radio on SPI bus plus pins 7 & 8 */
RF24 radio(7,8);
     472:	48 e0       	ldi	r20, 0x08	; 8
     474:	67 e0       	ldi	r22, 0x07	; 7
     476:	89 e6       	ldi	r24, 0x69	; 105
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN4RF24C1Ehh>
     47e:	08 95       	ret

00000480 <__vector_14>:
volatile int us_counter = 0;
volatile int ms_counter = 0;
volatile int elapsed_us = 0;
volatile int elapsed_ms = 0;

ISR (TIMER0_COMPA_vect){
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	8f 93       	push	r24
     490:	9f 93       	push	r25
	us_10++;
     492:	80 91 82 02 	lds	r24, 0x0282
     496:	90 91 83 02 	lds	r25, 0x0283
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	90 93 83 02 	sts	0x0283, r25
     4a0:	80 93 82 02 	sts	0x0282, r24
	if(us_10>=100){  ////if 8 Mhz make it >100 ,  if 16 Mhz   make it  > 200
     4a4:	80 91 82 02 	lds	r24, 0x0282
     4a8:	90 91 83 02 	lds	r25, 0x0283
     4ac:	84 36       	cpi	r24, 0x64	; 100
     4ae:	91 05       	cpc	r25, r1
     4b0:	94 f1       	brlt	.+100    	; 0x516 <__vector_14+0x96>
		us_10 = 0;
     4b2:	10 92 83 02 	sts	0x0283, r1
     4b6:	10 92 82 02 	sts	0x0282, r1
		elapsed_us ++;
     4ba:	80 91 7e 02 	lds	r24, 0x027E
     4be:	90 91 7f 02 	lds	r25, 0x027F
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	90 93 7f 02 	sts	0x027F, r25
     4c8:	80 93 7e 02 	sts	0x027E, r24
		us_counter++;
     4cc:	80 91 80 02 	lds	r24, 0x0280
     4d0:	90 91 81 02 	lds	r25, 0x0281
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	90 93 81 02 	sts	0x0281, r25
     4da:	80 93 80 02 	sts	0x0280, r24
		if(us_counter++>1000){
     4de:	80 91 80 02 	lds	r24, 0x0280
     4e2:	90 91 81 02 	lds	r25, 0x0281
     4e6:	9c 01       	movw	r18, r24
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	30 93 81 02 	sts	0x0281, r19
     4f0:	20 93 80 02 	sts	0x0280, r18
     4f4:	89 3e       	cpi	r24, 0xE9	; 233
     4f6:	93 40       	sbci	r25, 0x03	; 3
     4f8:	6c f0       	brlt	.+26     	; 0x514 <__vector_14+0x94>
			us_counter=0;
     4fa:	10 92 81 02 	sts	0x0281, r1
     4fe:	10 92 80 02 	sts	0x0280, r1
			elapsed_ms++;
     502:	80 91 7c 02 	lds	r24, 0x027C
     506:	90 91 7d 02 	lds	r25, 0x027D
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	90 93 7d 02 	sts	0x027D, r25
     510:	80 93 7c 02 	sts	0x027C, r24
		}
		asm("nop");
     514:	00 00       	nop
	}
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <_ZN4RF243csnEb>:
	  _SPI.setDataMode(RF24_DATA_MODE);
	  _SPI.setClockDivider(spi_speed ? spi_speed : RF24_CLOCK_DIVIDER);
	  _SPI.chipSelect(csn_pin);
	  delayMicroseconds(5);
#elif defined (__AVR__) 
	  if (mode == HIGH) {
     528:	66 23       	and	r22, r22
     52a:	41 f0       	breq	.+16     	; 0x53c <_ZN4RF243csnEb+0x14>
		  PORTB |= (1<<PINB2);  	// SCK->CSN HIGH
     52c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52e:	87 ec       	ldi	r24, 0xC7	; 199
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <_ZN4RF243csnEb+0xa>
     536:	00 c0       	rjmp	.+0      	; 0x538 <_ZN4RF243csnEb+0x10>
     538:	00 00       	nop
     53a:	08 95       	ret
		  delayMicroseconds(100); // allow csn to settle.
	  }
	  else {
		  PORTB &= ~(1<<PINB2);	// SCK->CSN LOW
     53c:	2a 98       	cbi	0x05, 2	; 5
     53e:	9d e1       	ldi	r25, 0x1D	; 29
     540:	9a 95       	dec	r25
     542:	f1 f7       	brne	.-4      	; 0x540 <_ZN4RF243csnEb+0x18>
     544:	00 00       	nop
     546:	08 95       	ret

00000548 <_ZN4RF242ceEb>:
/****************************************************************************/
int mode;
void RF24::ce(bool level)
{
	#if defined(__AVR__)
	if (ce_pin != csn_pin){
     548:	fc 01       	movw	r30, r24
     54a:	20 81       	ld	r18, Z
     54c:	81 81       	ldd	r24, Z+1	; 0x01
     54e:	28 17       	cp	r18, r24
     550:	99 f0       	breq	.+38     	; 0x578 <_ZN4RF242ceEb+0x30>
		if (mode == HIGH) {
     552:	80 91 84 02 	lds	r24, 0x0284
     556:	90 91 85 02 	lds	r25, 0x0285
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	41 f4       	brne	.+16     	; 0x56e <_ZN4RF242ceEb+0x26>
			CE_PORT |= (1<<CE_BIT);  	// SCK->CSN HIGH
     55e:	5f 9a       	sbi	0x0b, 7	; 11
     560:	87 ec       	ldi	r24, 0xC7	; 199
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <_ZN4RF242ceEb+0x1c>
     568:	00 c0       	rjmp	.+0      	; 0x56a <_ZN4RF242ceEb+0x22>
     56a:	00 00       	nop
     56c:	08 95       	ret
			delayMicroseconds(100); // allow csn to settle.
		}
		else {
			CE_PORT &= ~(1<<CE_BIT);	// SCK->CSN LOW
     56e:	5f 98       	cbi	0x0b, 7	; 11
     570:	9d e1       	ldi	r25, 0x1D	; 29
     572:	9a 95       	dec	r25
     574:	f1 f7       	brne	.-4      	; 0x572 <_ZN4RF242ceEb+0x2a>
     576:	00 00       	nop
     578:	08 95       	ret

0000057a <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	ec 01       	movw	r28, r24
     582:	16 2f       	mov	r17, r22
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     584:	84 b1       	in	r24, 0x04	; 4
     586:	8c 62       	ori	r24, 0x2C	; 44
     588:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     58a:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     58c:	8c b5       	in	r24, 0x2c	; 44
     58e:	80 65       	ori	r24, 0x50	; 80
     590:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	ce 01       	movw	r24, r28
     596:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
  result = *++prx;   // result is 2nd byte of receive buffer  

	#elif defined(__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( R_REGISTER | ( REGISTER_MASK & reg ) );
     59a:	1f 71       	andi	r17, 0x1F	; 31
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     59c:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     59e:	0d b4       	in	r0, 0x2d	; 45
     5a0:	07 fe       	sbrs	r0, 7
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <_ZN4RF2413read_registerEh+0x24>
	return SPDR;
     5a4:	8e b5       	in	r24, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     5aa:	0d b4       	in	r0, 0x2d	; 45
     5ac:	07 fe       	sbrs	r0, 7
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <_ZN4RF2413read_registerEh+0x30>
	return SPDR;
     5b0:	1e b5       	in	r17, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	ce 01       	movw	r24, r28
     5b6:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return result;
}
     5ba:	81 2f       	mov	r24, r17
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	08 95       	ret

000005c4 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	06 2f       	mov	r16, r22
     5d4:	e4 2e       	mov	r14, r20
     5d6:	f5 2e       	mov	r15, r21
     5d8:	12 2f       	mov	r17, r18
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     5da:	84 b1       	in	r24, 0x04	; 4
     5dc:	8c 62       	ori	r24, 0x2C	; 44
     5de:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     5e0:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     5e2:	8c b5       	in	r24, 0x2c	; 44
     5e4:	80 65       	ori	r24, 0x50	; 80
     5e6:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, size);
  status = *prx; // status is 1st byte of receive buffer

  	#elif defined(__AVR__)
  	 beginTransaction();
  	 status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
     5f0:	0f 71       	andi	r16, 0x1F	; 31
     5f2:	00 62       	ori	r16, 0x20	; 32
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     5f4:	0e bd       	out	0x2e, r16	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     5f6:	0d b4       	in	r0, 0x2d	; 45
     5f8:	07 fe       	sbrs	r0, 7
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <_ZN4RF2414write_registerEhPKhh+0x32>
	return SPDR;
     5fc:	0e b5       	in	r16, 0x2e	; 46
  	 while ( len-- )
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	91 0f       	add	r25, r17
     602:	11 23       	and	r17, r17
     604:	51 f0       	breq	.+20     	; 0x61a <_ZN4RF2414write_registerEhPKhh+0x56>
     606:	ee 2d       	mov	r30, r14
     608:	ff 2d       	mov	r31, r15
  	 AVR_SPI_MSTR_TRANSMIT_VAL(*buf++);
     60a:	21 91       	ld	r18, Z+
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     60c:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     60e:	0d b4       	in	r0, 0x2d	; 45
     610:	07 fe       	sbrs	r0, 7
     612:	fd cf       	rjmp	.-6      	; 0x60e <_ZN4RF2414write_registerEhPKhh+0x4a>
	return SPDR;
     614:	2e b5       	in	r18, 0x2e	; 46
  status = *prx; // status is 1st byte of receive buffer

  	#elif defined(__AVR__)
  	 beginTransaction();
  	 status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
  	 while ( len-- )
     616:	91 50       	subi	r25, 0x01	; 1
     618:	c0 f7       	brcc	.-16     	; 0x60a <_ZN4RF2414write_registerEhPKhh+0x46>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     622:	80 2f       	mov	r24, r16
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	08 95       	ret

00000632 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	ec 01       	movw	r28, r24
     63c:	16 2f       	mov	r17, r22
     63e:	04 2f       	mov	r16, r20
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     640:	84 b1       	in	r24, 0x04	; 4
     642:	8c 62       	ori	r24, 0x2C	; 44
     644:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     646:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     648:	8c b5       	in	r24, 0x2c	; 44
     64a:	80 65       	ori	r24, 0x50	; 80
     64c:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
	_SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
	status = *prx++; // status is 1st byte of receive buffer

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
     656:	1f 71       	andi	r17, 0x1F	; 31
     658:	10 62       	ori	r17, 0x20	; 32
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     65a:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     65c:	0d b4       	in	r0, 0x2d	; 45
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <_ZN4RF2414write_registerEhh+0x2a>
	return SPDR;
     662:	1e b5       	in	r17, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     664:	0e bd       	out	0x2e, r16	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     666:	0d b4       	in	r0, 0x2d	; 45
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <_ZN4RF2414write_registerEhh+0x34>
	return SPDR;
     66c:	8e b5       	in	r24, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	ce 01       	movw	r24, r28
     672:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     676:	81 2f       	mov	r24, r17
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret

00000682 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ec 01       	movw	r28, r24
     692:	d6 2e       	mov	r13, r22
     694:	e7 2e       	mov	r14, r23
     696:	f2 2e       	mov	r15, r18
  uint8_t status;
  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

   data_len = rf24_min(data_len, payload_size);
     698:	0b 81       	ldd	r16, Y+3	; 0x03
     69a:	14 2f       	mov	r17, r20
     69c:	04 17       	cp	r16, r20
     69e:	08 f4       	brcc	.+2      	; 0x6a2 <_ZN4RF2413write_payloadEPKvhh+0x20>
     6a0:	10 2f       	mov	r17, r16
   uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	81 11       	cpse	r24, r1
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <_ZN4RF2413write_payloadEPKvhh+0x2a>
     6a8:	01 1b       	sub	r16, r17
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <_ZN4RF2413write_payloadEPKvhh+0x2c>
     6ac:	00 e0       	ldi	r16, 0x00	; 0
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     6ae:	84 b1       	in	r24, 0x04	; 4
     6b0:	8c 62       	ori	r24, 0x2C	; 44
     6b2:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     6b4:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     6b6:	8c b5       	in	r24, 0x2c	; 44
     6b8:	80 65       	ori	r24, 0x50	; 80
     6ba:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     6c4:	fe bc       	out	0x2e, r15	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     6c6:	0d b4       	in	r0, 0x2d	; 45
     6c8:	07 fe       	sbrs	r0, 7
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <_ZN4RF2413write_payloadEPKvhh+0x44>
	return SPDR;
     6cc:	fe b4       	in	r15, 0x2e	; 46
	status = *prx; // status is 1st byte of receive buffer
	
	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( writeType );
	while ( data_len-- ) {
     6ce:	9f ef       	ldi	r25, 0xFF	; 255
     6d0:	91 0f       	add	r25, r17
     6d2:	11 23       	and	r17, r17
     6d4:	51 f0       	breq	.+20     	; 0x6ea <_ZN4RF2413write_payloadEPKvhh+0x68>
     6d6:	ed 2d       	mov	r30, r13
     6d8:	fe 2d       	mov	r31, r14
		AVR_SPI_MSTR_TRANSMIT_VAL(*current++);
     6da:	21 91       	ld	r18, Z+
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     6dc:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     6de:	0d b4       	in	r0, 0x2d	; 45
     6e0:	07 fe       	sbrs	r0, 7
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <_ZN4RF2413write_payloadEPKvhh+0x5c>
	return SPDR;
     6e4:	2e b5       	in	r18, 0x2e	; 46
	status = *prx; // status is 1st byte of receive buffer
	
	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( writeType );
	while ( data_len-- ) {
     6e6:	91 50       	subi	r25, 0x01	; 1
     6e8:	c0 f7       	brcc	.-16     	; 0x6da <_ZN4RF2413write_payloadEPKvhh+0x58>
		AVR_SPI_MSTR_TRANSMIT_VAL(*current++);
	}
	while ( blank_len-- ) {
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	90 0f       	add	r25, r16
     6ee:	00 23       	and	r16, r16
     6f0:	39 f0       	breq	.+14     	; 0x700 <_ZN4RF2413write_payloadEPKvhh+0x7e>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     6f2:	1e bc       	out	0x2e, r1	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     6f4:	0d b4       	in	r0, 0x2d	; 45
     6f6:	07 fe       	sbrs	r0, 7
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <_ZN4RF2413write_payloadEPKvhh+0x72>
	return SPDR;
     6fa:	2e b5       	in	r18, 0x2e	; 46
     6fc:	91 50       	subi	r25, 0x01	; 1
     6fe:	c8 f7       	brcc	.-14     	; 0x6f2 <_ZN4RF2413write_payloadEPKvhh+0x70>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	ce 01       	movw	r24, r28
     704:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     708:	8f 2d       	mov	r24, r15
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	08 95       	ret

0000071a <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ec 01       	movw	r28, r24
     72a:	d6 2e       	mov	r13, r22
     72c:	e7 2e       	mov	r14, r23
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);

  if(data_len > payload_size) data_len = payload_size;
     72e:	0b 81       	ldd	r16, Y+3	; 0x03
     730:	14 2f       	mov	r17, r20
     732:	04 17       	cp	r16, r20
     734:	08 f4       	brcc	.+2      	; 0x738 <_ZN4RF2412read_payloadEPvh+0x1e>
     736:	10 2f       	mov	r17, r16
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     738:	8c 81       	ldd	r24, Y+4	; 0x04
     73a:	81 11       	cpse	r24, r1
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN4RF2412read_payloadEPvh+0x28>
     73e:	01 1b       	sub	r16, r17
     740:	01 c0       	rjmp	.+2      	; 0x744 <_ZN4RF2412read_payloadEPvh+0x2a>
     742:	00 e0       	ldi	r16, 0x00	; 0
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     744:	84 b1       	in	r24, 0x04	; 4
     746:	8c 62       	ori	r24, 0x2C	; 44
     748:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     74a:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     74c:	8c b5       	in	r24, 0x2c	; 44
     74e:	80 65       	ori	r24, 0x50	; 80
     750:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	ce 01       	movw	r24, r28
     756:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     75a:	81 e6       	ldi	r24, 0x61	; 97
     75c:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     75e:	0d b4       	in	r0, 0x2d	; 45
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <_ZN4RF2412read_payloadEPvh+0x44>
	return SPDR;
     764:	fe b4       	in	r15, 0x2e	; 46
	*current = *prx;

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( R_RX_PAYLOAD );
	while ( data_len-- ) {
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	91 0f       	add	r25, r17
     76a:	11 23       	and	r17, r17
     76c:	59 f0       	breq	.+22     	; 0x784 <_ZN4RF2412read_payloadEPvh+0x6a>
     76e:	ed 2d       	mov	r30, r13
     770:	fe 2d       	mov	r31, r14
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     772:	3f ef       	ldi	r19, 0xFF	; 255
     774:	3e bd       	out	0x2e, r19	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     776:	0d b4       	in	r0, 0x2d	; 45
     778:	07 fe       	sbrs	r0, 7
     77a:	fd cf       	rjmp	.-6      	; 0x776 <_ZN4RF2412read_payloadEPvh+0x5c>
	return SPDR;
     77c:	2e b5       	in	r18, 0x2e	; 46
		*current++ = AVR_SPI_MSTR_TRANSMIT_VAL(0xFF);
     77e:	21 93       	st	Z+, r18
	*current = *prx;

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( R_RX_PAYLOAD );
	while ( data_len-- ) {
     780:	91 50       	subi	r25, 0x01	; 1
     782:	c0 f7       	brcc	.-16     	; 0x774 <_ZN4RF2412read_payloadEPvh+0x5a>
		*current++ = AVR_SPI_MSTR_TRANSMIT_VAL(0xFF);
	}
	while ( blank_len-- ) {
     784:	9f ef       	ldi	r25, 0xFF	; 255
     786:	90 0f       	add	r25, r16
     788:	00 23       	and	r16, r16
     78a:	41 f0       	breq	.+16     	; 0x79c <_ZN4RF2412read_payloadEPvh+0x82>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     790:	0d b4       	in	r0, 0x2d	; 45
     792:	07 fe       	sbrs	r0, 7
     794:	fd cf       	rjmp	.-6      	; 0x790 <_ZN4RF2412read_payloadEPvh+0x76>
	return SPDR;
     796:	3e b5       	in	r19, 0x2e	; 46
     798:	91 50       	subi	r25, 0x01	; 1
     79a:	c8 f7       	brcc	.-14     	; 0x78e <_ZN4RF2412read_payloadEPvh+0x74>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	ce 01       	movw	r24, r28
     7a0:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     7a4:	8f 2d       	mov	r24, r15
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	08 95       	ret

000007b6 <_ZN4RF248spiTransEh>:
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ec 01       	movw	r28, r24
     7be:	16 2f       	mov	r17, r22
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     7c0:	84 b1       	in	r24, 0x04	; 4
     7c2:	8c 62       	ori	r24, 0x2C	; 44
     7c4:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     7c6:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     7c8:	8c b5       	in	r24, 0x2c	; 44
     7ca:	80 65       	ori	r24, 0x50	; 80
     7cc:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	ce 01       	movw	r24, r28
     7d2:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     7d6:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     7d8:	0d b4       	in	r0, 0x2d	; 45
     7da:	07 fe       	sbrs	r0, 7
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <_ZN4RF248spiTransEh+0x22>
	return SPDR;
     7de:	1e b5       	in	r17, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     7e8:	81 2f       	mov	r24, r17
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	08 95       	ret

000007f2 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
     7f2:	62 ee       	ldi	r22, 0xE2	; 226
     7f4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN4RF248spiTransEh>
}
     7f8:	08 95       	ret

000007fa <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
     7fa:	61 ee       	ldi	r22, 0xE1	; 225
     7fc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN4RF248spiTransEh>
}
     800:	08 95       	ret

00000802 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(NOP);
     802:	6f ef       	ldi	r22, 0xFF	; 255
     804:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN4RF248spiTransEh>
}
     808:	08 95       	ret

0000080a <_ZN4RF24C1Ehh>:
{
	pipe0_reading_address[0]=0;
}
/****************************************************************************/

RF24::RF24(uint8_t _cepin, uint8_t _cspin):
     80a:	fc 01       	movw	r30, r24
  ce_pin(_cepin), csn_pin(_cspin), p_variant(false),
  payload_size(32), dynamic_payloads_enabled(false), addr_width(5)//,pipe0_reading_address(0)
     80c:	60 83       	st	Z, r22
     80e:	41 83       	std	Z+1, r20	; 0x01
     810:	12 82       	std	Z+2, r1	; 0x02
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	83 83       	std	Z+3, r24	; 0x03
     816:	14 82       	std	Z+4, r1	; 0x04
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	82 87       	std	Z+10, r24	; 0x0a
{
  pipe0_reading_address[0]=0;
     81c:	15 82       	std	Z+5, r1	; 0x05
     81e:	08 95       	ret

00000820 <_ZN4RF2410setChannelEh>:
#endif

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     820:	46 2f       	mov	r20, r22
  const uint8_t max_channel = 127;
  write_register(RF_CH,rf24_min(channel,max_channel));
     822:	60 38       	cpi	r22, 0x80	; 128
     824:	08 f0       	brcs	.+2      	; 0x828 <_ZN4RF2410setChannelEh+0x8>
     826:	4f e7       	ldi	r20, 0x7F	; 127
     828:	65 e0       	ldi	r22, 0x05	; 5
     82a:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
     82e:	08 95       	ret

00000830 <_ZN4RF2413stopListeningEv>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::stopListening(void)
{  
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	ec 01       	movw	r28, r24
  ce(LOW);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	0e 94 a4 02 	call	0x548	; 0x548 <_ZN4RF242ceEb>
     83c:	8f e8       	ldi	r24, 0x8F	; 143
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <_ZN4RF2413stopListeningEv+0x10>
     844:	00 c0       	rjmp	.+0      	; 0x846 <_ZN4RF2413stopListeningEv+0x16>
     846:	00 00       	nop
	delayMicroseconds(200);
 #else
delayMicroseconds(txRxDelay);
 #endif 
  
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
     848:	6d e1       	ldi	r22, 0x1D	; 29
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     850:	81 ff       	sbrs	r24, 1
     852:	09 c0       	rjmp	.+18     	; 0x866 <_ZN4RF2413stopListeningEv+0x36>
     854:	8f e8       	ldi	r24, 0x8F	; 143
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <_ZN4RF2413stopListeningEv+0x28>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <_ZN4RF2413stopListeningEv+0x2e>
     85e:	00 00       	nop
     #if defined (__AVR__)
     delayMicroseconds(200);
     #else
     delayMicroseconds(txRxDelay);
     #endif
	flush_tx();
     860:	ce 01       	movw	r24, r28
     862:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN4RF248flush_txEv>
  }
  //flush_rx();
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	ce 01       	movw	r24, r28
     86a:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     86e:	48 2f       	mov	r20, r24
     870:	4e 7f       	andi	r20, 0xFE	; 254
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	ce 01       	movw	r24, r28
     876:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
  if (ce_pin == csn_pin) {
    powerDown();
	powerUp();
  }
  #endif
  write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     882:	e4 e7       	ldi	r30, 0x74	; 116
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	e4 91       	lpm	r30, Z
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	a9 01       	movw	r20, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <_ZN4RF2413stopListeningEv+0x64>
     890:	44 0f       	add	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	ea 95       	dec	r30
     896:	e2 f7       	brpl	.-8      	; 0x890 <_ZN4RF2413stopListeningEv+0x60>
     898:	fa 01       	movw	r30, r20
     89a:	48 2f       	mov	r20, r24
     89c:	4e 2b       	or	r20, r30
     89e:	62 e0       	ldi	r22, 0x02	; 2
     8a0:	ce 01       	movw	r24, r28
     8a2:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
  
  //delayMicroseconds(100);

}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
   uint8_t cfg = read_register(CONFIG);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
     8b8:	81 fd       	sbrc	r24, 1
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <_ZN4RF247powerUpEv+0x30>
      write_register(CONFIG,read_register(CONFIG) | _BV(PWR_UP));
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     8c4:	48 2f       	mov	r20, r24
     8c6:	42 60       	ori	r20, 0x02	; 2
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8d0:	8f e0       	ldi	r24, 0x0F	; 15
     8d2:	97 e2       	ldi	r25, 0x27	; 39
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <_ZN4RF247powerUpEv+0x28>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <_ZN4RF247powerUpEv+0x2e>
     8da:	00 00       	nop
	  _delay_ms(5);
	  #else
      delay(5);
	  #endif
   }
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <_ZN4RF2414startFastWriteEPKvhbb>:
//Per the documentation, we want to set PTX Mode when not listening. Then all we do is write data and set CE high
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite( const void* buf, uint8_t len, const bool multicast, bool startTx){ //TMRh20
     8e2:	0f 93       	push	r16
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	ec 01       	movw	r28, r24

	//write_payload( buf,len);
	write_payload( buf, len,multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD ) ;
     8ea:	22 23       	and	r18, r18
     8ec:	11 f0       	breq	.+4      	; 0x8f2 <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     8ee:	20 eb       	ldi	r18, 0xB0	; 176
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     8f2:	20 ea       	ldi	r18, 0xA0	; 160
     8f4:	ce 01       	movw	r24, r28
     8f6:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2413write_payloadEPKvhh>
	if(startTx){
     8fa:	00 23       	and	r16, r16
     8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
		ce(HIGH);
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	ce 01       	movw	r24, r28
     902:	0e 94 a4 02 	call	0x548	; 0x548 <_ZN4RF242ceEb>
	}

}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <_ZN4RF245writeEPKvhb>:
#endif
/******************************************************************/

//Similar to the previous write, clears the interrupt flags
bool RF24::write( const void* buf, uint8_t len, const bool multicast )
{
     90e:	0f 93       	push	r16
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
	//Start Writing
	startFastWrite(buf,len,multicast);
     916:	01 e0       	ldi	r16, 0x01	; 1
     918:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN4RF2414startFastWriteEPKvhbb>
	//Wait until complete or failed
	#if defined (FAILURE_HANDLING) || defined (RF24_LINUX)
		uint32_t timer = millis();
	#endif 
	
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) { 
     91c:	ce 01       	movw	r24, r28
     91e:	0e 94 01 04 	call	0x802	; 0x802 <_ZN4RF2410get_statusEv>
     922:	80 73       	andi	r24, 0x30	; 48
     924:	d9 f3       	breq	.-10     	; 0x91c <_ZN4RF245writeEPKvhb+0xe>
				#endif
			}
		#endif
	}
    
	ce(LOW);
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	ce 01       	movw	r24, r28
     92a:	0e 94 a4 02 	call	0x548	; 0x548 <_ZN4RF242ceEb>

	uint8_t status = write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     92e:	40 e7       	ldi	r20, 0x70	; 112
     930:	67 e0       	ldi	r22, 0x07	; 7
     932:	ce 01       	movw	r24, r28
     934:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

  //Max retries exceeded
  if( status & _BV(MAX_RT)){
     938:	84 ff       	sbrs	r24, 4
     93a:	05 c0       	rjmp	.+10     	; 0x946 <_ZN4RF245writeEPKvhb+0x38>
  	flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     93c:	ce 01       	movw	r24, r28
     93e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN4RF248flush_txEv>
  	return 0;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	01 c0       	rjmp	.+2      	; 0x948 <_ZN4RF245writeEPKvhb+0x3a>
  }
	//TX OK 1 or 0
  return 1;
     946:	81 e0       	ldi	r24, 0x01	; 1
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <_ZN4RF245writeEPKvh>:

bool RF24::write( const void* buf, uint8_t len ){
	return write(buf,len,0);
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN4RF245writeEPKvhb>
}
     956:	08 95       	ret

00000958 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
     962:	8b 01       	movw	r16, r22
  if (!( read_register(FIFO_STATUS) & _BV(RX_EMPTY) )){
     964:	67 e1       	ldi	r22, 0x17	; 23
     966:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     96a:	80 fd       	sbrc	r24, 0
     96c:	0e c0       	rjmp	.+28     	; 0x98a <_ZN4RF249availableEPh+0x32>

    // If the caller wants the pipe number, include that
    if ( pipe_num ){
     96e:	01 15       	cp	r16, r1
     970:	11 05       	cpc	r17, r1
     972:	69 f0       	breq	.+26     	; 0x98e <_ZN4RF249availableEPh+0x36>
	  uint8_t status = get_status();
     974:	ce 01       	movw	r24, r28
     976:	0e 94 01 04 	call	0x802	; 0x802 <_ZN4RF2410get_statusEv>
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	95 95       	asr	r25
     97e:	87 95       	ror	r24
     980:	87 70       	andi	r24, 0x07	; 7
     982:	f8 01       	movw	r30, r16
     984:	80 83       	st	Z, r24
  	}
  	return 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	03 c0       	rjmp	.+6      	; 0x990 <_ZN4RF249availableEPh+0x38>
  }


  return 0;
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	01 c0       	rjmp	.+2      	; 0x990 <_ZN4RF249availableEPh+0x38>
    // If the caller wants the pipe number, include that
    if ( pipe_num ){
	  uint8_t status = get_status();
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
  	}
  	return 1;
     98e:	81 e0       	ldi	r24, 0x01	; 1


  return 0;


}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <_ZN4RF249availableEv>:

/****************************************************************************/

bool RF24::available(void)
{
  return available(NULL);
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN4RF249availableEPh>
}
     9a2:	08 95       	ret

000009a4 <_ZN4RF244readEPvh>:

}

/****************************************************************************/

void RF24::read( void* buf, uint8_t len ){
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24

  // Fetch the payload
  read_payload( buf, len );
     9aa:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN4RF2412read_payloadEPvh>

  //Clear the two possible interrupt flags with one command
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS) );
     9ae:	40 e7       	ldi	r20, 0x70	; 112
     9b0:	67 e0       	ldi	r22, 0x07	; 7
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <_ZN4RF2415openWritingPipeEPKh>:
  write_register(RX_PW_P0,payload_size);
}

/****************************************************************************/
void RF24::openWritingPipe(const uint8_t *address)
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ec 01       	movw	r28, r24
     9c8:	8b 01       	movw	r16, r22
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0,address, addr_width);
     9ca:	2a 85       	ldd	r18, Y+10	; 0x0a
     9cc:	ab 01       	movw	r20, r22
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN4RF2414write_registerEhPKhh>
  write_register(TX_ADDR, address, addr_width);
     9d4:	2a 85       	ldd	r18, Y+10	; 0x0a
     9d6:	a8 01       	movw	r20, r16
     9d8:	60 e1       	ldi	r22, 0x10	; 16
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN4RF2414write_registerEhPKhh>

  //const uint8_t max_payload_size = 32;
  //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
  write_register(RX_PW_P0,payload_size);
     9e0:	4b 81       	ldd	r20, Y+3	; 0x03
     9e2:	61 e1       	ldi	r22, 0x11	; 17
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <_ZN4RF2415openReadingPipeEhPKh>:
}

/****************************************************************************/

void RF24::openReadingPipe(uint8_t child, const uint8_t *address)
{
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	f6 2e       	mov	r15, r22
     a02:	8a 01       	movw	r16, r20
  // If this is pipe 0, cache the address.  This is needed because
  // openWritingPipe() will overwrite the pipe 0 address, so
  // startListening() will have to restore it.
  if (child == 0){
     a04:	61 11       	cpse	r22, r1
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <_ZN4RF2415openReadingPipeEhPKh+0x22>
    memcpy(pipe0_reading_address,address,addr_width);
     a08:	4a 85       	ldd	r20, Y+10	; 0x0a
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	b8 01       	movw	r22, r16
     a0e:	05 96       	adiw	r24, 0x05	; 5
     a10:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <memcpy>
     a14:	07 c0       	rjmp	.+14     	; 0xa24 <_ZN4RF2415openReadingPipeEhPKh+0x30>
  }
  if (child <= 6)
     a16:	66 e0       	ldi	r22, 0x06	; 6
     a18:	6f 15       	cp	r22, r15
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <_ZN4RF2415openReadingPipeEhPKh+0x2a>
     a1c:	36 c0       	rjmp	.+108    	; 0xa8a <_ZN4RF2415openReadingPipeEhPKh+0x96>
  {
    // For pipes 2-5, only write the LSB
    if ( child < 2 ){
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	7f 15       	cp	r23, r15
     a22:	58 f0       	brcs	.+22     	; 0xa3a <_ZN4RF2415openReadingPipeEhPKh+0x46>
      write_register(pgm_read_byte(&child_pipe[child]), address, addr_width);
     a24:	ef 2d       	mov	r30, r15
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	e2 59       	subi	r30, 0x92	; 146
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	64 91       	lpm	r22, Z
     a2e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a30:	a8 01       	movw	r20, r16
     a32:	ce 01       	movw	r24, r28
     a34:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN4RF2414write_registerEhPKhh>
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <_ZN4RF2415openReadingPipeEhPKh+0x56>
    }else{
      write_register(pgm_read_byte(&child_pipe[child]), address, 1);
     a3a:	ef 2d       	mov	r30, r15
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	e2 59       	subi	r30, 0x92	; 146
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	64 91       	lpm	r22, Z
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN4RF2414write_registerEhPKhh>
	}
    write_register(pgm_read_byte(&child_payload_size[child]),payload_size);
     a4a:	0f 2d       	mov	r16, r15
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	f8 01       	movw	r30, r16
     a50:	e8 59       	subi	r30, 0x98	; 152
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	64 91       	lpm	r22, Z
     a56:	4b 81       	ldd	r20, Y+3	; 0x03
     a58:	ce 01       	movw	r24, r28
     a5a:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     a5e:	62 e0       	ldi	r22, 0x02	; 2
     a60:	ce 01       	movw	r24, r28
     a62:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     a66:	f8 01       	movw	r30, r16
     a68:	ec 58       	subi	r30, 0x8C	; 140
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	44 91       	lpm	r20, Z
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	b9 01       	movw	r22, r18
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <_ZN4RF2415openReadingPipeEhPKh+0x86>
     a76:	66 0f       	add	r22, r22
     a78:	77 1f       	adc	r23, r23
     a7a:	4a 95       	dec	r20
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <_ZN4RF2415openReadingPipeEhPKh+0x82>
     a7e:	ab 01       	movw	r20, r22
     a80:	48 2b       	or	r20, r24
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	ce 01       	movw	r24, r28
     a86:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

  }
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	08 95       	ret

00000a96 <_ZN4RF2416closeReadingPipeEh>:

/****************************************************************************/

void RF24::closeReadingPipe( uint8_t pipe )
{
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	16 2f       	mov	r17, r22
  write_register(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     aa6:	e1 2f       	mov	r30, r17
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	ec 58       	subi	r30, 0x8C	; 140
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	e4 91       	lpm	r30, Z
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <_ZN4RF2416closeReadingPipeEh+0x26>
     ab8:	44 0f       	add	r20, r20
     aba:	55 1f       	adc	r21, r21
     abc:	ea 95       	dec	r30
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <_ZN4RF2416closeReadingPipeEh+0x22>
     ac0:	fa 01       	movw	r30, r20
     ac2:	e0 95       	com	r30
     ac4:	4e 2f       	mov	r20, r30
     ac6:	48 23       	and	r20, r24
     ac8:	62 e0       	ldi	r22, 0x02	; 2
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	08 95       	ret

00000ad8 <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	ec 01       	movw	r28, r24
 #if !defined (RF24_TINY) && ! defined(LITTLEWIRE)
  powerUp();
     ade:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN4RF247powerUpEv>
 #endif
  write_register(CONFIG, read_register(CONFIG) | _BV(PRIM_RX));
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     aea:	48 2f       	mov	r20, r24
     aec:	41 60       	ori	r20, 0x01	; 1
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
  write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     af6:	40 e7       	ldi	r20, 0x70	; 112
     af8:	67 e0       	ldi	r22, 0x07	; 7
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
  ce(HIGH);
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	ce 01       	movw	r24, r28
     b04:	0e 94 a4 02 	call	0x548	; 0x548 <_ZN4RF242ceEb>
  // Restore the pipe0 adddress, if exists
  if (pipe0_reading_address[0] > 0){
     b08:	8d 81       	ldd	r24, Y+5	; 0x05
     b0a:	88 23       	and	r24, r24
     b0c:	49 f0       	breq	.+18     	; 0xb20 <_ZN4RF2414startListeningEv+0x48>
    write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);	
     b0e:	2a 85       	ldd	r18, Y+10	; 0x0a
     b10:	ae 01       	movw	r20, r28
     b12:	4b 5f       	subi	r20, 0xFB	; 251
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	6a e0       	ldi	r22, 0x0A	; 10
     b18:	ce 01       	movw	r24, r28
     b1a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN4RF2414write_registerEhPKhh>
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <_ZN4RF2414startListeningEv+0x50>
  }else{
	closeReadingPipe(0);
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	ce 01       	movw	r24, r28
     b24:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN4RF2416closeReadingPipeEh>
  }

  // Flush buffers
  //flush_rx();
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
     b28:	6d e1       	ldi	r22, 0x1D	; 29
     b2a:	ce 01       	movw	r24, r28
     b2c:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     b30:	81 ff       	sbrs	r24, 1
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <_ZN4RF2414startListeningEv+0x62>
	flush_tx();
     b34:	ce 01       	movw	r24, r28
     b36:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN4RF248flush_txEv>
  }

  // Go!
  //delayMicroseconds(100);
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ec 01       	movw	r28, r24
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     b46:	84 b1       	in	r24, 0x04	; 4
     b48:	8c 62       	ori	r24, 0x2C	; 44
     b4a:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     b4c:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     b4e:	8c b5       	in	r24, 0x2c	; 44
     b50:	80 65       	ori	r24, 0x50	; 80
     b52:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	ce 01       	movw	r24, r28
     b58:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     b5c:	80 e5       	ldi	r24, 0x50	; 80
     b5e:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     b60:	0d b4       	in	r0, 0x2d	; 45
     b62:	07 fe       	sbrs	r0, 7
     b64:	fd cf       	rjmp	.-6      	; 0xb60 <_ZN4RF2415toggle_featuresEv+0x20>
	return SPDR;
     b66:	8e b5       	in	r24, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     b68:	83 e7       	ldi	r24, 0x73	; 115
     b6a:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     b6c:	0d b4       	in	r0, 0x2d	; 45
     b6e:	07 fe       	sbrs	r0, 7
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <_ZN4RF2415toggle_featuresEv+0x2c>
	return SPDR;
     b72:	8e b5       	in	r24, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	ce 01       	movw	r24, r28
     b78:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
  #endif

}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	ec 01       	movw	r28, r24
     b8a:	16 2f       	mov	r17, r22

  uint8_t setup = read_register(RF_SETUP) & 0b11111000;
     b8c:	66 e0       	ldi	r22, 0x06	; 6
     b8e:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     b92:	88 7f       	andi	r24, 0xF8	; 248

  if(level > 3){  						// If invalid level, go to max PA
     b94:	14 30       	cpi	r17, 0x04	; 4
     b96:	20 f4       	brcc	.+8      	; 0xba0 <_ZN4RF2410setPALevelEh+0x1e>
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
     b98:	41 2f       	mov	r20, r17
     b9a:	44 0f       	add	r20, r20
     b9c:	4f 5f       	subi	r20, 0xFF	; 255
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <_ZN4RF2410setPALevelEh+0x20>
{

  uint8_t setup = read_register(RF_SETUP) & 0b11111000;

  if(level > 3){  						// If invalid level, go to max PA
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
     ba0:	47 e0       	ldi	r20, 0x07	; 7
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
     ba2:	48 2b       	or	r20, r24
     ba4:	66 e0       	ldi	r22, 0x06	; 6
     ba6:	ce 01       	movw	r24, r28
     ba8:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	08 95       	ret

00000bb4 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	16 2f       	mov	r17, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     bc2:	66 e0       	ldi	r22, 0x06	; 6
     bc4:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     bc8:	87 7d       	andi	r24, 0xD7	; 215
     bca:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
  #endif
  if( speed == RF24_250KBPS )
     bcc:	12 30       	cpi	r17, 0x02	; 2
     bce:	59 f4       	brne	.+22     	; 0xbe6 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x32>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
     bd4:	0b e9       	ldi	r16, 0x9B	; 155
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	0b 87       	std	Y+11, r16	; 0x0b
     bde:	1c 87       	std	Y+12, r17	; 0x0c
     be0:	2d 87       	std	Y+13, r18	; 0x0d
     be2:	3e 87       	std	Y+14, r19	; 0x0e
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     be6:	11 30       	cpi	r17, 0x01	; 1
     be8:	49 f0       	breq	.+18     	; 0xbfc <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
     bea:	05 e5       	ldi	r16, 0x55	; 85
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	0b 87       	std	Y+11, r16	; 0x0b
     bf4:	1c 87       	std	Y+12, r17	; 0x0c
     bf6:	2d 87       	std	Y+13, r18	; 0x0d
     bf8:	3e 87       	std	Y+14, r19	; 0x0e
     bfa:	0a c0       	rjmp	.+20     	; 0xc10 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	f8 2e       	mov	r15, r24
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txRxDelay=190;
      #else //16Mhz Arduino	  
	  txRxDelay=65;
     c00:	01 e4       	ldi	r16, 0x41	; 65
     c02:	10 e0       	ldi	r17, 0x00	; 0
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	0b 87       	std	Y+11, r16	; 0x0b
     c0a:	1c 87       	std	Y+12, r17	; 0x0c
     c0c:	2d 87       	std	Y+13, r18	; 0x0d
     c0e:	3e 87       	std	Y+14, r19	; 0x0e
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
     c10:	4f 2d       	mov	r20, r15
     c12:	66 e0       	ldi	r22, 0x06	; 6
     c14:	ce 01       	movw	r24, r28
     c16:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     c1a:	66 e0       	ldi	r22, 0x06	; 6
     c1c:	ce 01       	movw	r24, r28
     c1e:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	f8 12       	cpse	r15, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
  {
    result = true;
  }
  return result;
}
     c28:	89 2f       	mov	r24, r25
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	08 95       	ret

00000c36 <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
  #elif defined(LITTLEWIRE)
    pinMode(csn_pin,OUTPUT);
    _SPI.begin();
    csn(HIGH);
  #elif defined(__AVR__)
	CE_PORT |= (1<<CE_BIT);
     c3c:	5f 9a       	sbi	0x0b, 7	; 11
	CSN_PORT|=(1<<CSN_BIT);
     c3e:	28 9a       	sbi	0x05, 0	; 5
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     c40:	84 b1       	in	r24, 0x04	; 4
     c42:	8c 62       	ori	r24, 0x2C	; 44
     c44:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     c46:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     c48:	8c b5       	in	r24, 0x2c	; 44
     c4a:	80 65       	ori	r24, 0x50	; 80
     c4c:	8c bd       	out	0x2c, r24	; 44
	spi_master_initialize();
	csn(HIGH);
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 94 02 	call	0x528	; 0x528 <_ZN4RF243csnEb>
     c56:	8f e0       	ldi	r24, 0x0F	; 15
     c58:	97 e2       	ldi	r25, 0x27	; 39
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <_ZN4RF245beginEv+0x24>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <_ZN4RF245beginEv+0x2a>
     c60:	00 00       	nop
  #else
  delay( 5 ) ;
  #endif

  // Reset CONFIG and enable 16-bit CRC.
  write_register( CONFIG, 0b00001100 ) ;
     c62:	4c e0       	ldi	r20, 0x0C	; 12
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	ce 01       	movw	r24, r28
     c68:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     c6c:	4f e5       	ldi	r20, 0x5F	; 95
     c6e:	64 e0       	ldi	r22, 0x04	; 4
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     c76:	62 e0       	ldi	r22, 0x02	; 2
     c78:	ce 01       	movw	r24, r28
     c7a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     c7e:	88 23       	and	r24, r24
     c80:	11 f0       	breq	.+4      	; 0xc86 <_ZN4RF245beginEv+0x50>
  {
    p_variant = true ;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	8a 83       	std	Y+2, r24	; 0x02
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	6d e1       	ldi	r22, 0x1D	; 29
     c98:	ce 01       	movw	r24, r28
     c9a:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	6c e1       	ldi	r22, 0x1C	; 28
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     ca8:	40 e7       	ldi	r20, 0x70	; 112
     caa:	67 e0       	ldi	r22, 0x07	; 7
     cac:	ce 01       	movw	r24, r28
     cae:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     cb2:	6c e4       	ldi	r22, 0x4C	; 76
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 10 04 	call	0x820	; 0x820 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     cba:	ce 01       	movw	r24, r28
     cbc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN4RF248flush_rxEv>
  flush_tx();
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     cc6:	ce 01       	movw	r24, r28
     cc8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	ce 01       	movw	r24, r28
     cd0:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN4RF2413read_registerEh>
     cd4:	48 2f       	mov	r20, r24
     cd6:	4e 7f       	andi	r20, 0xFE	; 254
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 19 03 	call	0x632	; 0x632 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
}
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <__tablejump2__>:
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31

00000cec <__tablejump__>:
     cec:	05 90       	lpm	r0, Z+
     cee:	f4 91       	lpm	r31, Z
     cf0:	e0 2d       	mov	r30, r0
     cf2:	09 94       	ijmp

00000cf4 <memcpy>:
     cf4:	fb 01       	movw	r30, r22
     cf6:	dc 01       	movw	r26, r24
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <memcpy+0xa>
     cfa:	01 90       	ld	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	41 50       	subi	r20, 0x01	; 1
     d00:	50 40       	sbci	r21, 0x00	; 0
     d02:	d8 f7       	brcc	.-10     	; 0xcfa <memcpy+0x6>
     d04:	08 95       	ret

00000d06 <fdevopen>:
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
     d10:	8b 01       	movw	r16, r22
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	31 f4       	brne	.+12     	; 0xd22 <fdevopen+0x1c>
     d16:	61 15       	cp	r22, r1
     d18:	71 05       	cpc	r23, r1
     d1a:	19 f4       	brne	.+6      	; 0xd22 <fdevopen+0x1c>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	38 c0       	rjmp	.+112    	; 0xd92 <fdevopen+0x8c>
     d22:	6e e0       	ldi	r22, 0x0E	; 14
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <calloc>
     d2e:	fc 01       	movw	r30, r24
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	a1 f3       	breq	.-24     	; 0xd1c <fdevopen+0x16>
     d34:	80 e8       	ldi	r24, 0x80	; 128
     d36:	83 83       	std	Z+3, r24	; 0x03
     d38:	01 15       	cp	r16, r1
     d3a:	11 05       	cpc	r17, r1
     d3c:	71 f0       	breq	.+28     	; 0xd5a <fdevopen+0x54>
     d3e:	13 87       	std	Z+11, r17	; 0x0b
     d40:	02 87       	std	Z+10, r16	; 0x0a
     d42:	81 e8       	ldi	r24, 0x81	; 129
     d44:	83 83       	std	Z+3, r24	; 0x03
     d46:	80 91 86 02 	lds	r24, 0x0286
     d4a:	90 91 87 02 	lds	r25, 0x0287
     d4e:	89 2b       	or	r24, r25
     d50:	21 f4       	brne	.+8      	; 0xd5a <fdevopen+0x54>
     d52:	f0 93 87 02 	sts	0x0287, r31
     d56:	e0 93 86 02 	sts	0x0286, r30
     d5a:	20 97       	sbiw	r28, 0x00	; 0
     d5c:	c9 f0       	breq	.+50     	; 0xd90 <fdevopen+0x8a>
     d5e:	d1 87       	std	Z+9, r29	; 0x09
     d60:	c0 87       	std	Z+8, r28	; 0x08
     d62:	83 81       	ldd	r24, Z+3	; 0x03
     d64:	82 60       	ori	r24, 0x02	; 2
     d66:	83 83       	std	Z+3, r24	; 0x03
     d68:	80 91 88 02 	lds	r24, 0x0288
     d6c:	90 91 89 02 	lds	r25, 0x0289
     d70:	89 2b       	or	r24, r25
     d72:	71 f4       	brne	.+28     	; 0xd90 <fdevopen+0x8a>
     d74:	f0 93 89 02 	sts	0x0289, r31
     d78:	e0 93 88 02 	sts	0x0288, r30
     d7c:	80 91 8a 02 	lds	r24, 0x028A
     d80:	90 91 8b 02 	lds	r25, 0x028B
     d84:	89 2b       	or	r24, r25
     d86:	21 f4       	brne	.+8      	; 0xd90 <fdevopen+0x8a>
     d88:	f0 93 8b 02 	sts	0x028B, r31
     d8c:	e0 93 8a 02 	sts	0x028A, r30
     d90:	cf 01       	movw	r24, r30
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <printf>:
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e4 ed       	ldi	r30, 0xD4	; 212
     da2:	f6 e0       	ldi	r31, 0x06	; 6
     da4:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x20>
     da8:	fe 01       	movw	r30, r28
     daa:	35 96       	adiw	r30, 0x05	; 5
     dac:	61 91       	ld	r22, Z+
     dae:	71 91       	ld	r23, Z+
     db0:	af 01       	movw	r20, r30
     db2:	80 91 88 02 	lds	r24, 0x0288
     db6:	90 91 89 02 	lds	r25, 0x0289
     dba:	0e 94 23 07 	call	0xe46	; 0xe46 <vfprintf>
     dbe:	e2 e0       	ldi	r30, 0x02	; 2
     dc0:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x20>

00000dc4 <puts>:
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	e0 91 88 02 	lds	r30, 0x0288
     dd0:	f0 91 89 02 	lds	r31, 0x0289
     dd4:	23 81       	ldd	r18, Z+3	; 0x03
     dd6:	21 ff       	sbrs	r18, 1
     dd8:	1b c0       	rjmp	.+54     	; 0xe10 <puts+0x4c>
     dda:	ec 01       	movw	r28, r24
     ddc:	00 e0       	ldi	r16, 0x00	; 0
     dde:	10 e0       	ldi	r17, 0x00	; 0
     de0:	89 91       	ld	r24, Y+
     de2:	60 91 88 02 	lds	r22, 0x0288
     de6:	70 91 89 02 	lds	r23, 0x0289
     dea:	db 01       	movw	r26, r22
     dec:	18 96       	adiw	r26, 0x08	; 8
     dee:	ed 91       	ld	r30, X+
     df0:	fc 91       	ld	r31, X
     df2:	19 97       	sbiw	r26, 0x09	; 9
     df4:	88 23       	and	r24, r24
     df6:	31 f0       	breq	.+12     	; 0xe04 <puts+0x40>
     df8:	09 95       	icall
     dfa:	89 2b       	or	r24, r25
     dfc:	89 f3       	breq	.-30     	; 0xde0 <puts+0x1c>
     dfe:	0f ef       	ldi	r16, 0xFF	; 255
     e00:	1f ef       	ldi	r17, 0xFF	; 255
     e02:	ee cf       	rjmp	.-36     	; 0xde0 <puts+0x1c>
     e04:	8a e0       	ldi	r24, 0x0A	; 10
     e06:	09 95       	icall
     e08:	89 2b       	or	r24, r25
     e0a:	11 f4       	brne	.+4      	; 0xe10 <puts+0x4c>
     e0c:	c8 01       	movw	r24, r16
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <puts+0x50>
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	9f ef       	ldi	r25, 0xFF	; 255
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <scanf>:
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e1       	ldi	r30, 0x15	; 21
     e24:	f7 e0       	ldi	r31, 0x07	; 7
     e26:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x20>
     e2a:	fe 01       	movw	r30, r28
     e2c:	35 96       	adiw	r30, 0x05	; 5
     e2e:	61 91       	ld	r22, Z+
     e30:	71 91       	ld	r23, Z+
     e32:	af 01       	movw	r20, r30
     e34:	80 91 86 02 	lds	r24, 0x0286
     e38:	90 91 87 02 	lds	r25, 0x0287
     e3c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vfscanf>
     e40:	e2 e0       	ldi	r30, 0x02	; 2
     e42:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x20>

00000e46 <vfprintf>:
     e46:	ac e0       	ldi	r26, 0x0C	; 12
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e9 e2       	ldi	r30, 0x29	; 41
     e4c:	f7 e0       	ldi	r31, 0x07	; 7
     e4e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__prologue_saves__>
     e52:	7c 01       	movw	r14, r24
     e54:	6b 01       	movw	r12, r22
     e56:	8a 01       	movw	r16, r20
     e58:	fc 01       	movw	r30, r24
     e5a:	17 82       	std	Z+7, r1	; 0x07
     e5c:	16 82       	std	Z+6, r1	; 0x06
     e5e:	83 81       	ldd	r24, Z+3	; 0x03
     e60:	81 ff       	sbrs	r24, 1
     e62:	bd c1       	rjmp	.+890    	; 0x11de <vfprintf+0x398>
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	4c 01       	movw	r8, r24
     e6a:	f7 01       	movw	r30, r14
     e6c:	93 81       	ldd	r25, Z+3	; 0x03
     e6e:	f6 01       	movw	r30, r12
     e70:	93 fd       	sbrc	r25, 3
     e72:	85 91       	lpm	r24, Z+
     e74:	93 ff       	sbrs	r25, 3
     e76:	81 91       	ld	r24, Z+
     e78:	6f 01       	movw	r12, r30
     e7a:	88 23       	and	r24, r24
     e7c:	09 f4       	brne	.+2      	; 0xe80 <vfprintf+0x3a>
     e7e:	ab c1       	rjmp	.+854    	; 0x11d6 <vfprintf+0x390>
     e80:	85 32       	cpi	r24, 0x25	; 37
     e82:	39 f4       	brne	.+14     	; 0xe92 <vfprintf+0x4c>
     e84:	93 fd       	sbrc	r25, 3
     e86:	85 91       	lpm	r24, Z+
     e88:	93 ff       	sbrs	r25, 3
     e8a:	81 91       	ld	r24, Z+
     e8c:	6f 01       	movw	r12, r30
     e8e:	85 32       	cpi	r24, 0x25	; 37
     e90:	29 f4       	brne	.+10     	; 0xe9c <vfprintf+0x56>
     e92:	b7 01       	movw	r22, r14
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
     e9a:	e7 cf       	rjmp	.-50     	; 0xe6a <vfprintf+0x24>
     e9c:	51 2c       	mov	r5, r1
     e9e:	31 2c       	mov	r3, r1
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	20 32       	cpi	r18, 0x20	; 32
     ea4:	a0 f4       	brcc	.+40     	; 0xece <vfprintf+0x88>
     ea6:	8b 32       	cpi	r24, 0x2B	; 43
     ea8:	69 f0       	breq	.+26     	; 0xec4 <vfprintf+0x7e>
     eaa:	30 f4       	brcc	.+12     	; 0xeb8 <vfprintf+0x72>
     eac:	80 32       	cpi	r24, 0x20	; 32
     eae:	59 f0       	breq	.+22     	; 0xec6 <vfprintf+0x80>
     eb0:	83 32       	cpi	r24, 0x23	; 35
     eb2:	69 f4       	brne	.+26     	; 0xece <vfprintf+0x88>
     eb4:	20 61       	ori	r18, 0x10	; 16
     eb6:	2c c0       	rjmp	.+88     	; 0xf10 <vfprintf+0xca>
     eb8:	8d 32       	cpi	r24, 0x2D	; 45
     eba:	39 f0       	breq	.+14     	; 0xeca <vfprintf+0x84>
     ebc:	80 33       	cpi	r24, 0x30	; 48
     ebe:	39 f4       	brne	.+14     	; 0xece <vfprintf+0x88>
     ec0:	21 60       	ori	r18, 0x01	; 1
     ec2:	26 c0       	rjmp	.+76     	; 0xf10 <vfprintf+0xca>
     ec4:	22 60       	ori	r18, 0x02	; 2
     ec6:	24 60       	ori	r18, 0x04	; 4
     ec8:	23 c0       	rjmp	.+70     	; 0xf10 <vfprintf+0xca>
     eca:	28 60       	ori	r18, 0x08	; 8
     ecc:	21 c0       	rjmp	.+66     	; 0xf10 <vfprintf+0xca>
     ece:	27 fd       	sbrc	r18, 7
     ed0:	27 c0       	rjmp	.+78     	; 0xf20 <vfprintf+0xda>
     ed2:	30 ed       	ldi	r19, 0xD0	; 208
     ed4:	38 0f       	add	r19, r24
     ed6:	3a 30       	cpi	r19, 0x0A	; 10
     ed8:	78 f4       	brcc	.+30     	; 0xef8 <vfprintf+0xb2>
     eda:	26 ff       	sbrs	r18, 6
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0xa4>
     ede:	fa e0       	ldi	r31, 0x0A	; 10
     ee0:	5f 9e       	mul	r5, r31
     ee2:	30 0d       	add	r19, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	53 2e       	mov	r5, r19
     ee8:	13 c0       	rjmp	.+38     	; 0xf10 <vfprintf+0xca>
     eea:	8a e0       	ldi	r24, 0x0A	; 10
     eec:	38 9e       	mul	r3, r24
     eee:	30 0d       	add	r19, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	33 2e       	mov	r3, r19
     ef4:	20 62       	ori	r18, 0x20	; 32
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <vfprintf+0xca>
     ef8:	8e 32       	cpi	r24, 0x2E	; 46
     efa:	21 f4       	brne	.+8      	; 0xf04 <vfprintf+0xbe>
     efc:	26 fd       	sbrc	r18, 6
     efe:	6b c1       	rjmp	.+726    	; 0x11d6 <vfprintf+0x390>
     f00:	20 64       	ori	r18, 0x40	; 64
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <vfprintf+0xca>
     f04:	8c 36       	cpi	r24, 0x6C	; 108
     f06:	11 f4       	brne	.+4      	; 0xf0c <vfprintf+0xc6>
     f08:	20 68       	ori	r18, 0x80	; 128
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0xca>
     f0c:	88 36       	cpi	r24, 0x68	; 104
     f0e:	41 f4       	brne	.+16     	; 0xf20 <vfprintf+0xda>
     f10:	f6 01       	movw	r30, r12
     f12:	93 fd       	sbrc	r25, 3
     f14:	85 91       	lpm	r24, Z+
     f16:	93 ff       	sbrs	r25, 3
     f18:	81 91       	ld	r24, Z+
     f1a:	6f 01       	movw	r12, r30
     f1c:	81 11       	cpse	r24, r1
     f1e:	c1 cf       	rjmp	.-126    	; 0xea2 <vfprintf+0x5c>
     f20:	98 2f       	mov	r25, r24
     f22:	9f 7d       	andi	r25, 0xDF	; 223
     f24:	95 54       	subi	r25, 0x45	; 69
     f26:	93 30       	cpi	r25, 0x03	; 3
     f28:	28 f4       	brcc	.+10     	; 0xf34 <vfprintf+0xee>
     f2a:	0c 5f       	subi	r16, 0xFC	; 252
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	ff e3       	ldi	r31, 0x3F	; 63
     f30:	f9 83       	std	Y+1, r31	; 0x01
     f32:	0d c0       	rjmp	.+26     	; 0xf4e <vfprintf+0x108>
     f34:	83 36       	cpi	r24, 0x63	; 99
     f36:	31 f0       	breq	.+12     	; 0xf44 <vfprintf+0xfe>
     f38:	83 37       	cpi	r24, 0x73	; 115
     f3a:	71 f0       	breq	.+28     	; 0xf58 <vfprintf+0x112>
     f3c:	83 35       	cpi	r24, 0x53	; 83
     f3e:	09 f0       	breq	.+2      	; 0xf42 <vfprintf+0xfc>
     f40:	5b c0       	rjmp	.+182    	; 0xff8 <vfprintf+0x1b2>
     f42:	22 c0       	rjmp	.+68     	; 0xf88 <vfprintf+0x142>
     f44:	f8 01       	movw	r30, r16
     f46:	80 81       	ld	r24, Z
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	0e 5f       	subi	r16, 0xFE	; 254
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	44 24       	eor	r4, r4
     f50:	43 94       	inc	r4
     f52:	51 2c       	mov	r5, r1
     f54:	54 01       	movw	r10, r8
     f56:	15 c0       	rjmp	.+42     	; 0xf82 <vfprintf+0x13c>
     f58:	38 01       	movw	r6, r16
     f5a:	f2 e0       	ldi	r31, 0x02	; 2
     f5c:	6f 0e       	add	r6, r31
     f5e:	71 1c       	adc	r7, r1
     f60:	f8 01       	movw	r30, r16
     f62:	a0 80       	ld	r10, Z
     f64:	b1 80       	ldd	r11, Z+1	; 0x01
     f66:	26 ff       	sbrs	r18, 6
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <vfprintf+0x12a>
     f6a:	65 2d       	mov	r22, r5
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <vfprintf+0x12e>
     f70:	6f ef       	ldi	r22, 0xFF	; 255
     f72:	7f ef       	ldi	r23, 0xFF	; 255
     f74:	c5 01       	movw	r24, r10
     f76:	2c 87       	std	Y+12, r18	; 0x0c
     f78:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <strnlen>
     f7c:	2c 01       	movw	r4, r24
     f7e:	83 01       	movw	r16, r6
     f80:	2c 85       	ldd	r18, Y+12	; 0x0c
     f82:	2f 77       	andi	r18, 0x7F	; 127
     f84:	22 2e       	mov	r2, r18
     f86:	17 c0       	rjmp	.+46     	; 0xfb6 <vfprintf+0x170>
     f88:	38 01       	movw	r6, r16
     f8a:	f2 e0       	ldi	r31, 0x02	; 2
     f8c:	6f 0e       	add	r6, r31
     f8e:	71 1c       	adc	r7, r1
     f90:	f8 01       	movw	r30, r16
     f92:	a0 80       	ld	r10, Z
     f94:	b1 80       	ldd	r11, Z+1	; 0x01
     f96:	26 ff       	sbrs	r18, 6
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <vfprintf+0x15a>
     f9a:	65 2d       	mov	r22, r5
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <vfprintf+0x15e>
     fa0:	6f ef       	ldi	r22, 0xFF	; 255
     fa2:	7f ef       	ldi	r23, 0xFF	; 255
     fa4:	c5 01       	movw	r24, r10
     fa6:	2c 87       	std	Y+12, r18	; 0x0c
     fa8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <strnlen_P>
     fac:	2c 01       	movw	r4, r24
     fae:	2c 85       	ldd	r18, Y+12	; 0x0c
     fb0:	20 68       	ori	r18, 0x80	; 128
     fb2:	22 2e       	mov	r2, r18
     fb4:	83 01       	movw	r16, r6
     fb6:	23 fc       	sbrc	r2, 3
     fb8:	1b c0       	rjmp	.+54     	; 0xff0 <vfprintf+0x1aa>
     fba:	83 2d       	mov	r24, r3
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	48 16       	cp	r4, r24
     fc0:	59 06       	cpc	r5, r25
     fc2:	b0 f4       	brcc	.+44     	; 0xff0 <vfprintf+0x1aa>
     fc4:	b7 01       	movw	r22, r14
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
     fce:	3a 94       	dec	r3
     fd0:	f4 cf       	rjmp	.-24     	; 0xfba <vfprintf+0x174>
     fd2:	f5 01       	movw	r30, r10
     fd4:	27 fc       	sbrc	r2, 7
     fd6:	85 91       	lpm	r24, Z+
     fd8:	27 fe       	sbrs	r2, 7
     fda:	81 91       	ld	r24, Z+
     fdc:	5f 01       	movw	r10, r30
     fde:	b7 01       	movw	r22, r14
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
     fe6:	31 10       	cpse	r3, r1
     fe8:	3a 94       	dec	r3
     fea:	f1 e0       	ldi	r31, 0x01	; 1
     fec:	4f 1a       	sub	r4, r31
     fee:	51 08       	sbc	r5, r1
     ff0:	41 14       	cp	r4, r1
     ff2:	51 04       	cpc	r5, r1
     ff4:	71 f7       	brne	.-36     	; 0xfd2 <vfprintf+0x18c>
     ff6:	e5 c0       	rjmp	.+458    	; 0x11c2 <vfprintf+0x37c>
     ff8:	84 36       	cpi	r24, 0x64	; 100
     ffa:	11 f0       	breq	.+4      	; 0x1000 <vfprintf+0x1ba>
     ffc:	89 36       	cpi	r24, 0x69	; 105
     ffe:	39 f5       	brne	.+78     	; 0x104e <vfprintf+0x208>
    1000:	f8 01       	movw	r30, r16
    1002:	27 ff       	sbrs	r18, 7
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <vfprintf+0x1ce>
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	0c 5f       	subi	r16, 0xFC	; 252
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <vfprintf+0x1de>
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	88 27       	eor	r24, r24
    101a:	77 fd       	sbrc	r23, 7
    101c:	80 95       	com	r24
    101e:	98 2f       	mov	r25, r24
    1020:	0e 5f       	subi	r16, 0xFE	; 254
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	2f 76       	andi	r18, 0x6F	; 111
    1026:	b2 2e       	mov	r11, r18
    1028:	97 ff       	sbrs	r25, 7
    102a:	09 c0       	rjmp	.+18     	; 0x103e <vfprintf+0x1f8>
    102c:	90 95       	com	r25
    102e:	80 95       	com	r24
    1030:	70 95       	com	r23
    1032:	61 95       	neg	r22
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	20 68       	ori	r18, 0x80	; 128
    103c:	b2 2e       	mov	r11, r18
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	a4 01       	movw	r20, r8
    1044:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__ultoa_invert>
    1048:	a8 2e       	mov	r10, r24
    104a:	a8 18       	sub	r10, r8
    104c:	44 c0       	rjmp	.+136    	; 0x10d6 <vfprintf+0x290>
    104e:	85 37       	cpi	r24, 0x75	; 117
    1050:	29 f4       	brne	.+10     	; 0x105c <vfprintf+0x216>
    1052:	2f 7e       	andi	r18, 0xEF	; 239
    1054:	b2 2e       	mov	r11, r18
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	25 c0       	rjmp	.+74     	; 0x10a6 <vfprintf+0x260>
    105c:	f2 2f       	mov	r31, r18
    105e:	f9 7f       	andi	r31, 0xF9	; 249
    1060:	bf 2e       	mov	r11, r31
    1062:	8f 36       	cpi	r24, 0x6F	; 111
    1064:	c1 f0       	breq	.+48     	; 0x1096 <vfprintf+0x250>
    1066:	18 f4       	brcc	.+6      	; 0x106e <vfprintf+0x228>
    1068:	88 35       	cpi	r24, 0x58	; 88
    106a:	79 f0       	breq	.+30     	; 0x108a <vfprintf+0x244>
    106c:	b4 c0       	rjmp	.+360    	; 0x11d6 <vfprintf+0x390>
    106e:	80 37       	cpi	r24, 0x70	; 112
    1070:	19 f0       	breq	.+6      	; 0x1078 <vfprintf+0x232>
    1072:	88 37       	cpi	r24, 0x78	; 120
    1074:	21 f0       	breq	.+8      	; 0x107e <vfprintf+0x238>
    1076:	af c0       	rjmp	.+350    	; 0x11d6 <vfprintf+0x390>
    1078:	2f 2f       	mov	r18, r31
    107a:	20 61       	ori	r18, 0x10	; 16
    107c:	b2 2e       	mov	r11, r18
    107e:	b4 fe       	sbrs	r11, 4
    1080:	0d c0       	rjmp	.+26     	; 0x109c <vfprintf+0x256>
    1082:	8b 2d       	mov	r24, r11
    1084:	84 60       	ori	r24, 0x04	; 4
    1086:	b8 2e       	mov	r11, r24
    1088:	09 c0       	rjmp	.+18     	; 0x109c <vfprintf+0x256>
    108a:	24 ff       	sbrs	r18, 4
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <vfprintf+0x25c>
    108e:	9f 2f       	mov	r25, r31
    1090:	96 60       	ori	r25, 0x06	; 6
    1092:	b9 2e       	mov	r11, r25
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <vfprintf+0x25c>
    1096:	28 e0       	ldi	r18, 0x08	; 8
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <vfprintf+0x260>
    109c:	20 e1       	ldi	r18, 0x10	; 16
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x260>
    10a2:	20 e1       	ldi	r18, 0x10	; 16
    10a4:	32 e0       	ldi	r19, 0x02	; 2
    10a6:	f8 01       	movw	r30, r16
    10a8:	b7 fe       	sbrs	r11, 7
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <vfprintf+0x274>
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	0c 5f       	subi	r16, 0xFC	; 252
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <vfprintf+0x280>
    10ba:	60 81       	ld	r22, Z
    10bc:	71 81       	ldd	r23, Z+1	; 0x01
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 5f       	subi	r16, 0xFE	; 254
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	a4 01       	movw	r20, r8
    10c8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__ultoa_invert>
    10cc:	a8 2e       	mov	r10, r24
    10ce:	a8 18       	sub	r10, r8
    10d0:	fb 2d       	mov	r31, r11
    10d2:	ff 77       	andi	r31, 0x7F	; 127
    10d4:	bf 2e       	mov	r11, r31
    10d6:	b6 fe       	sbrs	r11, 6
    10d8:	0b c0       	rjmp	.+22     	; 0x10f0 <vfprintf+0x2aa>
    10da:	2b 2d       	mov	r18, r11
    10dc:	2e 7f       	andi	r18, 0xFE	; 254
    10de:	a5 14       	cp	r10, r5
    10e0:	50 f4       	brcc	.+20     	; 0x10f6 <vfprintf+0x2b0>
    10e2:	b4 fe       	sbrs	r11, 4
    10e4:	0a c0       	rjmp	.+20     	; 0x10fa <vfprintf+0x2b4>
    10e6:	b2 fc       	sbrc	r11, 2
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <vfprintf+0x2b4>
    10ea:	2b 2d       	mov	r18, r11
    10ec:	2e 7e       	andi	r18, 0xEE	; 238
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <vfprintf+0x2b4>
    10f0:	7a 2c       	mov	r7, r10
    10f2:	2b 2d       	mov	r18, r11
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x2b6>
    10f6:	7a 2c       	mov	r7, r10
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <vfprintf+0x2b6>
    10fa:	75 2c       	mov	r7, r5
    10fc:	24 ff       	sbrs	r18, 4
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <vfprintf+0x2d4>
    1100:	fe 01       	movw	r30, r28
    1102:	ea 0d       	add	r30, r10
    1104:	f1 1d       	adc	r31, r1
    1106:	80 81       	ld	r24, Z
    1108:	80 33       	cpi	r24, 0x30	; 48
    110a:	11 f4       	brne	.+4      	; 0x1110 <vfprintf+0x2ca>
    110c:	29 7e       	andi	r18, 0xE9	; 233
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <vfprintf+0x2dc>
    1110:	22 ff       	sbrs	r18, 2
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <vfprintf+0x2da>
    1114:	73 94       	inc	r7
    1116:	73 94       	inc	r7
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <vfprintf+0x2dc>
    111a:	82 2f       	mov	r24, r18
    111c:	86 78       	andi	r24, 0x86	; 134
    111e:	09 f0       	breq	.+2      	; 0x1122 <vfprintf+0x2dc>
    1120:	73 94       	inc	r7
    1122:	23 fd       	sbrc	r18, 3
    1124:	13 c0       	rjmp	.+38     	; 0x114c <vfprintf+0x306>
    1126:	20 ff       	sbrs	r18, 0
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <vfprintf+0x2f0>
    112a:	5a 2c       	mov	r5, r10
    112c:	73 14       	cp	r7, r3
    112e:	18 f4       	brcc	.+6      	; 0x1136 <vfprintf+0x2f0>
    1130:	53 0c       	add	r5, r3
    1132:	57 18       	sub	r5, r7
    1134:	73 2c       	mov	r7, r3
    1136:	73 14       	cp	r7, r3
    1138:	68 f4       	brcc	.+26     	; 0x1154 <vfprintf+0x30e>
    113a:	b7 01       	movw	r22, r14
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	2c 87       	std	Y+12, r18	; 0x0c
    1142:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
    1146:	73 94       	inc	r7
    1148:	2c 85       	ldd	r18, Y+12	; 0x0c
    114a:	f5 cf       	rjmp	.-22     	; 0x1136 <vfprintf+0x2f0>
    114c:	73 14       	cp	r7, r3
    114e:	10 f4       	brcc	.+4      	; 0x1154 <vfprintf+0x30e>
    1150:	37 18       	sub	r3, r7
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <vfprintf+0x310>
    1154:	31 2c       	mov	r3, r1
    1156:	24 ff       	sbrs	r18, 4
    1158:	12 c0       	rjmp	.+36     	; 0x117e <vfprintf+0x338>
    115a:	b7 01       	movw	r22, r14
    115c:	80 e3       	ldi	r24, 0x30	; 48
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	2c 87       	std	Y+12, r18	; 0x0c
    1162:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
    1166:	2c 85       	ldd	r18, Y+12	; 0x0c
    1168:	22 ff       	sbrs	r18, 2
    116a:	17 c0       	rjmp	.+46     	; 0x119a <vfprintf+0x354>
    116c:	21 ff       	sbrs	r18, 1
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <vfprintf+0x330>
    1170:	88 e5       	ldi	r24, 0x58	; 88
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <vfprintf+0x334>
    1176:	88 e7       	ldi	r24, 0x78	; 120
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	b7 01       	movw	r22, r14
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <vfprintf+0x350>
    117e:	82 2f       	mov	r24, r18
    1180:	86 78       	andi	r24, 0x86	; 134
    1182:	59 f0       	breq	.+22     	; 0x119a <vfprintf+0x354>
    1184:	21 fd       	sbrc	r18, 1
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x346>
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	01 c0       	rjmp	.+2      	; 0x118e <vfprintf+0x348>
    118c:	8b e2       	ldi	r24, 0x2B	; 43
    118e:	27 fd       	sbrc	r18, 7
    1190:	8d e2       	ldi	r24, 0x2D	; 45
    1192:	b7 01       	movw	r22, r14
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
    119a:	a5 14       	cp	r10, r5
    119c:	38 f4       	brcc	.+14     	; 0x11ac <vfprintf+0x366>
    119e:	b7 01       	movw	r22, r14
    11a0:	80 e3       	ldi	r24, 0x30	; 48
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
    11a8:	5a 94       	dec	r5
    11aa:	f7 cf       	rjmp	.-18     	; 0x119a <vfprintf+0x354>
    11ac:	aa 94       	dec	r10
    11ae:	f4 01       	movw	r30, r8
    11b0:	ea 0d       	add	r30, r10
    11b2:	f1 1d       	adc	r31, r1
    11b4:	80 81       	ld	r24, Z
    11b6:	b7 01       	movw	r22, r14
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
    11be:	a1 10       	cpse	r10, r1
    11c0:	f5 cf       	rjmp	.-22     	; 0x11ac <vfprintf+0x366>
    11c2:	33 20       	and	r3, r3
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <vfprintf+0x382>
    11c6:	51 ce       	rjmp	.-862    	; 0xe6a <vfprintf+0x24>
    11c8:	b7 01       	movw	r22, r14
    11ca:	80 e2       	ldi	r24, 0x20	; 32
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputc>
    11d2:	3a 94       	dec	r3
    11d4:	f6 cf       	rjmp	.-20     	; 0x11c2 <vfprintf+0x37c>
    11d6:	f7 01       	movw	r30, r14
    11d8:	86 81       	ldd	r24, Z+6	; 0x06
    11da:	97 81       	ldd	r25, Z+7	; 0x07
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <vfprintf+0x39c>
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	2c 96       	adiw	r28, 0x0c	; 12
    11e4:	e2 e1       	ldi	r30, 0x12	; 18
    11e6:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__epilogue_restores__>

000011ea <putval>:
    11ea:	20 fd       	sbrc	r18, 0
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <putval+0x16>
    11ee:	fc 01       	movw	r30, r24
    11f0:	23 fd       	sbrc	r18, 3
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <putval+0x14>
    11f4:	22 ff       	sbrs	r18, 2
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <putval+0x12>
    11f8:	73 83       	std	Z+3, r23	; 0x03
    11fa:	62 83       	std	Z+2, r22	; 0x02
    11fc:	51 83       	std	Z+1, r21	; 0x01
    11fe:	40 83       	st	Z, r20
    1200:	08 95       	ret

00001202 <mulacc>:
    1202:	44 fd       	sbrc	r20, 4
    1204:	10 c0       	rjmp	.+32     	; 0x1226 <mulacc+0x24>
    1206:	46 fd       	sbrc	r20, 6
    1208:	10 c0       	rjmp	.+32     	; 0x122a <mulacc+0x28>
    120a:	db 01       	movw	r26, r22
    120c:	fc 01       	movw	r30, r24
    120e:	aa 0f       	add	r26, r26
    1210:	bb 1f       	adc	r27, r27
    1212:	ee 1f       	adc	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	10 94       	com	r1
    1218:	d1 f7       	brne	.-12     	; 0x120e <mulacc+0xc>
    121a:	6a 0f       	add	r22, r26
    121c:	7b 1f       	adc	r23, r27
    121e:	8e 1f       	adc	r24, r30
    1220:	9f 1f       	adc	r25, r31
    1222:	31 e0       	ldi	r19, 0x01	; 1
    1224:	03 c0       	rjmp	.+6      	; 0x122c <mulacc+0x2a>
    1226:	33 e0       	ldi	r19, 0x03	; 3
    1228:	01 c0       	rjmp	.+2      	; 0x122c <mulacc+0x2a>
    122a:	34 e0       	ldi	r19, 0x04	; 4
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	31 50       	subi	r19, 0x01	; 1
    1236:	d1 f7       	brne	.-12     	; 0x122c <mulacc+0x2a>
    1238:	62 0f       	add	r22, r18
    123a:	71 1d       	adc	r23, r1
    123c:	81 1d       	adc	r24, r1
    123e:	91 1d       	adc	r25, r1
    1240:	08 95       	ret

00001242 <skip_spaces>:
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	8c 01       	movw	r16, r24
    124c:	c8 01       	movw	r24, r16
    124e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    1252:	ec 01       	movw	r28, r24
    1254:	97 fd       	sbrc	r25, 7
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <skip_spaces+0x26>
    1258:	0e 94 ed 0c 	call	0x19da	; 0x19da <isspace>
    125c:	89 2b       	or	r24, r25
    125e:	b1 f7       	brne	.-20     	; 0x124c <skip_spaces+0xa>
    1260:	b8 01       	movw	r22, r16
    1262:	ce 01       	movw	r24, r28
    1264:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ungetc>
    1268:	ce 01       	movw	r24, r28
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <conv_int>:
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
    128c:	a6 2e       	mov	r10, r22
    128e:	4a 01       	movw	r8, r20
    1290:	02 2f       	mov	r16, r18
    1292:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    1296:	ac 01       	movw	r20, r24
    1298:	55 27       	eor	r21, r21
    129a:	4b 32       	cpi	r20, 0x2B	; 43
    129c:	51 05       	cpc	r21, r1
    129e:	21 f0       	breq	.+8      	; 0x12a8 <conv_int+0x34>
    12a0:	4d 32       	cpi	r20, 0x2D	; 45
    12a2:	51 05       	cpc	r21, r1
    12a4:	51 f4       	brne	.+20     	; 0x12ba <conv_int+0x46>
    12a6:	00 68       	ori	r16, 0x80	; 128
    12a8:	aa 94       	dec	r10
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <conv_int+0x3c>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	67 c0       	rjmp	.+206    	; 0x137e <conv_int+0x10a>
    12b0:	ce 01       	movw	r24, r28
    12b2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    12b6:	97 fd       	sbrc	r25, 7
    12b8:	f9 cf       	rjmp	.-14     	; 0x12ac <conv_int+0x38>
    12ba:	10 2f       	mov	r17, r16
    12bc:	1d 7f       	andi	r17, 0xFD	; 253
    12be:	30 2f       	mov	r19, r16
    12c0:	30 73       	andi	r19, 0x30	; 48
    12c2:	01 f5       	brne	.+64     	; 0x1304 <conv_int+0x90>
    12c4:	80 33       	cpi	r24, 0x30	; 48
    12c6:	f1 f4       	brne	.+60     	; 0x1304 <conv_int+0x90>
    12c8:	ff 24       	eor	r15, r15
    12ca:	fa 94       	dec	r15
    12cc:	fa 0c       	add	r15, r10
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <conv_int+0x5e>
    12d0:	42 c0       	rjmp	.+132    	; 0x1356 <conv_int+0xe2>
    12d2:	ce 01       	movw	r24, r28
    12d4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    12d8:	97 fd       	sbrc	r25, 7
    12da:	3d c0       	rjmp	.+122    	; 0x1356 <conv_int+0xe2>
    12dc:	38 2f       	mov	r19, r24
    12de:	3f 7d       	andi	r19, 0xDF	; 223
    12e0:	38 35       	cpi	r19, 0x58	; 88
    12e2:	51 f4       	brne	.+20     	; 0x12f8 <conv_int+0x84>
    12e4:	12 64       	ori	r17, 0x42	; 66
    12e6:	aa 94       	dec	r10
    12e8:	aa 94       	dec	r10
    12ea:	a9 f1       	breq	.+106    	; 0x1356 <conv_int+0xe2>
    12ec:	ce 01       	movw	r24, r28
    12ee:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    12f2:	97 ff       	sbrs	r25, 7
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <conv_int+0x90>
    12f6:	2f c0       	rjmp	.+94     	; 0x1356 <conv_int+0xe2>
    12f8:	06 ff       	sbrs	r16, 6
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <conv_int+0x8c>
    12fc:	12 60       	ori	r17, 0x02	; 2
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <conv_int+0x8e>
    1300:	12 61       	ori	r17, 0x12	; 18
    1302:	af 2c       	mov	r10, r15
    1304:	c1 2c       	mov	r12, r1
    1306:	d1 2c       	mov	r13, r1
    1308:	76 01       	movw	r14, r12
    130a:	20 ed       	ldi	r18, 0xD0	; 208
    130c:	28 0f       	add	r18, r24
    130e:	28 30       	cpi	r18, 0x08	; 8
    1310:	80 f0       	brcs	.+32     	; 0x1332 <conv_int+0xbe>
    1312:	14 ff       	sbrs	r17, 4
    1314:	04 c0       	rjmp	.+8      	; 0x131e <conv_int+0xaa>
    1316:	be 01       	movw	r22, r28
    1318:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ungetc>
    131c:	19 c0       	rjmp	.+50     	; 0x1350 <conv_int+0xdc>
    131e:	2a 30       	cpi	r18, 0x0A	; 10
    1320:	40 f0       	brcs	.+16     	; 0x1332 <conv_int+0xbe>
    1322:	16 ff       	sbrs	r17, 6
    1324:	f8 cf       	rjmp	.-16     	; 0x1316 <conv_int+0xa2>
    1326:	2f 7d       	andi	r18, 0xDF	; 223
    1328:	3f ee       	ldi	r19, 0xEF	; 239
    132a:	32 0f       	add	r19, r18
    132c:	36 30       	cpi	r19, 0x06	; 6
    132e:	98 f7       	brcc	.-26     	; 0x1316 <conv_int+0xa2>
    1330:	27 50       	subi	r18, 0x07	; 7
    1332:	41 2f       	mov	r20, r17
    1334:	c7 01       	movw	r24, r14
    1336:	b6 01       	movw	r22, r12
    1338:	0e 94 01 09 	call	0x1202	; 0x1202 <mulacc>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
    1340:	12 60       	ori	r17, 0x02	; 2
    1342:	aa 94       	dec	r10
    1344:	59 f0       	breq	.+22     	; 0x135c <conv_int+0xe8>
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    134c:	97 ff       	sbrs	r25, 7
    134e:	dd cf       	rjmp	.-70     	; 0x130a <conv_int+0x96>
    1350:	11 fd       	sbrc	r17, 1
    1352:	04 c0       	rjmp	.+8      	; 0x135c <conv_int+0xe8>
    1354:	ab cf       	rjmp	.-170    	; 0x12ac <conv_int+0x38>
    1356:	c1 2c       	mov	r12, r1
    1358:	d1 2c       	mov	r13, r1
    135a:	76 01       	movw	r14, r12
    135c:	17 ff       	sbrs	r17, 7
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <conv_int+0xfc>
    1360:	f0 94       	com	r15
    1362:	e0 94       	com	r14
    1364:	d0 94       	com	r13
    1366:	c0 94       	com	r12
    1368:	c1 1c       	adc	r12, r1
    136a:	d1 1c       	adc	r13, r1
    136c:	e1 1c       	adc	r14, r1
    136e:	f1 1c       	adc	r15, r1
    1370:	21 2f       	mov	r18, r17
    1372:	b7 01       	movw	r22, r14
    1374:	a6 01       	movw	r20, r12
    1376:	c4 01       	movw	r24, r8
    1378:	0e 94 f5 08 	call	0x11ea	; 0x11ea <putval>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	08 95       	ret

00001396 <conv_brk>:
    1396:	a1 e2       	ldi	r26, 0x21	; 33
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 ed       	ldi	r30, 0xD1	; 209
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__prologue_saves__+0xa>
    13a2:	5c 01       	movw	r10, r24
    13a4:	7a 01       	movw	r14, r20
    13a6:	8e 01       	movw	r16, r28
    13a8:	0f 5f       	subi	r16, 0xFF	; 255
    13aa:	1f 4f       	sbci	r17, 0xFF	; 255
    13ac:	68 01       	movw	r12, r16
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	d8 01       	movw	r26, r16
    13b2:	1d 92       	st	X+, r1
    13b4:	8a 95       	dec	r24
    13b6:	e9 f7       	brne	.-6      	; 0x13b2 <conv_brk+0x1c>
    13b8:	f5 01       	movw	r30, r10
    13ba:	73 80       	ldd	r7, Z+3	; 0x03
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	81 2c       	mov	r8, r1
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	91 2c       	mov	r9, r1
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	73 fc       	sbrc	r7, 3
    13ce:	a5 91       	lpm	r26, Z+
    13d0:	73 fe       	sbrs	r7, 3
    13d2:	a1 91       	ld	r26, Z+
    13d4:	8f 01       	movw	r16, r30
    13d6:	7a 2f       	mov	r23, r26
    13d8:	9f 01       	movw	r18, r30
    13da:	a1 11       	cpse	r26, r1
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <conv_brk+0x4e>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	7d c0       	rjmp	.+250    	; 0x14de <conv_brk+0x148>
    13e4:	ae 35       	cpi	r26, 0x5E	; 94
    13e6:	19 f4       	brne	.+6      	; 0x13ee <conv_brk+0x58>
    13e8:	41 15       	cp	r20, r1
    13ea:	51 05       	cpc	r21, r1
    13ec:	59 f1       	breq	.+86     	; 0x1444 <conv_brk+0xae>
    13ee:	e9 2d       	mov	r30, r9
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	e4 17       	cp	r30, r20
    13f4:	f5 07       	cpc	r31, r21
    13f6:	3c f4       	brge	.+14     	; 0x1406 <conv_brk+0x70>
    13f8:	ad 35       	cpi	r26, 0x5D	; 93
    13fa:	69 f1       	breq	.+90     	; 0x1456 <conv_brk+0xc0>
    13fc:	ad 32       	cpi	r26, 0x2D	; 45
    13fe:	19 f4       	brne	.+6      	; 0x1406 <conv_brk+0x70>
    1400:	bb 23       	and	r27, r27
    1402:	19 f1       	breq	.+70     	; 0x144a <conv_brk+0xb4>
    1404:	03 c0       	rjmp	.+6      	; 0x140c <conv_brk+0x76>
    1406:	b1 11       	cpse	r27, r1
    1408:	01 c0       	rjmp	.+2      	; 0x140c <conv_brk+0x76>
    140a:	8a 2e       	mov	r8, r26
    140c:	e7 2f       	mov	r30, r23
    140e:	e6 95       	lsr	r30
    1410:	e6 95       	lsr	r30
    1412:	e6 95       	lsr	r30
    1414:	86 01       	movw	r16, r12
    1416:	0e 0f       	add	r16, r30
    1418:	11 1d       	adc	r17, r1
    141a:	f8 01       	movw	r30, r16
    141c:	a7 2f       	mov	r26, r23
    141e:	a7 70       	andi	r26, 0x07	; 7
    1420:	8c 01       	movw	r16, r24
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <conv_brk+0x92>
    1424:	00 0f       	add	r16, r16
    1426:	11 1f       	adc	r17, r17
    1428:	aa 95       	dec	r26
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <conv_brk+0x8e>
    142c:	d8 01       	movw	r26, r16
    142e:	b0 81       	ld	r27, Z
    1430:	ba 2b       	or	r27, r26
    1432:	b0 83       	st	Z, r27
    1434:	78 15       	cp	r23, r8
    1436:	59 f0       	breq	.+22     	; 0x144e <conv_brk+0xb8>
    1438:	78 15       	cp	r23, r8
    143a:	10 f4       	brcc	.+4      	; 0x1440 <conv_brk+0xaa>
    143c:	7f 5f       	subi	r23, 0xFF	; 255
    143e:	e6 cf       	rjmp	.-52     	; 0x140c <conv_brk+0x76>
    1440:	71 50       	subi	r23, 0x01	; 1
    1442:	e4 cf       	rjmp	.-56     	; 0x140c <conv_brk+0x76>
    1444:	99 24       	eor	r9, r9
    1446:	93 94       	inc	r9
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <conv_brk+0xba>
    144a:	b1 e0       	ldi	r27, 0x01	; 1
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <conv_brk+0xba>
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	4f 5f       	subi	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	ba cf       	rjmp	.-140    	; 0x13ca <conv_brk+0x34>
    1456:	bb 23       	and	r27, r27
    1458:	19 f0       	breq	.+6      	; 0x1460 <conv_brk+0xca>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	80 62       	ori	r24, 0x20	; 32
    145e:	8e 83       	std	Y+6, r24	; 0x06
    1460:	91 10       	cpse	r9, r1
    1462:	03 c0       	rjmp	.+6      	; 0x146a <conv_brk+0xd4>
    1464:	99 24       	eor	r9, r9
    1466:	93 94       	inc	r9
    1468:	15 c0       	rjmp	.+42     	; 0x1494 <conv_brk+0xfe>
    146a:	f6 01       	movw	r30, r12
    146c:	ce 01       	movw	r24, r28
    146e:	81 96       	adiw	r24, 0x21	; 33
    1470:	20 81       	ld	r18, Z
    1472:	20 95       	com	r18
    1474:	21 93       	st	Z+, r18
    1476:	e8 17       	cp	r30, r24
    1478:	f9 07       	cpc	r31, r25
    147a:	d1 f7       	brne	.-12     	; 0x1470 <conv_brk+0xda>
    147c:	f3 cf       	rjmp	.-26     	; 0x1464 <conv_brk+0xce>
    147e:	e1 14       	cp	r14, r1
    1480:	f1 04       	cpc	r15, r1
    1482:	29 f0       	breq	.+10     	; 0x148e <conv_brk+0xf8>
    1484:	d7 01       	movw	r26, r14
    1486:	8c 93       	st	X, r24
    1488:	f7 01       	movw	r30, r14
    148a:	31 96       	adiw	r30, 0x01	; 1
    148c:	7f 01       	movw	r14, r30
    148e:	61 50       	subi	r22, 0x01	; 1
    1490:	01 f1       	breq	.+64     	; 0x14d2 <conv_brk+0x13c>
    1492:	91 2c       	mov	r9, r1
    1494:	c5 01       	movw	r24, r10
    1496:	69 a3       	std	Y+33, r22	; 0x21
    1498:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    149c:	69 a1       	ldd	r22, Y+33	; 0x21
    149e:	97 fd       	sbrc	r25, 7
    14a0:	16 c0       	rjmp	.+44     	; 0x14ce <conv_brk+0x138>
    14a2:	28 2f       	mov	r18, r24
    14a4:	26 95       	lsr	r18
    14a6:	26 95       	lsr	r18
    14a8:	26 95       	lsr	r18
    14aa:	f6 01       	movw	r30, r12
    14ac:	e2 0f       	add	r30, r18
    14ae:	f1 1d       	adc	r31, r1
    14b0:	20 81       	ld	r18, Z
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	ac 01       	movw	r20, r24
    14b6:	47 70       	andi	r20, 0x07	; 7
    14b8:	55 27       	eor	r21, r21
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <conv_brk+0x12a>
    14bc:	35 95       	asr	r19
    14be:	27 95       	ror	r18
    14c0:	4a 95       	dec	r20
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <conv_brk+0x126>
    14c4:	20 fd       	sbrc	r18, 0
    14c6:	db cf       	rjmp	.-74     	; 0x147e <conv_brk+0xe8>
    14c8:	b5 01       	movw	r22, r10
    14ca:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ungetc>
    14ce:	91 10       	cpse	r9, r1
    14d0:	86 cf       	rjmp	.-244    	; 0x13de <conv_brk+0x48>
    14d2:	e1 14       	cp	r14, r1
    14d4:	f1 04       	cpc	r15, r1
    14d6:	11 f0       	breq	.+4      	; 0x14dc <conv_brk+0x146>
    14d8:	d7 01       	movw	r26, r14
    14da:	1c 92       	st	X, r1
    14dc:	c8 01       	movw	r24, r16
    14de:	a1 96       	adiw	r28, 0x21	; 33
    14e0:	ed e0       	ldi	r30, 0x0D	; 13
    14e2:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__epilogue_restores__+0xa>

000014e6 <vfscanf>:
    14e6:	4f 92       	push	r4
    14e8:	5f 92       	push	r5
    14ea:	7f 92       	push	r7
    14ec:	8f 92       	push	r8
    14ee:	9f 92       	push	r9
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	8c 01       	movw	r16, r24
    150c:	2b 01       	movw	r4, r22
    150e:	7a 01       	movw	r14, r20
    1510:	fc 01       	movw	r30, r24
    1512:	17 82       	std	Z+7, r1	; 0x07
    1514:	16 82       	std	Z+6, r1	; 0x06
    1516:	a1 2c       	mov	r10, r1
    1518:	f8 01       	movw	r30, r16
    151a:	d3 80       	ldd	r13, Z+3	; 0x03
    151c:	f2 01       	movw	r30, r4
    151e:	d3 fc       	sbrc	r13, 3
    1520:	85 91       	lpm	r24, Z+
    1522:	d3 fe       	sbrs	r13, 3
    1524:	81 91       	ld	r24, Z+
    1526:	38 2f       	mov	r19, r24
    1528:	2f 01       	movw	r4, r30
    152a:	88 23       	and	r24, r24
    152c:	09 f4       	brne	.+2      	; 0x1530 <vfscanf+0x4a>
    152e:	fc c0       	rjmp	.+504    	; 0x1728 <vfscanf+0x242>
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	39 83       	std	Y+1, r19	; 0x01
    1534:	0e 94 ed 0c 	call	0x19da	; 0x19da <isspace>
    1538:	39 81       	ldd	r19, Y+1	; 0x01
    153a:	89 2b       	or	r24, r25
    153c:	21 f0       	breq	.+8      	; 0x1546 <vfscanf+0x60>
    153e:	c8 01       	movw	r24, r16
    1540:	0e 94 21 09 	call	0x1242	; 0x1242 <skip_spaces>
    1544:	e9 cf       	rjmp	.-46     	; 0x1518 <vfscanf+0x32>
    1546:	35 32       	cpi	r19, 0x25	; 37
    1548:	41 f4       	brne	.+16     	; 0x155a <vfscanf+0x74>
    154a:	f2 01       	movw	r30, r4
    154c:	d3 fc       	sbrc	r13, 3
    154e:	35 91       	lpm	r19, Z+
    1550:	d3 fe       	sbrs	r13, 3
    1552:	31 91       	ld	r19, Z+
    1554:	2f 01       	movw	r4, r30
    1556:	35 32       	cpi	r19, 0x25	; 37
    1558:	69 f4       	brne	.+26     	; 0x1574 <vfscanf+0x8e>
    155a:	c8 01       	movw	r24, r16
    155c:	39 83       	std	Y+1, r19	; 0x01
    155e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    1562:	39 81       	ldd	r19, Y+1	; 0x01
    1564:	97 fd       	sbrc	r25, 7
    1566:	de c0       	rjmp	.+444    	; 0x1724 <vfscanf+0x23e>
    1568:	38 17       	cp	r19, r24
    156a:	b1 f2       	breq	.-84     	; 0x1518 <vfscanf+0x32>
    156c:	b8 01       	movw	r22, r16
    156e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ungetc>
    1572:	da c0       	rjmp	.+436    	; 0x1728 <vfscanf+0x242>
    1574:	3a 32       	cpi	r19, 0x2A	; 42
    1576:	41 f4       	brne	.+16     	; 0x1588 <vfscanf+0xa2>
    1578:	d3 fc       	sbrc	r13, 3
    157a:	35 91       	lpm	r19, Z+
    157c:	d3 fe       	sbrs	r13, 3
    157e:	31 91       	ld	r19, Z+
    1580:	2f 01       	movw	r4, r30
    1582:	bb 24       	eor	r11, r11
    1584:	b3 94       	inc	r11
    1586:	01 c0       	rjmp	.+2      	; 0x158a <vfscanf+0xa4>
    1588:	b1 2c       	mov	r11, r1
    158a:	71 2c       	mov	r7, r1
    158c:	20 ed       	ldi	r18, 0xD0	; 208
    158e:	23 0f       	add	r18, r19
    1590:	2a 30       	cpi	r18, 0x0A	; 10
    1592:	90 f4       	brcc	.+36     	; 0x15b8 <vfscanf+0xd2>
    1594:	fb 2d       	mov	r31, r11
    1596:	f2 60       	ori	r31, 0x02	; 2
    1598:	bf 2e       	mov	r11, r31
    159a:	67 2d       	mov	r22, r7
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	40 e2       	ldi	r20, 0x20	; 32
    15a4:	0e 94 01 09 	call	0x1202	; 0x1202 <mulacc>
    15a8:	76 2e       	mov	r7, r22
    15aa:	f2 01       	movw	r30, r4
    15ac:	d3 fc       	sbrc	r13, 3
    15ae:	35 91       	lpm	r19, Z+
    15b0:	d3 fe       	sbrs	r13, 3
    15b2:	31 91       	ld	r19, Z+
    15b4:	2f 01       	movw	r4, r30
    15b6:	ea cf       	rjmp	.-44     	; 0x158c <vfscanf+0xa6>
    15b8:	b1 fe       	sbrs	r11, 1
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <vfscanf+0xdc>
    15bc:	71 10       	cpse	r7, r1
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <vfscanf+0xe0>
    15c0:	b3 c0       	rjmp	.+358    	; 0x1728 <vfscanf+0x242>
    15c2:	77 24       	eor	r7, r7
    15c4:	7a 94       	dec	r7
    15c6:	38 36       	cpi	r19, 0x68	; 104
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <vfscanf+0xea>
    15ca:	3c 36       	cpi	r19, 0x6C	; 108
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <vfscanf+0x100>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <vfscanf+0x112>
    15d0:	f2 01       	movw	r30, r4
    15d2:	d3 fc       	sbrc	r13, 3
    15d4:	35 91       	lpm	r19, Z+
    15d6:	d3 fe       	sbrs	r13, 3
    15d8:	31 91       	ld	r19, Z+
    15da:	2f 01       	movw	r4, r30
    15dc:	38 36       	cpi	r19, 0x68	; 104
    15de:	61 f4       	brne	.+24     	; 0x15f8 <vfscanf+0x112>
    15e0:	fb 2d       	mov	r31, r11
    15e2:	f8 60       	ori	r31, 0x08	; 8
    15e4:	bf 2e       	mov	r11, r31
    15e6:	8b 2d       	mov	r24, r11
    15e8:	84 60       	ori	r24, 0x04	; 4
    15ea:	b8 2e       	mov	r11, r24
    15ec:	f2 01       	movw	r30, r4
    15ee:	d3 fc       	sbrc	r13, 3
    15f0:	35 91       	lpm	r19, Z+
    15f2:	d3 fe       	sbrs	r13, 3
    15f4:	31 91       	ld	r19, Z+
    15f6:	2f 01       	movw	r4, r30
    15f8:	33 23       	and	r19, r19
    15fa:	09 f4       	brne	.+2      	; 0x15fe <vfscanf+0x118>
    15fc:	95 c0       	rjmp	.+298    	; 0x1728 <vfscanf+0x242>
    15fe:	63 2f       	mov	r22, r19
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	8a e7       	ldi	r24, 0x7A	; 122
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	39 83       	std	Y+1, r19	; 0x01
    1608:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <strchr_P>
    160c:	39 81       	ldd	r19, Y+1	; 0x01
    160e:	89 2b       	or	r24, r25
    1610:	09 f4       	brne	.+2      	; 0x1614 <vfscanf+0x12e>
    1612:	8a c0       	rjmp	.+276    	; 0x1728 <vfscanf+0x242>
    1614:	b0 fc       	sbrc	r11, 0
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <vfscanf+0x140>
    1618:	f7 01       	movw	r30, r14
    161a:	c0 80       	ld	r12, Z
    161c:	d1 80       	ldd	r13, Z+1	; 0x01
    161e:	c7 01       	movw	r24, r14
    1620:	02 96       	adiw	r24, 0x02	; 2
    1622:	7c 01       	movw	r14, r24
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfscanf+0x144>
    1626:	c1 2c       	mov	r12, r1
    1628:	d1 2c       	mov	r13, r1
    162a:	3e 36       	cpi	r19, 0x6E	; 110
    162c:	51 f4       	brne	.+20     	; 0x1642 <vfscanf+0x15c>
    162e:	f8 01       	movw	r30, r16
    1630:	46 81       	ldd	r20, Z+6	; 0x06
    1632:	57 81       	ldd	r21, Z+7	; 0x07
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	2b 2d       	mov	r18, r11
    163a:	c6 01       	movw	r24, r12
    163c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <putval>
    1640:	6b cf       	rjmp	.-298    	; 0x1518 <vfscanf+0x32>
    1642:	33 36       	cpi	r19, 0x63	; 99
    1644:	a1 f4       	brne	.+40     	; 0x166e <vfscanf+0x188>
    1646:	b1 fc       	sbrc	r11, 1
    1648:	02 c0       	rjmp	.+4      	; 0x164e <vfscanf+0x168>
    164a:	77 24       	eor	r7, r7
    164c:	73 94       	inc	r7
    164e:	c8 01       	movw	r24, r16
    1650:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    1654:	97 fd       	sbrc	r25, 7
    1656:	66 c0       	rjmp	.+204    	; 0x1724 <vfscanf+0x23e>
    1658:	c1 14       	cp	r12, r1
    165a:	d1 04       	cpc	r13, r1
    165c:	29 f0       	breq	.+10     	; 0x1668 <vfscanf+0x182>
    165e:	f6 01       	movw	r30, r12
    1660:	80 83       	st	Z, r24
    1662:	c6 01       	movw	r24, r12
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	6c 01       	movw	r12, r24
    1668:	7a 94       	dec	r7
    166a:	89 f7       	brne	.-30     	; 0x164e <vfscanf+0x168>
    166c:	57 c0       	rjmp	.+174    	; 0x171c <vfscanf+0x236>
    166e:	3b 35       	cpi	r19, 0x5B	; 91
    1670:	59 f4       	brne	.+22     	; 0x1688 <vfscanf+0x1a2>
    1672:	92 01       	movw	r18, r4
    1674:	a6 01       	movw	r20, r12
    1676:	67 2d       	mov	r22, r7
    1678:	c8 01       	movw	r24, r16
    167a:	0e 94 cb 09 	call	0x1396	; 0x1396 <conv_brk>
    167e:	2c 01       	movw	r4, r24
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	09 f0       	breq	.+2      	; 0x1686 <vfscanf+0x1a0>
    1684:	4b c0       	rjmp	.+150    	; 0x171c <vfscanf+0x236>
    1686:	45 c0       	rjmp	.+138    	; 0x1712 <vfscanf+0x22c>
    1688:	c8 01       	movw	r24, r16
    168a:	39 83       	std	Y+1, r19	; 0x01
    168c:	0e 94 21 09 	call	0x1242	; 0x1242 <skip_spaces>
    1690:	39 81       	ldd	r19, Y+1	; 0x01
    1692:	97 fd       	sbrc	r25, 7
    1694:	47 c0       	rjmp	.+142    	; 0x1724 <vfscanf+0x23e>
    1696:	3f 36       	cpi	r19, 0x6F	; 111
    1698:	69 f1       	breq	.+90     	; 0x16f4 <vfscanf+0x20e>
    169a:	28 f4       	brcc	.+10     	; 0x16a6 <vfscanf+0x1c0>
    169c:	34 36       	cpi	r19, 0x64	; 100
    169e:	31 f1       	breq	.+76     	; 0x16ec <vfscanf+0x206>
    16a0:	39 36       	cpi	r19, 0x69	; 105
    16a2:	79 f1       	breq	.+94     	; 0x1702 <vfscanf+0x21c>
    16a4:	2b c0       	rjmp	.+86     	; 0x16fc <vfscanf+0x216>
    16a6:	33 37       	cpi	r19, 0x73	; 115
    16a8:	69 f0       	breq	.+26     	; 0x16c4 <vfscanf+0x1de>
    16aa:	35 37       	cpi	r19, 0x75	; 117
    16ac:	f9 f0       	breq	.+62     	; 0x16ec <vfscanf+0x206>
    16ae:	26 c0       	rjmp	.+76     	; 0x16fc <vfscanf+0x216>
    16b0:	c1 14       	cp	r12, r1
    16b2:	d1 04       	cpc	r13, r1
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <vfscanf+0x1da>
    16b6:	f6 01       	movw	r30, r12
    16b8:	80 82       	st	Z, r8
    16ba:	c6 01       	movw	r24, r12
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	6c 01       	movw	r12, r24
    16c0:	7a 94       	dec	r7
    16c2:	71 f0       	breq	.+28     	; 0x16e0 <vfscanf+0x1fa>
    16c4:	c8 01       	movw	r24, r16
    16c6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fgetc>
    16ca:	4c 01       	movw	r8, r24
    16cc:	97 fd       	sbrc	r25, 7
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <vfscanf+0x1fa>
    16d0:	0e 94 ed 0c 	call	0x19da	; 0x19da <isspace>
    16d4:	89 2b       	or	r24, r25
    16d6:	61 f3       	breq	.-40     	; 0x16b0 <vfscanf+0x1ca>
    16d8:	b8 01       	movw	r22, r16
    16da:	c4 01       	movw	r24, r8
    16dc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ungetc>
    16e0:	c1 14       	cp	r12, r1
    16e2:	d1 04       	cpc	r13, r1
    16e4:	d9 f0       	breq	.+54     	; 0x171c <vfscanf+0x236>
    16e6:	f6 01       	movw	r30, r12
    16e8:	10 82       	st	Z, r1
    16ea:	18 c0       	rjmp	.+48     	; 0x171c <vfscanf+0x236>
    16ec:	fb 2d       	mov	r31, r11
    16ee:	f0 62       	ori	r31, 0x20	; 32
    16f0:	bf 2e       	mov	r11, r31
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <vfscanf+0x21c>
    16f4:	8b 2d       	mov	r24, r11
    16f6:	80 61       	ori	r24, 0x10	; 16
    16f8:	b8 2e       	mov	r11, r24
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <vfscanf+0x21c>
    16fc:	9b 2d       	mov	r25, r11
    16fe:	90 64       	ori	r25, 0x40	; 64
    1700:	b9 2e       	mov	r11, r25
    1702:	2b 2d       	mov	r18, r11
    1704:	a6 01       	movw	r20, r12
    1706:	67 2d       	mov	r22, r7
    1708:	c8 01       	movw	r24, r16
    170a:	0e 94 3a 09 	call	0x1274	; 0x1274 <conv_int>
    170e:	81 11       	cpse	r24, r1
    1710:	05 c0       	rjmp	.+10     	; 0x171c <vfscanf+0x236>
    1712:	f8 01       	movw	r30, r16
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	80 73       	andi	r24, 0x30	; 48
    1718:	29 f4       	brne	.+10     	; 0x1724 <vfscanf+0x23e>
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <vfscanf+0x242>
    171c:	b0 fc       	sbrc	r11, 0
    171e:	fc ce       	rjmp	.-520    	; 0x1518 <vfscanf+0x32>
    1720:	a3 94       	inc	r10
    1722:	fa ce       	rjmp	.-524    	; 0x1518 <vfscanf+0x32>
    1724:	aa 20       	and	r10, r10
    1726:	19 f0       	breq	.+6      	; 0x172e <vfscanf+0x248>
    1728:	8a 2d       	mov	r24, r10
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfscanf+0x24c>
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	0f 90       	pop	r0
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	9f 90       	pop	r9
    174a:	8f 90       	pop	r8
    174c:	7f 90       	pop	r7
    174e:	5f 90       	pop	r5
    1750:	4f 90       	pop	r4
    1752:	08 95       	ret

00001754 <calloc>:
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	86 9f       	mul	r24, r22
    175e:	80 01       	movw	r16, r0
    1760:	87 9f       	mul	r24, r23
    1762:	10 0d       	add	r17, r0
    1764:	96 9f       	mul	r25, r22
    1766:	10 0d       	add	r17, r0
    1768:	11 24       	eor	r1, r1
    176a:	c8 01       	movw	r24, r16
    176c:	0e 94 c6 0b 	call	0x178c	; 0x178c <malloc>
    1770:	ec 01       	movw	r28, r24
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	29 f0       	breq	.+10     	; 0x1780 <calloc+0x2c>
    1776:	a8 01       	movw	r20, r16
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <memset>
    1780:	ce 01       	movw	r24, r28
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <malloc>:
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	91 05       	cpc	r25, r1
    1794:	10 f4       	brcc	.+4      	; 0x179a <malloc+0xe>
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	e0 91 8e 02 	lds	r30, 0x028E
    179e:	f0 91 8f 02 	lds	r31, 0x028F
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	39 f1       	breq	.+78     	; 0x17fc <malloc+0x70>
    17ae:	40 81       	ld	r20, Z
    17b0:	51 81       	ldd	r21, Z+1	; 0x01
    17b2:	48 17       	cp	r20, r24
    17b4:	59 07       	cpc	r21, r25
    17b6:	b8 f0       	brcs	.+46     	; 0x17e6 <malloc+0x5a>
    17b8:	48 17       	cp	r20, r24
    17ba:	59 07       	cpc	r21, r25
    17bc:	71 f4       	brne	.+28     	; 0x17da <malloc+0x4e>
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	10 97       	sbiw	r26, 0x00	; 0
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <malloc+0x44>
    17c6:	13 96       	adiw	r26, 0x03	; 3
    17c8:	9c 93       	st	X, r25
    17ca:	8e 93       	st	-X, r24
    17cc:	12 97       	sbiw	r26, 0x02	; 2
    17ce:	2c c0       	rjmp	.+88     	; 0x1828 <malloc+0x9c>
    17d0:	90 93 8f 02 	sts	0x028F, r25
    17d4:	80 93 8e 02 	sts	0x028E, r24
    17d8:	27 c0       	rjmp	.+78     	; 0x1828 <malloc+0x9c>
    17da:	21 15       	cp	r18, r1
    17dc:	31 05       	cpc	r19, r1
    17de:	31 f0       	breq	.+12     	; 0x17ec <malloc+0x60>
    17e0:	42 17       	cp	r20, r18
    17e2:	53 07       	cpc	r21, r19
    17e4:	18 f0       	brcs	.+6      	; 0x17ec <malloc+0x60>
    17e6:	a9 01       	movw	r20, r18
    17e8:	db 01       	movw	r26, r22
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <malloc+0x62>
    17ec:	ef 01       	movw	r28, r30
    17ee:	9a 01       	movw	r18, r20
    17f0:	bd 01       	movw	r22, r26
    17f2:	df 01       	movw	r26, r30
    17f4:	02 80       	ldd	r0, Z+2	; 0x02
    17f6:	f3 81       	ldd	r31, Z+3	; 0x03
    17f8:	e0 2d       	mov	r30, r0
    17fa:	d7 cf       	rjmp	.-82     	; 0x17aa <malloc+0x1e>
    17fc:	21 15       	cp	r18, r1
    17fe:	31 05       	cpc	r19, r1
    1800:	f9 f0       	breq	.+62     	; 0x1840 <malloc+0xb4>
    1802:	28 1b       	sub	r18, r24
    1804:	39 0b       	sbc	r19, r25
    1806:	24 30       	cpi	r18, 0x04	; 4
    1808:	31 05       	cpc	r19, r1
    180a:	80 f4       	brcc	.+32     	; 0x182c <malloc+0xa0>
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	61 15       	cp	r22, r1
    1812:	71 05       	cpc	r23, r1
    1814:	21 f0       	breq	.+8      	; 0x181e <malloc+0x92>
    1816:	fb 01       	movw	r30, r22
    1818:	93 83       	std	Z+3, r25	; 0x03
    181a:	82 83       	std	Z+2, r24	; 0x02
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <malloc+0x9a>
    181e:	90 93 8f 02 	sts	0x028F, r25
    1822:	80 93 8e 02 	sts	0x028E, r24
    1826:	fe 01       	movw	r30, r28
    1828:	32 96       	adiw	r30, 0x02	; 2
    182a:	44 c0       	rjmp	.+136    	; 0x18b4 <malloc+0x128>
    182c:	fe 01       	movw	r30, r28
    182e:	e2 0f       	add	r30, r18
    1830:	f3 1f       	adc	r31, r19
    1832:	81 93       	st	Z+, r24
    1834:	91 93       	st	Z+, r25
    1836:	22 50       	subi	r18, 0x02	; 2
    1838:	31 09       	sbc	r19, r1
    183a:	39 83       	std	Y+1, r19	; 0x01
    183c:	28 83       	st	Y, r18
    183e:	3a c0       	rjmp	.+116    	; 0x18b4 <malloc+0x128>
    1840:	20 91 8c 02 	lds	r18, 0x028C
    1844:	30 91 8d 02 	lds	r19, 0x028D
    1848:	23 2b       	or	r18, r19
    184a:	41 f4       	brne	.+16     	; 0x185c <malloc+0xd0>
    184c:	20 91 02 01 	lds	r18, 0x0102
    1850:	30 91 03 01 	lds	r19, 0x0103
    1854:	30 93 8d 02 	sts	0x028D, r19
    1858:	20 93 8c 02 	sts	0x028C, r18
    185c:	20 91 00 01 	lds	r18, 0x0100
    1860:	30 91 01 01 	lds	r19, 0x0101
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	41 f4       	brne	.+16     	; 0x187a <malloc+0xee>
    186a:	2d b7       	in	r18, 0x3d	; 61
    186c:	3e b7       	in	r19, 0x3e	; 62
    186e:	40 91 04 01 	lds	r20, 0x0104
    1872:	50 91 05 01 	lds	r21, 0x0105
    1876:	24 1b       	sub	r18, r20
    1878:	35 0b       	sbc	r19, r21
    187a:	e0 91 8c 02 	lds	r30, 0x028C
    187e:	f0 91 8d 02 	lds	r31, 0x028D
    1882:	e2 17       	cp	r30, r18
    1884:	f3 07       	cpc	r31, r19
    1886:	a0 f4       	brcc	.+40     	; 0x18b0 <malloc+0x124>
    1888:	2e 1b       	sub	r18, r30
    188a:	3f 0b       	sbc	r19, r31
    188c:	28 17       	cp	r18, r24
    188e:	39 07       	cpc	r19, r25
    1890:	78 f0       	brcs	.+30     	; 0x18b0 <malloc+0x124>
    1892:	ac 01       	movw	r20, r24
    1894:	4e 5f       	subi	r20, 0xFE	; 254
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
    1898:	24 17       	cp	r18, r20
    189a:	35 07       	cpc	r19, r21
    189c:	48 f0       	brcs	.+18     	; 0x18b0 <malloc+0x124>
    189e:	4e 0f       	add	r20, r30
    18a0:	5f 1f       	adc	r21, r31
    18a2:	50 93 8d 02 	sts	0x028D, r21
    18a6:	40 93 8c 02 	sts	0x028C, r20
    18aa:	81 93       	st	Z+, r24
    18ac:	91 93       	st	Z+, r25
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <malloc+0x128>
    18b0:	e0 e0       	ldi	r30, 0x00	; 0
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	cf 01       	movw	r24, r30
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <free>:
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <free+0xa>
    18c4:	87 c0       	rjmp	.+270    	; 0x19d4 <free+0x118>
    18c6:	fc 01       	movw	r30, r24
    18c8:	32 97       	sbiw	r30, 0x02	; 2
    18ca:	13 82       	std	Z+3, r1	; 0x03
    18cc:	12 82       	std	Z+2, r1	; 0x02
    18ce:	c0 91 8e 02 	lds	r28, 0x028E
    18d2:	d0 91 8f 02 	lds	r29, 0x028F
    18d6:	20 97       	sbiw	r28, 0x00	; 0
    18d8:	81 f4       	brne	.+32     	; 0x18fa <free+0x3e>
    18da:	20 81       	ld	r18, Z
    18dc:	31 81       	ldd	r19, Z+1	; 0x01
    18de:	28 0f       	add	r18, r24
    18e0:	39 1f       	adc	r19, r25
    18e2:	80 91 8c 02 	lds	r24, 0x028C
    18e6:	90 91 8d 02 	lds	r25, 0x028D
    18ea:	82 17       	cp	r24, r18
    18ec:	93 07       	cpc	r25, r19
    18ee:	79 f5       	brne	.+94     	; 0x194e <free+0x92>
    18f0:	f0 93 8d 02 	sts	0x028D, r31
    18f4:	e0 93 8c 02 	sts	0x028C, r30
    18f8:	6d c0       	rjmp	.+218    	; 0x19d4 <free+0x118>
    18fa:	de 01       	movw	r26, r28
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	ae 17       	cp	r26, r30
    1902:	bf 07       	cpc	r27, r31
    1904:	50 f4       	brcc	.+20     	; 0x191a <free+0x5e>
    1906:	12 96       	adiw	r26, 0x02	; 2
    1908:	4d 91       	ld	r20, X+
    190a:	5c 91       	ld	r21, X
    190c:	13 97       	sbiw	r26, 0x03	; 3
    190e:	9d 01       	movw	r18, r26
    1910:	41 15       	cp	r20, r1
    1912:	51 05       	cpc	r21, r1
    1914:	09 f1       	breq	.+66     	; 0x1958 <free+0x9c>
    1916:	da 01       	movw	r26, r20
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <free+0x44>
    191a:	b3 83       	std	Z+3, r27	; 0x03
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	40 81       	ld	r20, Z
    1920:	51 81       	ldd	r21, Z+1	; 0x01
    1922:	84 0f       	add	r24, r20
    1924:	95 1f       	adc	r25, r21
    1926:	8a 17       	cp	r24, r26
    1928:	9b 07       	cpc	r25, r27
    192a:	71 f4       	brne	.+28     	; 0x1948 <free+0x8c>
    192c:	8d 91       	ld	r24, X+
    192e:	9c 91       	ld	r25, X
    1930:	11 97       	sbiw	r26, 0x01	; 1
    1932:	84 0f       	add	r24, r20
    1934:	95 1f       	adc	r25, r21
    1936:	02 96       	adiw	r24, 0x02	; 2
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	12 96       	adiw	r26, 0x02	; 2
    193e:	8d 91       	ld	r24, X+
    1940:	9c 91       	ld	r25, X
    1942:	13 97       	sbiw	r26, 0x03	; 3
    1944:	93 83       	std	Z+3, r25	; 0x03
    1946:	82 83       	std	Z+2, r24	; 0x02
    1948:	21 15       	cp	r18, r1
    194a:	31 05       	cpc	r19, r1
    194c:	29 f4       	brne	.+10     	; 0x1958 <free+0x9c>
    194e:	f0 93 8f 02 	sts	0x028F, r31
    1952:	e0 93 8e 02 	sts	0x028E, r30
    1956:	3e c0       	rjmp	.+124    	; 0x19d4 <free+0x118>
    1958:	d9 01       	movw	r26, r18
    195a:	13 96       	adiw	r26, 0x03	; 3
    195c:	fc 93       	st	X, r31
    195e:	ee 93       	st	-X, r30
    1960:	12 97       	sbiw	r26, 0x02	; 2
    1962:	4d 91       	ld	r20, X+
    1964:	5d 91       	ld	r21, X+
    1966:	a4 0f       	add	r26, r20
    1968:	b5 1f       	adc	r27, r21
    196a:	ea 17       	cp	r30, r26
    196c:	fb 07       	cpc	r31, r27
    196e:	79 f4       	brne	.+30     	; 0x198e <free+0xd2>
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	84 0f       	add	r24, r20
    1976:	95 1f       	adc	r25, r21
    1978:	02 96       	adiw	r24, 0x02	; 2
    197a:	d9 01       	movw	r26, r18
    197c:	11 96       	adiw	r26, 0x01	; 1
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	13 96       	adiw	r26, 0x03	; 3
    1988:	9c 93       	st	X, r25
    198a:	8e 93       	st	-X, r24
    198c:	12 97       	sbiw	r26, 0x02	; 2
    198e:	e0 e0       	ldi	r30, 0x00	; 0
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	9b 81       	ldd	r25, Y+3	; 0x03
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	19 f0       	breq	.+6      	; 0x19a0 <free+0xe4>
    199a:	fe 01       	movw	r30, r28
    199c:	ec 01       	movw	r28, r24
    199e:	f9 cf       	rjmp	.-14     	; 0x1992 <free+0xd6>
    19a0:	ce 01       	movw	r24, r28
    19a2:	02 96       	adiw	r24, 0x02	; 2
    19a4:	28 81       	ld	r18, Y
    19a6:	39 81       	ldd	r19, Y+1	; 0x01
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	20 91 8c 02 	lds	r18, 0x028C
    19b0:	30 91 8d 02 	lds	r19, 0x028D
    19b4:	28 17       	cp	r18, r24
    19b6:	39 07       	cpc	r19, r25
    19b8:	69 f4       	brne	.+26     	; 0x19d4 <free+0x118>
    19ba:	30 97       	sbiw	r30, 0x00	; 0
    19bc:	29 f4       	brne	.+10     	; 0x19c8 <free+0x10c>
    19be:	10 92 8f 02 	sts	0x028F, r1
    19c2:	10 92 8e 02 	sts	0x028E, r1
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <free+0x110>
    19c8:	13 82       	std	Z+3, r1	; 0x03
    19ca:	12 82       	std	Z+2, r1	; 0x02
    19cc:	d0 93 8d 02 	sts	0x028D, r29
    19d0:	c0 93 8c 02 	sts	0x028C, r28
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <isspace>:
    19da:	91 11       	cpse	r25, r1
    19dc:	15 c1       	rjmp	.+554    	; 0x1c08 <__ctype_isfalse>
    19de:	80 32       	cpi	r24, 0x20	; 32
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <isspace+0xe>
    19e2:	89 50       	subi	r24, 0x09	; 9
    19e4:	85 50       	subi	r24, 0x05	; 5
    19e6:	d0 f7       	brcc	.-12     	; 0x19dc <isspace+0x2>
    19e8:	08 95       	ret

000019ea <strchr_P>:
    19ea:	fc 01       	movw	r30, r24
    19ec:	05 90       	lpm	r0, Z+
    19ee:	06 16       	cp	r0, r22
    19f0:	21 f0       	breq	.+8      	; 0x19fa <strchr_P+0x10>
    19f2:	00 20       	and	r0, r0
    19f4:	d9 f7       	brne	.-10     	; 0x19ec <strchr_P+0x2>
    19f6:	c0 01       	movw	r24, r0
    19f8:	08 95       	ret
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	cf 01       	movw	r24, r30
    19fe:	08 95       	ret

00001a00 <strnlen_P>:
    1a00:	fc 01       	movw	r30, r24
    1a02:	05 90       	lpm	r0, Z+
    1a04:	61 50       	subi	r22, 0x01	; 1
    1a06:	70 40       	sbci	r23, 0x00	; 0
    1a08:	01 10       	cpse	r0, r1
    1a0a:	d8 f7       	brcc	.-10     	; 0x1a02 <strnlen_P+0x2>
    1a0c:	80 95       	com	r24
    1a0e:	90 95       	com	r25
    1a10:	8e 0f       	add	r24, r30
    1a12:	9f 1f       	adc	r25, r31
    1a14:	08 95       	ret

00001a16 <memset>:
    1a16:	dc 01       	movw	r26, r24
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <memset+0x6>
    1a1a:	6d 93       	st	X+, r22
    1a1c:	41 50       	subi	r20, 0x01	; 1
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	e0 f7       	brcc	.-8      	; 0x1a1a <memset+0x4>
    1a22:	08 95       	ret

00001a24 <strnlen>:
    1a24:	fc 01       	movw	r30, r24
    1a26:	61 50       	subi	r22, 0x01	; 1
    1a28:	70 40       	sbci	r23, 0x00	; 0
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	01 10       	cpse	r0, r1
    1a2e:	d8 f7       	brcc	.-10     	; 0x1a26 <strnlen+0x2>
    1a30:	80 95       	com	r24
    1a32:	90 95       	com	r25
    1a34:	8e 0f       	add	r24, r30
    1a36:	9f 1f       	adc	r25, r31
    1a38:	08 95       	ret

00001a3a <fgetc>:
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ec 01       	movw	r28, r24
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	20 ff       	sbrs	r18, 0
    1a44:	33 c0       	rjmp	.+102    	; 0x1aac <fgetc+0x72>
    1a46:	26 ff       	sbrs	r18, 6
    1a48:	0a c0       	rjmp	.+20     	; 0x1a5e <fgetc+0x24>
    1a4a:	2f 7b       	andi	r18, 0xBF	; 191
    1a4c:	2b 83       	std	Y+3, r18	; 0x03
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	9f 83       	std	Y+7, r25	; 0x07
    1a56:	8e 83       	std	Y+6, r24	; 0x06
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	29 c0       	rjmp	.+82     	; 0x1ab0 <fgetc+0x76>
    1a5e:	22 ff       	sbrs	r18, 2
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <fgetc+0x46>
    1a62:	e8 81       	ld	r30, Y
    1a64:	f9 81       	ldd	r31, Y+1	; 0x01
    1a66:	80 81       	ld	r24, Z
    1a68:	99 27       	eor	r25, r25
    1a6a:	87 fd       	sbrc	r24, 7
    1a6c:	90 95       	com	r25
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	19 f4       	brne	.+6      	; 0x1a78 <fgetc+0x3e>
    1a72:	20 62       	ori	r18, 0x20	; 32
    1a74:	2b 83       	std	Y+3, r18	; 0x03
    1a76:	1a c0       	rjmp	.+52     	; 0x1aac <fgetc+0x72>
    1a78:	31 96       	adiw	r30, 0x01	; 1
    1a7a:	f9 83       	std	Y+1, r31	; 0x01
    1a7c:	e8 83       	st	Y, r30
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <fgetc+0x62>
    1a80:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a82:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a84:	09 95       	icall
    1a86:	97 ff       	sbrs	r25, 7
    1a88:	09 c0       	rjmp	.+18     	; 0x1a9c <fgetc+0x62>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <fgetc+0x5a>
    1a90:	80 e1       	ldi	r24, 0x10	; 16
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <fgetc+0x5c>
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	82 2b       	or	r24, r18
    1a98:	8b 83       	std	Y+3, r24	; 0x03
    1a9a:	08 c0       	rjmp	.+16     	; 0x1aac <fgetc+0x72>
    1a9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa0:	2f 5f       	subi	r18, 0xFF	; 255
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	3f 83       	std	Y+7, r19	; 0x07
    1aa6:	2e 83       	std	Y+6, r18	; 0x06
    1aa8:	99 27       	eor	r25, r25
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <fgetc+0x76>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9f ef       	ldi	r25, 0xFF	; 255
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <fputc>:
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	18 2f       	mov	r17, r24
    1ac0:	09 2f       	mov	r16, r25
    1ac2:	eb 01       	movw	r28, r22
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	81 fd       	sbrc	r24, 1
    1ac8:	03 c0       	rjmp	.+6      	; 0x1ad0 <fputc+0x1a>
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	9f ef       	ldi	r25, 0xFF	; 255
    1ace:	20 c0       	rjmp	.+64     	; 0x1b10 <fputc+0x5a>
    1ad0:	82 ff       	sbrs	r24, 2
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <fputc+0x3e>
    1ad4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ad6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	42 17       	cp	r20, r18
    1ade:	53 07       	cpc	r21, r19
    1ae0:	7c f4       	brge	.+30     	; 0x1b00 <fputc+0x4a>
    1ae2:	e8 81       	ld	r30, Y
    1ae4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ae6:	9f 01       	movw	r18, r30
    1ae8:	2f 5f       	subi	r18, 0xFF	; 255
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	39 83       	std	Y+1, r19	; 0x01
    1aee:	28 83       	st	Y, r18
    1af0:	10 83       	st	Z, r17
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <fputc+0x4a>
    1af4:	e8 85       	ldd	r30, Y+8	; 0x08
    1af6:	f9 85       	ldd	r31, Y+9	; 0x09
    1af8:	81 2f       	mov	r24, r17
    1afa:	09 95       	icall
    1afc:	89 2b       	or	r24, r25
    1afe:	29 f7       	brne	.-54     	; 0x1aca <fputc+0x14>
    1b00:	2e 81       	ldd	r18, Y+6	; 0x06
    1b02:	3f 81       	ldd	r19, Y+7	; 0x07
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	3f 83       	std	Y+7, r19	; 0x07
    1b0a:	2e 83       	std	Y+6, r18	; 0x06
    1b0c:	81 2f       	mov	r24, r17
    1b0e:	90 2f       	mov	r25, r16
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <ungetc>:
    1b1a:	fb 01       	movw	r30, r22
    1b1c:	23 81       	ldd	r18, Z+3	; 0x03
    1b1e:	20 ff       	sbrs	r18, 0
    1b20:	12 c0       	rjmp	.+36     	; 0x1b46 <ungetc+0x2c>
    1b22:	26 fd       	sbrc	r18, 6
    1b24:	10 c0       	rjmp	.+32     	; 0x1b46 <ungetc+0x2c>
    1b26:	8f 3f       	cpi	r24, 0xFF	; 255
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	93 07       	cpc	r25, r19
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <ungetc+0x2c>
    1b2e:	82 83       	std	Z+2, r24	; 0x02
    1b30:	2f 7d       	andi	r18, 0xDF	; 223
    1b32:	20 64       	ori	r18, 0x40	; 64
    1b34:	23 83       	std	Z+3, r18	; 0x03
    1b36:	26 81       	ldd	r18, Z+6	; 0x06
    1b38:	37 81       	ldd	r19, Z+7	; 0x07
    1b3a:	21 50       	subi	r18, 0x01	; 1
    1b3c:	31 09       	sbc	r19, r1
    1b3e:	37 83       	std	Z+7, r19	; 0x07
    1b40:	26 83       	std	Z+6, r18	; 0x06
    1b42:	99 27       	eor	r25, r25
    1b44:	08 95       	ret
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	08 95       	ret

00001b4c <__ultoa_invert>:
    1b4c:	fa 01       	movw	r30, r20
    1b4e:	aa 27       	eor	r26, r26
    1b50:	28 30       	cpi	r18, 0x08	; 8
    1b52:	51 f1       	breq	.+84     	; 0x1ba8 <__ultoa_invert+0x5c>
    1b54:	20 31       	cpi	r18, 0x10	; 16
    1b56:	81 f1       	breq	.+96     	; 0x1bb8 <__ultoa_invert+0x6c>
    1b58:	e8 94       	clt
    1b5a:	6f 93       	push	r22
    1b5c:	6e 7f       	andi	r22, 0xFE	; 254
    1b5e:	6e 5f       	subi	r22, 0xFE	; 254
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	af 4f       	sbci	r26, 0xFF	; 255
    1b68:	b1 e0       	ldi	r27, 0x01	; 1
    1b6a:	3e d0       	rcall	.+124    	; 0x1be8 <__ultoa_invert+0x9c>
    1b6c:	b4 e0       	ldi	r27, 0x04	; 4
    1b6e:	3c d0       	rcall	.+120    	; 0x1be8 <__ultoa_invert+0x9c>
    1b70:	67 0f       	add	r22, r23
    1b72:	78 1f       	adc	r23, r24
    1b74:	89 1f       	adc	r24, r25
    1b76:	9a 1f       	adc	r25, r26
    1b78:	a1 1d       	adc	r26, r1
    1b7a:	68 0f       	add	r22, r24
    1b7c:	79 1f       	adc	r23, r25
    1b7e:	8a 1f       	adc	r24, r26
    1b80:	91 1d       	adc	r25, r1
    1b82:	a1 1d       	adc	r26, r1
    1b84:	6a 0f       	add	r22, r26
    1b86:	71 1d       	adc	r23, r1
    1b88:	81 1d       	adc	r24, r1
    1b8a:	91 1d       	adc	r25, r1
    1b8c:	a1 1d       	adc	r26, r1
    1b8e:	20 d0       	rcall	.+64     	; 0x1bd0 <__ultoa_invert+0x84>
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <__ultoa_invert+0x48>
    1b92:	68 94       	set
    1b94:	3f 91       	pop	r19
    1b96:	2a e0       	ldi	r18, 0x0A	; 10
    1b98:	26 9f       	mul	r18, r22
    1b9a:	11 24       	eor	r1, r1
    1b9c:	30 19       	sub	r19, r0
    1b9e:	30 5d       	subi	r19, 0xD0	; 208
    1ba0:	31 93       	st	Z+, r19
    1ba2:	de f6       	brtc	.-74     	; 0x1b5a <__ultoa_invert+0xe>
    1ba4:	cf 01       	movw	r24, r30
    1ba6:	08 95       	ret
    1ba8:	46 2f       	mov	r20, r22
    1baa:	47 70       	andi	r20, 0x07	; 7
    1bac:	40 5d       	subi	r20, 0xD0	; 208
    1bae:	41 93       	st	Z+, r20
    1bb0:	b3 e0       	ldi	r27, 0x03	; 3
    1bb2:	0f d0       	rcall	.+30     	; 0x1bd2 <__ultoa_invert+0x86>
    1bb4:	c9 f7       	brne	.-14     	; 0x1ba8 <__ultoa_invert+0x5c>
    1bb6:	f6 cf       	rjmp	.-20     	; 0x1ba4 <__ultoa_invert+0x58>
    1bb8:	46 2f       	mov	r20, r22
    1bba:	4f 70       	andi	r20, 0x0F	; 15
    1bbc:	40 5d       	subi	r20, 0xD0	; 208
    1bbe:	4a 33       	cpi	r20, 0x3A	; 58
    1bc0:	18 f0       	brcs	.+6      	; 0x1bc8 <__ultoa_invert+0x7c>
    1bc2:	49 5d       	subi	r20, 0xD9	; 217
    1bc4:	31 fd       	sbrc	r19, 1
    1bc6:	40 52       	subi	r20, 0x20	; 32
    1bc8:	41 93       	st	Z+, r20
    1bca:	02 d0       	rcall	.+4      	; 0x1bd0 <__ultoa_invert+0x84>
    1bcc:	a9 f7       	brne	.-22     	; 0x1bb8 <__ultoa_invert+0x6c>
    1bce:	ea cf       	rjmp	.-44     	; 0x1ba4 <__ultoa_invert+0x58>
    1bd0:	b4 e0       	ldi	r27, 0x04	; 4
    1bd2:	a6 95       	lsr	r26
    1bd4:	97 95       	ror	r25
    1bd6:	87 95       	ror	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	ba 95       	dec	r27
    1bde:	c9 f7       	brne	.-14     	; 0x1bd2 <__ultoa_invert+0x86>
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	61 05       	cpc	r22, r1
    1be4:	71 05       	cpc	r23, r1
    1be6:	08 95       	ret
    1be8:	9b 01       	movw	r18, r22
    1bea:	ac 01       	movw	r20, r24
    1bec:	0a 2e       	mov	r0, r26
    1bee:	06 94       	lsr	r0
    1bf0:	57 95       	ror	r21
    1bf2:	47 95       	ror	r20
    1bf4:	37 95       	ror	r19
    1bf6:	27 95       	ror	r18
    1bf8:	ba 95       	dec	r27
    1bfa:	c9 f7       	brne	.-14     	; 0x1bee <__ultoa_invert+0xa2>
    1bfc:	62 0f       	add	r22, r18
    1bfe:	73 1f       	adc	r23, r19
    1c00:	84 1f       	adc	r24, r20
    1c02:	95 1f       	adc	r25, r21
    1c04:	a0 1d       	adc	r26, r0
    1c06:	08 95       	ret

00001c08 <__ctype_isfalse>:
    1c08:	99 27       	eor	r25, r25
    1c0a:	88 27       	eor	r24, r24

00001c0c <__ctype_istrue>:
    1c0c:	08 95       	ret

00001c0e <__prologue_saves__>:
    1c0e:	2f 92       	push	r2
    1c10:	3f 92       	push	r3
    1c12:	4f 92       	push	r4
    1c14:	5f 92       	push	r5
    1c16:	6f 92       	push	r6
    1c18:	7f 92       	push	r7
    1c1a:	8f 92       	push	r8
    1c1c:	9f 92       	push	r9
    1c1e:	af 92       	push	r10
    1c20:	bf 92       	push	r11
    1c22:	cf 92       	push	r12
    1c24:	df 92       	push	r13
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	ca 1b       	sub	r28, r26
    1c38:	db 0b       	sbc	r29, r27
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	09 94       	ijmp

00001c46 <__epilogue_restores__>:
    1c46:	2a 88       	ldd	r2, Y+18	; 0x12
    1c48:	39 88       	ldd	r3, Y+17	; 0x11
    1c4a:	48 88       	ldd	r4, Y+16	; 0x10
    1c4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c50:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c52:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c54:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c56:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c58:	b9 84       	ldd	r11, Y+9	; 0x09
    1c5a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c5c:	df 80       	ldd	r13, Y+7	; 0x07
    1c5e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c60:	fd 80       	ldd	r15, Y+5	; 0x05
    1c62:	0c 81       	ldd	r16, Y+4	; 0x04
    1c64:	1b 81       	ldd	r17, Y+3	; 0x03
    1c66:	aa 81       	ldd	r26, Y+2	; 0x02
    1c68:	b9 81       	ldd	r27, Y+1	; 0x01
    1c6a:	ce 0f       	add	r28, r30
    1c6c:	d1 1d       	adc	r29, r1
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	ed 01       	movw	r28, r26
    1c7a:	08 95       	ret

00001c7c <_exit>:
    1c7c:	f8 94       	cli

00001c7e <__stop_program>:
    1c7e:	ff cf       	rjmp	.-2      	; 0x1c7e <__stop_program>
