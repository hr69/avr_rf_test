
nrf24l01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00001cb8  00001d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800268  00800268  00001eb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005d62  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4e  00000000  00000000  00007f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd0  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000aec  00000000  00000000  00009780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000138c  00000000  00000000  0000a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e82  00000000  00000000  0000b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000f47a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_16>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	11 12       	cpse	r1, r17
      6a:	13 14       	cp	r1, r3
      6c:	15 16       	cp	r1, r21

0000006e <_ZL10child_pipe>:
      6e:	0a 0b 0c 0d 0e 0f                                   ......

00000074 <_ZL17child_pipe_enable>:
      74:	00 01 02 03 04 05                                   ......

0000007a <__c.2299>:
      7a:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000086 <__ctors_start>:
      86:	45 02       	muls	r20, r21

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e8 eb       	ldi	r30, 0xB8	; 184
      9c:	fc e1       	ldi	r31, 0x1C	; 28
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a8 36       	cpi	r26, 0x68	; 104
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	22 e0       	ldi	r18, 0x02	; 2
      ac:	a8 e6       	ldi	r26, 0x68	; 104
      ae:	b2 e0       	ldi	r27, 0x02	; 2
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a2 39       	cpi	r26, 0x92	; 146
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c8 e8       	ldi	r28, 0x88	; 136
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	22 97       	sbiw	r28, 0x02	; 2
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 92 06 	call	0xd24	; 0xd24 <__tablejump__>
      ca:	c6 38       	cpi	r28, 0x86	; 134
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 b9 00 	call	0x172	; 0x172 <main>
      d4:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_Z23usart_transmit_byte_valh>:
/**
 * transmit byte via pass by value
 * @param data data byte to be sent
 */
void usart_transmit_byte_val(uint8_t data){
	 while (!(UCSR0A & (1<<UDRE0)));
      dc:	e0 ec       	ldi	r30, 0xC0	; 192
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	90 81       	ld	r25, Z
      e2:	95 ff       	sbrs	r25, 5
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <_Z23usart_transmit_byte_valh+0x4>
	 UDR0 = data;
      e6:	80 93 c6 00 	sts	0x00C6, r24
      ea:	08 95       	ret

000000ec <_Z12uart_putcharcP6__file>:

/**
 * putchar for streaming file out
 */
int uart_putchar(char ch, FILE *stream)
{
      ec:	cf 93       	push	r28
      ee:	c8 2f       	mov	r28, r24
	if(ch=='\n')
      f0:	8a 30       	cpi	r24, 0x0A	; 10
      f2:	19 f4       	brne	.+6      	; 0xfa <_Z12uart_putcharcP6__file+0xe>
	uart_putchar('\r',stream);
      f4:	8d e0       	ldi	r24, 0x0D	; 13
      f6:	0e 94 76 00 	call	0xec	; 0xec <_Z12uart_putcharcP6__file>
	stdio_serial_send_function((uint8_t) ch);
      fa:	8c 2f       	mov	r24, r28
      fc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z23usart_transmit_byte_valh>
	return 0;
}
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_Z22usart_receive_byte_refPh>:
/**
 * receive byte via reference
 * @param data address of data byte into which the data shall be recieved
 */
void usart_receive_byte_ref(uint8_t *data){
	 while (!(UCSR0A & (1<<RXC0)));
     108:	e0 ec       	ldi	r30, 0xC0	; 192
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	20 81       	ld	r18, Z
     10e:	22 23       	and	r18, r18
     110:	ec f7       	brge	.-6      	; 0x10c <_Z22usart_receive_byte_refPh+0x4>
	 *data = UDR0;
     112:	20 91 c6 00 	lds	r18, 0x00C6
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
     11a:	08 95       	ret

0000011c <_Z12uart_getcharP6__file>:
/**
 * get char for streaming file in
 */
int uart_getchar(FILE *stream)
{
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	8c 01       	movw	r16, r24
	char ch;
	stdio_serial_receive_function( (uint8_t *) &ch);
     12c:	ce 01       	movw	r24, r28
     12e:	01 96       	adiw	r24, 0x01	; 1
     130:	0e 94 84 00 	call	0x108	; 0x108 <_Z22usart_receive_byte_refPh>
	
	/* Echo the output back to the terminal */
	uart_putchar(ch,stream);
     134:	b8 01       	movw	r22, r16
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	0e 94 76 00 	call	0xec	; 0xec <_Z12uart_putcharcP6__file>

	return ch;
     13c:	89 81       	ldd	r24, Y+1	; 0x01
}
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0f 90       	pop	r0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <_Z23stdio_serial_initializev>:
/**
 * initializing the stdio file stream over uart
 */
void stdio_serial_initialize()
{
	uart_str = fdevopen(uart_putchar,uart_getchar);	
     14c:	6e e8       	ldi	r22, 0x8E	; 142
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	86 e7       	ldi	r24, 0x76	; 118
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fdevopen>
     158:	90 93 7b 02 	sts	0x027B, r25
     15c:	80 93 7a 02 	sts	0x027A, r24
	stdout = stdin = uart_str;
     160:	90 93 89 02 	sts	0x0289, r25
     164:	80 93 88 02 	sts	0x0288, r24
     168:	90 93 8b 02 	sts	0x028B, r25
     16c:	80 93 8a 02 	sts	0x028A, r24
     170:	08 95       	ret

00000172 <main>:

// Used to control whether this node is sending or receiving
bool role = 0;

int main(void)
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	62 97       	sbiw	r28, 0x12	; 18
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
 * initialize the usart baud rate
 * @param baud_rate the baud rate for teh usart module
 */
void usart_set_baud_rate(unsigned long baud_rate){
	unsigned int ubrr = (F_CPU/16/baud_rate)-1;
	UBRR0H = (unsigned char)(ubrr>>8);
     186:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     18a:	83 e3       	ldi	r24, 0x33	; 51
     18c:	80 93 c4 00 	sts	0x00C4, r24
 * @param stop_bits	0->1 stop bit, 1-> 2 stop bits
 * @param char_size	0->5-bit, 1->6-bit, 2->7-bit, 3->8-bit,7->9-bit
 * @param pol		0->tx or rising, rx on falling, 1-> tx on falling, rx on rising
 */
void usart_setup(uint8_t mode, uint8_t parity, uint8_t stop_bits, uint8_t char_size,uint8_t pol){
	 UCSR0C =  (mode<<6) | (parity<<4) | (stop_bits<<3) |(char_size<<1) | (pol<<0);
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	80 93 c2 00 	sts	0x00C2, r24

/**
 * enable the USART tx and rx
 */
void usart_enable(){
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     196:	88 e1       	ldi	r24, 0x18	; 24
     198:	80 93 c1 00 	sts	0x00C1, r24

	//UART
	usart_set_baud_rate(9600);
	usart_setup(0,0,0,3,0);
	usart_enable();
	stdio_serial_initialize();
     19c:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z23stdio_serial_initializev>
	
	printf("RF24/examples/GettingStarted\n");
     1a0:	8d e1       	ldi	r24, 0x1D	; 29
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>
	printf("*** PRESS 'T' to begin transmitting to the other node\n");
     1a8:	8a e3       	ldi	r24, 0x3A	; 58
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>
	return elapsed_us;
	//return 0;
}

inline void initialize_timer_0A(){
	TCCR0A |= (1<<WGM01) | (1<<WGM00); //fast pwm
     1b0:	84 b5       	in	r24, 0x24	; 36
     1b2:	83 60       	ori	r24, 0x03	; 3
     1b4:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1<<FOC0A) ;//force output compare match on channel A
	TCCR0B |= (1<<CS01) | (1<<CS00); // div by 64 , therefore , if 8MHz --> 1Mhz ....if 16 MHz --> 2 MHz
     1b6:	85 b5       	in	r24, 0x25	; 37
     1b8:	83 60       	ori	r24, 0x03	; 3
     1ba:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A = 4; //if 8 Mhz return 10 us on compare,  if 16 Mhz return 5 us on compare
	TIMSK0 |= (1<<TOIE0);
     1bc:	ee e6       	ldi	r30, 0x6E	; 110
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	81 60       	ori	r24, 0x01	; 1
     1c4:	80 83       	st	Z, r24
	sei();
     1c6:	78 94       	sei

	initialize_timer_0A();

    radio.begin();
     1c8:	89 e6       	ldi	r24, 0x69	; 105
     1ca:	92 e0       	ldi	r25, 0x02	; 2
     1cc:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN4RF245beginEv>
	//radio.setDataRate(RF24_250KBPS);
	radio.setPALevel(RF24_PA_LOW);
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	89 e6       	ldi	r24, 0x69	; 105
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN4RF2410setPALevelEh>
	
  // Open a writing and reading pipe on each radio, with opposite addresses
	if(radioNumber) {
     1da:	80 91 79 02 	lds	r24, 0x0279
     1de:	88 23       	and	r24, r24
     1e0:	71 f0       	breq	.+28     	; 0x1fe <main+0x8c>
		radio.openWritingPipe(addresses[1]);
     1e2:	6c e0       	ldi	r22, 0x0C	; 12
     1e4:	71 e0       	ldi	r23, 0x01	; 1
     1e6:	89 e6       	ldi	r24, 0x69	; 105
     1e8:	92 e0       	ldi	r25, 0x02	; 2
     1ea:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN4RF2415openWritingPipeEPKh>
		radio.openReadingPipe(1,addresses[0]);
     1ee:	46 e0       	ldi	r20, 0x06	; 6
     1f0:	51 e0       	ldi	r21, 0x01	; 1
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	89 e6       	ldi	r24, 0x69	; 105
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN4RF2415openReadingPipeEhPKh>
     1fc:	0d c0       	rjmp	.+26     	; 0x218 <main+0xa6>
	}
	else {
		radio.openWritingPipe(addresses[0]);
     1fe:	66 e0       	ldi	r22, 0x06	; 6
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	89 e6       	ldi	r24, 0x69	; 105
     204:	92 e0       	ldi	r25, 0x02	; 2
     206:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN4RF2415openWritingPipeEPKh>
		radio.openReadingPipe(1,addresses[1]);
     20a:	4c e0       	ldi	r20, 0x0C	; 12
     20c:	51 e0       	ldi	r21, 0x01	; 1
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	89 e6       	ldi	r24, 0x69	; 105
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN4RF2415openReadingPipeEhPKh>
	}
    
    radio.startListening();
     218:	89 e6       	ldi	r24, 0x69	; 105
     21a:	92 e0       	ldi	r25, 0x02	; 2
     21c:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN4RF2414startListeningEv>
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     220:	ce 01       	movw	r24, r28
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	9a 8b       	std	Y+18, r25	; 0x12
     226:	89 8b       	std	Y+17, r24	; 0x11
		
				radio.stopListening();                                        // First, stop listening so we can talk
				radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.
				radio.startListening();                                       // Now, resume listening so we catch the next packets.
				printf("Sent response ");
				printf("%ld\n", got_time);
     228:	0f 2e       	mov	r0, r31
     22a:	f2 e9       	ldi	r31, 0x92	; 146
     22c:	4f 2e       	mov	r4, r31
     22e:	f1 e0       	ldi	r31, 0x01	; 1
     230:	5f 2e       	mov	r5, r31
     232:	f0 2d       	mov	r31, r0
		        radio.read( &got_time, sizeof(unsigned long) );
		        unsigned long time = millis();
		        
		        // Spew it
		        printf("Sent ");
		        printf("%ld", time);
     234:	0f 2e       	mov	r0, r31
     236:	f1 e3       	ldi	r31, 0x31	; 49
     238:	2f 2e       	mov	r2, r31
     23a:	f2 e0       	ldi	r31, 0x02	; 2
     23c:	3f 2e       	mov	r3, r31
     23e:	f0 2d       	mov	r31, r0
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     240:	69 88       	ldd	r6, Y+17	; 0x11
     242:	7a 88       	ldd	r7, Y+18	; 0x12
	        radio.stopListening();                                    // First, stop listening so we can talk.
	        
	        
	        printf("Now sending\n");

	        unsigned long time = 123456;                             // Take the time, and send it.  This will block until complete
     244:	0f 2e       	mov	r0, r31
     246:	f0 e4       	ldi	r31, 0x40	; 64
     248:	cf 2e       	mov	r12, r31
     24a:	f2 ee       	ldi	r31, 0xE2	; 226
     24c:	df 2e       	mov	r13, r31
     24e:	ee 24       	eor	r14, r14
     250:	e3 94       	inc	r14
     252:	f1 2c       	mov	r15, r1
     254:	f0 2d       	mov	r31, r0
				printf("%ld\n", got_time);
			}
		}

		/****************** Change Roles via Serial Commands ***************************/
		if ( bit_is_set(UCSR0A, RXC0) )
     256:	00 ec       	ldi	r16, 0xC0	; 192
     258:	10 e0       	ldi	r17, 0x00	; 0
	
	
    while(1) {
		
        /****************** Ping Out Role ***************************/
        if (role == 1)  {
     25a:	80 91 68 02 	lds	r24, 0x0268
     25e:	88 23       	and	r24, r24
     260:	09 f4       	brne	.+2      	; 0x264 <main+0xf2>
     262:	51 c0       	rjmp	.+162    	; 0x306 <main+0x194>
	        
	        radio.stopListening();                                    // First, stop listening so we can talk.
     264:	89 e6       	ldi	r24, 0x69	; 105
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 34 04 	call	0x868	; 0x868 <_ZN4RF2413stopListeningEv>
	        
	        
	        printf("Now sending\n");
     26c:	80 e7       	ldi	r24, 0x70	; 112
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>

	        unsigned long time = 123456;                             // Take the time, and send it.  This will block until complete
     274:	cd 86       	std	Y+13, r12	; 0x0d
     276:	de 86       	std	Y+14, r13	; 0x0e
     278:	ef 86       	std	Y+15, r14	; 0x0f
     27a:	f8 8a       	std	Y+16, r15	; 0x10
	        if (!radio.write( &time, sizeof(unsigned long) )){
     27c:	44 e0       	ldi	r20, 0x04	; 4
     27e:	be 01       	movw	r22, r28
     280:	63 5f       	subi	r22, 0xF3	; 243
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	89 e6       	ldi	r24, 0x69	; 105
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN4RF245writeEPKvh>
     28c:	81 11       	cpse	r24, r1
     28e:	08 c0       	rjmp	.+16     	; 0x2a0 <main+0x12e>
		        printf("failed");
     290:	ac e7       	ldi	r26, 0x7C	; 124
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	bf 93       	push	r27
     296:	af 93       	push	r26
     298:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
	        }
	        
	        radio.startListening();                                    // Now, continue listening
     2a0:	89 e6       	ldi	r24, 0x69	; 105
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN4RF2414startListeningEv>
extern volatile int elapsed_us;
extern volatile int elapsed_ms;

inline int millis(){
	
	return elapsed_ms;
     2a8:	80 90 7c 02 	lds	r8, 0x027C
     2ac:	90 90 7d 02 	lds	r9, 0x027D
	        
	        unsigned long started_waiting_at = millis();               // Set up a timeout period, get the current microseconds
     2b0:	aa 24       	eor	r10, r10
     2b2:	97 fc       	sbrc	r9, 7
     2b4:	a0 94       	com	r10
     2b6:	ba 2c       	mov	r11, r10
	        bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
	        
	        while ( ! radio.available() ){                             // While nothing is received
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <main+0x16c>
     2ba:	80 91 7c 02 	lds	r24, 0x027C
     2be:	90 91 7d 02 	lds	r25, 0x027D
		        if (millis() - started_waiting_at > 200 ){            // If waited longer than 200ms, indicate timeout and exit while loop
     2c2:	aa 27       	eor	r26, r26
     2c4:	97 fd       	sbrc	r25, 7
     2c6:	a0 95       	com	r26
     2c8:	ba 2f       	mov	r27, r26
     2ca:	88 19       	sub	r24, r8
     2cc:	99 09       	sbc	r25, r9
     2ce:	aa 09       	sbc	r26, r10
     2d0:	bb 09       	sbc	r27, r11
     2d2:	89 3c       	cpi	r24, 0xC9	; 201
     2d4:	91 05       	cpc	r25, r1
     2d6:	a1 05       	cpc	r26, r1
     2d8:	b1 05       	cpc	r27, r1
     2da:	08 f0       	brcs	.+2      	; 0x2de <main+0x16c>
     2dc:	82 c0       	rjmp	.+260    	; 0x3e2 <main+0x270>
	        radio.startListening();                                    // Now, continue listening
	        
	        unsigned long started_waiting_at = millis();               // Set up a timeout period, get the current microseconds
	        bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
	        
	        while ( ! radio.available() ){                             // While nothing is received
     2de:	89 e6       	ldi	r24, 0x69	; 105
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN4RF249availableEv>
     2e6:	88 23       	and	r24, r24
     2e8:	41 f3       	breq	.-48     	; 0x2ba <main+0x148>
     2ea:	80 c0       	rjmp	.+256    	; 0x3ec <main+0x27a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ec:	ff ef       	ldi	r31, 0xFF	; 255
     2ee:	29 e6       	ldi	r18, 0x69	; 105
     2f0:	88 e1       	ldi	r24, 0x18	; 24
     2f2:	f1 50       	subi	r31, 0x01	; 1
     2f4:	20 40       	sbci	r18, 0x00	; 0
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x180>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x18a>
     2fc:	00 00       	nop
	        _delay_ms(1000);
        }

		/****************** Pong Back Role ***************************/

		if ( role == 0 )
     2fe:	80 91 68 02 	lds	r24, 0x0268
     302:	81 11       	cpse	r24, r1
     304:	3a c0       	rjmp	.+116    	; 0x37a <main+0x208>
		{
			unsigned long got_time;
	
			if( radio.available()){
     306:	89 e6       	ldi	r24, 0x69	; 105
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN4RF249availableEv>
     30e:	88 23       	and	r24, r24
     310:	a1 f1       	breq	.+104    	; 0x37a <main+0x208>
     312:	07 c0       	rjmp	.+14     	; 0x322 <main+0x1b0>
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     314:	44 e0       	ldi	r20, 0x04	; 4
     316:	66 2d       	mov	r22, r6
     318:	77 2d       	mov	r23, r7
     31a:	89 e6       	ldi	r24, 0x69	; 105
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN4RF244readEPvh>
		{
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
     322:	89 e6       	ldi	r24, 0x69	; 105
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN4RF249availableEv>
     32a:	81 11       	cpse	r24, r1
     32c:	f3 cf       	rjmp	.-26     	; 0x314 <main+0x1a2>
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
				}
		
				radio.stopListening();                                        // First, stop listening so we can talk
     32e:	89 e6       	ldi	r24, 0x69	; 105
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 34 04 	call	0x868	; 0x868 <_ZN4RF2413stopListeningEv>
				radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.
     336:	44 e0       	ldi	r20, 0x04	; 4
     338:	66 2d       	mov	r22, r6
     33a:	77 2d       	mov	r23, r7
     33c:	89 e6       	ldi	r24, 0x69	; 105
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN4RF245writeEPKvh>
				radio.startListening();                                       // Now, resume listening so we catch the next packets.
     344:	89 e6       	ldi	r24, 0x69	; 105
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN4RF2414startListeningEv>
				printf("Sent response ");
     34c:	a3 e8       	ldi	r26, 0x83	; 131
     34e:	b1 e0       	ldi	r27, 0x01	; 1
     350:	bf 93       	push	r27
     352:	af 93       	push	r26
     354:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
				printf("%ld\n", got_time);
     358:	8c 81       	ldd	r24, Y+4	; 0x04
     35a:	8f 93       	push	r24
     35c:	8b 81       	ldd	r24, Y+3	; 0x03
     35e:	8f 93       	push	r24
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	8f 93       	push	r24
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	8f 93       	push	r24
     368:	5f 92       	push	r5
     36a:	4f 92       	push	r4
     36c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
			}
		}

		/****************** Change Roles via Serial Commands ***************************/
		if ( bit_is_set(UCSR0A, RXC0) )
     37a:	d8 01       	movw	r26, r16
     37c:	8c 91       	ld	r24, X
     37e:	88 23       	and	r24, r24
     380:	0c f0       	brlt	.+2      	; 0x384 <main+0x212>
     382:	6b cf       	rjmp	.-298    	; 0x25a <main+0xe8>
		{
			char buffer[12];
			char c = scanf("%12s", buffer);
     384:	ba 89       	ldd	r27, Y+18	; 0x12
     386:	bf 93       	push	r27
     388:	e9 89       	ldd	r30, Y+17	; 0x11
     38a:	ef 93       	push	r30
     38c:	87 e9       	ldi	r24, 0x97	; 151
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	9f 93       	push	r25
     392:	8f 93       	push	r24
     394:	0e 94 2b 07 	call	0xe56	; 0xe56 <scanf>
			if ( c == 'T' && role == 0 ){
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	84 35       	cpi	r24, 0x54	; 84
     3a2:	61 f4       	brne	.+24     	; 0x3bc <main+0x24a>
     3a4:	80 91 68 02 	lds	r24, 0x0268
     3a8:	81 11       	cpse	r24, r1
     3aa:	55 cf       	rjmp	.-342    	; 0x256 <main+0xe4>
				printf("*** CHANGING TO TRANSMIT ROLE -- PRESS 'R' TO SWITCH BACK\n");
     3ac:	8c e9       	ldi	r24, 0x9C	; 156
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>
				role = 1;                  // Become the primary transmitter (ping out)
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 68 02 	sts	0x0268, r24
     3ba:	4d cf       	rjmp	.-358    	; 0x256 <main+0xe4>
				
			}else
			if ( c == 'R' && role == 1 ){
     3bc:	82 35       	cpi	r24, 0x52	; 82
     3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x250>
     3c0:	4a cf       	rjmp	.-364    	; 0x256 <main+0xe4>
     3c2:	80 91 68 02 	lds	r24, 0x0268
     3c6:	88 23       	and	r24, r24
     3c8:	09 f4       	brne	.+2      	; 0x3cc <main+0x25a>
     3ca:	45 cf       	rjmp	.-374    	; 0x256 <main+0xe4>
				printf("*** CHANGING TO RECEIVE ROLE -- PRESS 'T' TO SWITCH BACK\n");
     3cc:	86 ed       	ldi	r24, 0xD6	; 214
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>
				role = 0;                // Become the primary receiver (pong back)
     3d4:	10 92 68 02 	sts	0x0268, r1
				radio.startListening();
     3d8:	89 e6       	ldi	r24, 0x69	; 105
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN4RF2414startListeningEv>
     3e0:	3a cf       	rjmp	.-396    	; 0x256 <main+0xe4>
			        break;
		        }
	        }
	        
	        if ( timeout ){                                             // Describe the results
		        printf("Failed, response timed out.\n");
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>
     3ea:	80 cf       	rjmp	.-256    	; 0x2ec <main+0x17a>
		        } else {
		        unsigned long got_time;                                 // Grab the response, compare, and send to debugging spew
		        radio.read( &got_time, sizeof(unsigned long) );
     3ec:	44 e0       	ldi	r20, 0x04	; 4
     3ee:	66 2d       	mov	r22, r6
     3f0:	77 2d       	mov	r23, r7
     3f2:	89 e6       	ldi	r24, 0x69	; 105
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN4RF244readEPvh>
     3fa:	80 90 7c 02 	lds	r8, 0x027C
     3fe:	90 90 7d 02 	lds	r9, 0x027D
		        unsigned long time = millis();
     402:	aa 24       	eor	r10, r10
     404:	97 fc       	sbrc	r9, 7
     406:	a0 94       	com	r10
     408:	ba 2c       	mov	r11, r10
		        
		        // Spew it
		        printf("Sent ");
     40a:	ab e2       	ldi	r26, 0x2B	; 43
     40c:	b2 e0       	ldi	r27, 0x02	; 2
     40e:	bf 93       	push	r27
     410:	af 93       	push	r26
     412:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
		        printf("%ld", time);
     416:	bf 92       	push	r11
     418:	af 92       	push	r10
     41a:	9f 92       	push	r9
     41c:	8f 92       	push	r8
     41e:	3f 92       	push	r3
     420:	2f 92       	push	r2
     422:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
		        printf(", Got response ");
     426:	a5 e3       	ldi	r26, 0x35	; 53
     428:	b2 e0       	ldi	r27, 0x02	; 2
     42a:	bf 93       	push	r27
     42c:	af 93       	push	r26
     42e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
		        printf("%ld", got_time);
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	8f 93       	push	r24
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	8f 93       	push	r24
     43a:	8a 81       	ldd	r24, Y+2	; 0x02
     43c:	8f 93       	push	r24
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	8f 93       	push	r24
     442:	3f 92       	push	r3
     444:	2f 92       	push	r2
     446:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
		        printf(", Round-trip delay ");
     44a:	a5 e4       	ldi	r26, 0x45	; 69
     44c:	b2 e0       	ldi	r27, 0x02	; 2
     44e:	bf 93       	push	r27
     450:	af 93       	push	r26
     452:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
		        printf("%ld", time-got_time);
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	ab 81       	ldd	r26, Y+3	; 0x03
     45c:	bc 81       	ldd	r27, Y+4	; 0x04
     45e:	88 1a       	sub	r8, r24
     460:	99 0a       	sbc	r9, r25
     462:	aa 0a       	sbc	r10, r26
     464:	bb 0a       	sbc	r11, r27
     466:	bf 92       	push	r11
     468:	af 92       	push	r10
     46a:	9f 92       	push	r9
     46c:	8f 92       	push	r8
     46e:	3f 92       	push	r3
     470:	2f 92       	push	r2
     472:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <printf>
		        printf(" microseconds\n");
     476:	89 e5       	ldi	r24, 0x59	; 89
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <puts>
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	31 cf       	rjmp	.-414    	; 0x2ec <main+0x17a>

0000048a <_GLOBAL__sub_I__Z19usart_set_baud_ratem>:
/****************** User Config ***************************/
/***      Set this radio as radio number 0 or 1         ***/
bool radioNumber = 0;

/* Hardware configuration: Set up nRF24L01 radio on SPI bus plus pins 7 & 8 */
RF24 radio(7,8);
     48a:	48 e0       	ldi	r20, 0x08	; 8
     48c:	67 e0       	ldi	r22, 0x07	; 7
     48e:	89 e6       	ldi	r24, 0x69	; 105
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 21 04 	call	0x842	; 0x842 <_ZN4RF24C1Ehh>
     496:	08 95       	ret

00000498 <__vector_16>:
volatile int us_counter = 0;
volatile int ms_counter = 0;
volatile int elapsed_us = 0;
volatile int elapsed_ms = 0;

ISR (TIMER0_OVF_vect){
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	2f 93       	push	r18
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
	us_4++;
     4a8:	80 91 84 02 	lds	r24, 0x0284
     4ac:	90 91 85 02 	lds	r25, 0x0285
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	90 93 85 02 	sts	0x0285, r25
     4b6:	80 93 84 02 	sts	0x0284, r24
	if(us_4>=250){  ////if 8 Mhz make it >100 ,  if 16 Mhz   make it  > 200
     4ba:	80 91 84 02 	lds	r24, 0x0284
     4be:	90 91 85 02 	lds	r25, 0x0285
     4c2:	8a 3f       	cpi	r24, 0xFA	; 250
     4c4:	91 05       	cpc	r25, r1
     4c6:	0c f4       	brge	.+2      	; 0x4ca <__vector_16+0x32>
     4c8:	43 c0       	rjmp	.+134    	; 0x550 <__vector_16+0xb8>
		us_4 = 0;
     4ca:	10 92 85 02 	sts	0x0285, r1
     4ce:	10 92 84 02 	sts	0x0284, r1
		us_counter++;
     4d2:	80 91 82 02 	lds	r24, 0x0282
     4d6:	90 91 83 02 	lds	r25, 0x0283
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	90 93 83 02 	sts	0x0283, r25
     4e0:	80 93 82 02 	sts	0x0282, r24
		elapsed_us ++;  //increment the us
     4e4:	80 91 7e 02 	lds	r24, 0x027E
     4e8:	90 91 7f 02 	lds	r25, 0x027F
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	90 93 7f 02 	sts	0x027F, r25
     4f2:	80 93 7e 02 	sts	0x027E, r24
		if(us_counter>1000){
     4f6:	80 91 82 02 	lds	r24, 0x0282
     4fa:	90 91 83 02 	lds	r25, 0x0283
     4fe:	89 3e       	cpi	r24, 0xE9	; 233
     500:	93 40       	sbci	r25, 0x03	; 3
     502:	2c f1       	brlt	.+74     	; 0x54e <__vector_16+0xb6>
			us_counter=0;
     504:	10 92 83 02 	sts	0x0283, r1
     508:	10 92 82 02 	sts	0x0282, r1
			elapsed_ms++; //increment the ms
     50c:	80 91 7c 02 	lds	r24, 0x027C
     510:	90 91 7d 02 	lds	r25, 0x027D
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	90 93 7d 02 	sts	0x027D, r25
     51a:	80 93 7c 02 	sts	0x027C, r24
			ms_counter++;
     51e:	80 91 80 02 	lds	r24, 0x0280
     522:	90 91 81 02 	lds	r25, 0x0281
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	90 93 81 02 	sts	0x0281, r25
     52c:	80 93 80 02 	sts	0x0280, r24
			if(ms_counter>=1000)
     530:	80 91 80 02 	lds	r24, 0x0280
     534:	90 91 81 02 	lds	r25, 0x0281
     538:	88 3e       	cpi	r24, 0xE8	; 232
     53a:	93 40       	sbci	r25, 0x03	; 3
     53c:	44 f0       	brlt	.+16     	; 0x54e <__vector_16+0xb6>
			{
				ms_counter = 0;
     53e:	10 92 81 02 	sts	0x0281, r1
     542:	10 92 80 02 	sts	0x0280, r1
				PORTB^=1;
     546:	95 b1       	in	r25, 0x05	; 5
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	89 27       	eor	r24, r25
     54c:	85 b9       	out	0x05, r24	; 5
			}
		}
		asm("nop");
     54e:	00 00       	nop
	}
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	2f 91       	pop	r18
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <_ZN4RF243csnEb>:
	  _SPI.setDataMode(RF24_DATA_MODE);
	  _SPI.setClockDivider(spi_speed ? spi_speed : RF24_CLOCK_DIVIDER);
	  _SPI.chipSelect(csn_pin);
	  delayMicroseconds(5);
#elif defined (__AVR__) 
	  if (mode == HIGH) {
     560:	66 23       	and	r22, r22
     562:	41 f0       	breq	.+16     	; 0x574 <_ZN4RF243csnEb+0x14>
		  CSN_PORT |= (1<<CSN_BIT);  	// SCK->CSN HIGH
     564:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	87 ec       	ldi	r24, 0xC7	; 199
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <_ZN4RF243csnEb+0xa>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <_ZN4RF243csnEb+0x10>
     570:	00 00       	nop
     572:	08 95       	ret
		  delayMicroseconds(100); // allow csn to settle.
	  }
	  else {
		  CSN_PORT &= ~(1<<CSN_BIT);	// SCK->CSN LOW
     574:	28 98       	cbi	0x05, 0	; 5
     576:	9d e1       	ldi	r25, 0x1D	; 29
     578:	9a 95       	dec	r25
     57a:	f1 f7       	brne	.-4      	; 0x578 <_ZN4RF243csnEb+0x18>
     57c:	00 00       	nop
     57e:	08 95       	ret

00000580 <_ZN4RF242ceEb>:
/****************************************************************************/
int mode;
void RF24::ce(bool level)
{
	#if defined(__AVR__)
	if (ce_pin != csn_pin){
     580:	fc 01       	movw	r30, r24
     582:	20 81       	ld	r18, Z
     584:	81 81       	ldd	r24, Z+1	; 0x01
     586:	28 17       	cp	r18, r24
     588:	99 f0       	breq	.+38     	; 0x5b0 <_ZN4RF242ceEb+0x30>
		if (mode == HIGH) {
     58a:	80 91 86 02 	lds	r24, 0x0286
     58e:	90 91 87 02 	lds	r25, 0x0287
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	41 f4       	brne	.+16     	; 0x5a6 <_ZN4RF242ceEb+0x26>
			CE_PORT |= (1<<CE_BIT);  	// SCK->CSN HIGH
     596:	5f 9a       	sbi	0x0b, 7	; 11
     598:	87 ec       	ldi	r24, 0xC7	; 199
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <_ZN4RF242ceEb+0x1c>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <_ZN4RF242ceEb+0x22>
     5a2:	00 00       	nop
     5a4:	08 95       	ret
			delayMicroseconds(100); // allow csn to settle.
		}
		else {
			CE_PORT &= ~(1<<CE_BIT);	// SCK->CSN LOW
     5a6:	5f 98       	cbi	0x0b, 7	; 11
     5a8:	9d e1       	ldi	r25, 0x1D	; 29
     5aa:	9a 95       	dec	r25
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <_ZN4RF242ceEb+0x2a>
     5ae:	00 00       	nop
     5b0:	08 95       	ret

000005b2 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
     5ba:	16 2f       	mov	r17, r22
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     5bc:	84 b1       	in	r24, 0x04	; 4
     5be:	8c 62       	ori	r24, 0x2C	; 44
     5c0:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     5c2:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     5c4:	8c b5       	in	r24, 0x2c	; 44
     5c6:	80 65       	ori	r24, 0x50	; 80
     5c8:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	ce 01       	movw	r24, r28
     5ce:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
  result = *++prx;   // result is 2nd byte of receive buffer  

	#elif defined(__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( R_REGISTER | ( REGISTER_MASK & reg ) );
     5d2:	1f 71       	andi	r17, 0x1F	; 31
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     5d4:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     5d6:	0d b4       	in	r0, 0x2d	; 45
     5d8:	07 fe       	sbrs	r0, 7
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <_ZN4RF2413read_registerEh+0x24>
	return SPDR;
     5dc:	8e b5       	in	r24, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     5e2:	0d b4       	in	r0, 0x2d	; 45
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <_ZN4RF2413read_registerEh+0x30>
	return SPDR;
     5e8:	1e b5       	in	r17, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	ce 01       	movw	r24, r28
     5ee:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return result;
}
     5f2:	81 2f       	mov	r24, r17
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret

000005fc <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
     60a:	06 2f       	mov	r16, r22
     60c:	e4 2e       	mov	r14, r20
     60e:	f5 2e       	mov	r15, r21
     610:	12 2f       	mov	r17, r18
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     612:	84 b1       	in	r24, 0x04	; 4
     614:	8c 62       	ori	r24, 0x2C	; 44
     616:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     618:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     61a:	8c b5       	in	r24, 0x2c	; 44
     61c:	80 65       	ori	r24, 0x50	; 80
     61e:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	ce 01       	movw	r24, r28
     624:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, size);
  status = *prx; // status is 1st byte of receive buffer

  	#elif defined(__AVR__)
  	 beginTransaction();
  	 status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
     628:	0f 71       	andi	r16, 0x1F	; 31
     62a:	00 62       	ori	r16, 0x20	; 32
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     62c:	0e bd       	out	0x2e, r16	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <_ZN4RF2414write_registerEhPKhh+0x32>
	return SPDR;
     634:	0e b5       	in	r16, 0x2e	; 46
  	 while ( len-- )
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	91 0f       	add	r25, r17
     63a:	11 23       	and	r17, r17
     63c:	51 f0       	breq	.+20     	; 0x652 <_ZN4RF2414write_registerEhPKhh+0x56>
     63e:	ee 2d       	mov	r30, r14
     640:	ff 2d       	mov	r31, r15
  	 AVR_SPI_MSTR_TRANSMIT_VAL(*buf++);
     642:	21 91       	ld	r18, Z+
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     644:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7
     64a:	fd cf       	rjmp	.-6      	; 0x646 <_ZN4RF2414write_registerEhPKhh+0x4a>
	return SPDR;
     64c:	2e b5       	in	r18, 0x2e	; 46
  status = *prx; // status is 1st byte of receive buffer

  	#elif defined(__AVR__)
  	 beginTransaction();
  	 status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
  	 while ( len-- )
     64e:	91 50       	subi	r25, 0x01	; 1
     650:	c0 f7       	brcc	.-16     	; 0x642 <_ZN4RF2414write_registerEhPKhh+0x46>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	ce 01       	movw	r24, r28
     656:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     65a:	80 2f       	mov	r24, r16
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	08 95       	ret

0000066a <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
     674:	16 2f       	mov	r17, r22
     676:	04 2f       	mov	r16, r20
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     678:	84 b1       	in	r24, 0x04	; 4
     67a:	8c 62       	ori	r24, 0x2C	; 44
     67c:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     67e:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     680:	8c b5       	in	r24, 0x2c	; 44
     682:	80 65       	ori	r24, 0x50	; 80
     684:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
	_SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
	status = *prx++; // status is 1st byte of receive buffer

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
     68e:	1f 71       	andi	r17, 0x1F	; 31
     690:	10 62       	ori	r17, 0x20	; 32
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     692:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     694:	0d b4       	in	r0, 0x2d	; 45
     696:	07 fe       	sbrs	r0, 7
     698:	fd cf       	rjmp	.-6      	; 0x694 <_ZN4RF2414write_registerEhh+0x2a>
	return SPDR;
     69a:	1e b5       	in	r17, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     69c:	0e bd       	out	0x2e, r16	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     69e:	0d b4       	in	r0, 0x2d	; 45
     6a0:	07 fe       	sbrs	r0, 7
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <_ZN4RF2414write_registerEhh+0x34>
	return SPDR;
     6a4:	8e b5       	in	r24, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	ce 01       	movw	r24, r28
     6aa:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     6ae:	81 2f       	mov	r24, r17
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	08 95       	ret

000006ba <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
     6ca:	d6 2e       	mov	r13, r22
     6cc:	e7 2e       	mov	r14, r23
     6ce:	f2 2e       	mov	r15, r18
  uint8_t status;
  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

   data_len = rf24_min(data_len, payload_size);
     6d0:	0b 81       	ldd	r16, Y+3	; 0x03
     6d2:	14 2f       	mov	r17, r20
     6d4:	04 17       	cp	r16, r20
     6d6:	08 f4       	brcc	.+2      	; 0x6da <_ZN4RF2413write_payloadEPKvhh+0x20>
     6d8:	10 2f       	mov	r17, r16
   uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     6da:	8c 81       	ldd	r24, Y+4	; 0x04
     6dc:	81 11       	cpse	r24, r1
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_ZN4RF2413write_payloadEPKvhh+0x2a>
     6e0:	01 1b       	sub	r16, r17
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <_ZN4RF2413write_payloadEPKvhh+0x2c>
     6e4:	00 e0       	ldi	r16, 0x00	; 0
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     6e6:	84 b1       	in	r24, 0x04	; 4
     6e8:	8c 62       	ori	r24, 0x2C	; 44
     6ea:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     6ec:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     6ee:	8c b5       	in	r24, 0x2c	; 44
     6f0:	80 65       	ori	r24, 0x50	; 80
     6f2:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     6fc:	fe bc       	out	0x2e, r15	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     6fe:	0d b4       	in	r0, 0x2d	; 45
     700:	07 fe       	sbrs	r0, 7
     702:	fd cf       	rjmp	.-6      	; 0x6fe <_ZN4RF2413write_payloadEPKvhh+0x44>
	return SPDR;
     704:	fe b4       	in	r15, 0x2e	; 46
	status = *prx; // status is 1st byte of receive buffer
	
	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( writeType );
	while ( data_len-- ) {
     706:	9f ef       	ldi	r25, 0xFF	; 255
     708:	91 0f       	add	r25, r17
     70a:	11 23       	and	r17, r17
     70c:	51 f0       	breq	.+20     	; 0x722 <_ZN4RF2413write_payloadEPKvhh+0x68>
     70e:	ed 2d       	mov	r30, r13
     710:	fe 2d       	mov	r31, r14
		AVR_SPI_MSTR_TRANSMIT_VAL(*current++);
     712:	21 91       	ld	r18, Z+
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     714:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <_ZN4RF2413write_payloadEPKvhh+0x5c>
	return SPDR;
     71c:	2e b5       	in	r18, 0x2e	; 46
	status = *prx; // status is 1st byte of receive buffer
	
	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( writeType );
	while ( data_len-- ) {
     71e:	91 50       	subi	r25, 0x01	; 1
     720:	c0 f7       	brcc	.-16     	; 0x712 <_ZN4RF2413write_payloadEPKvhh+0x58>
		AVR_SPI_MSTR_TRANSMIT_VAL(*current++);
	}
	while ( blank_len-- ) {
     722:	9f ef       	ldi	r25, 0xFF	; 255
     724:	90 0f       	add	r25, r16
     726:	00 23       	and	r16, r16
     728:	39 f0       	breq	.+14     	; 0x738 <_ZN4RF2413write_payloadEPKvhh+0x7e>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     72a:	1e bc       	out	0x2e, r1	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     72c:	0d b4       	in	r0, 0x2d	; 45
     72e:	07 fe       	sbrs	r0, 7
     730:	fd cf       	rjmp	.-6      	; 0x72c <_ZN4RF2413write_payloadEPKvhh+0x72>
	return SPDR;
     732:	2e b5       	in	r18, 0x2e	; 46
     734:	91 50       	subi	r25, 0x01	; 1
     736:	c8 f7       	brcc	.-14     	; 0x72a <_ZN4RF2413write_payloadEPKvhh+0x70>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	ce 01       	movw	r24, r28
     73c:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     740:	8f 2d       	mov	r24, r15
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	08 95       	ret

00000752 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	d6 2e       	mov	r13, r22
     764:	e7 2e       	mov	r14, r23
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);

  if(data_len > payload_size) data_len = payload_size;
     766:	0b 81       	ldd	r16, Y+3	; 0x03
     768:	14 2f       	mov	r17, r20
     76a:	04 17       	cp	r16, r20
     76c:	08 f4       	brcc	.+2      	; 0x770 <_ZN4RF2412read_payloadEPvh+0x1e>
     76e:	10 2f       	mov	r17, r16
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     770:	8c 81       	ldd	r24, Y+4	; 0x04
     772:	81 11       	cpse	r24, r1
     774:	02 c0       	rjmp	.+4      	; 0x77a <_ZN4RF2412read_payloadEPvh+0x28>
     776:	01 1b       	sub	r16, r17
     778:	01 c0       	rjmp	.+2      	; 0x77c <_ZN4RF2412read_payloadEPvh+0x2a>
     77a:	00 e0       	ldi	r16, 0x00	; 0
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     77c:	84 b1       	in	r24, 0x04	; 4
     77e:	8c 62       	ori	r24, 0x2C	; 44
     780:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     782:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     784:	8c b5       	in	r24, 0x2c	; 44
     786:	80 65       	ori	r24, 0x50	; 80
     788:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	ce 01       	movw	r24, r28
     78e:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     792:	81 e6       	ldi	r24, 0x61	; 97
     794:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     796:	0d b4       	in	r0, 0x2d	; 45
     798:	07 fe       	sbrs	r0, 7
     79a:	fd cf       	rjmp	.-6      	; 0x796 <_ZN4RF2412read_payloadEPvh+0x44>
	return SPDR;
     79c:	fe b4       	in	r15, 0x2e	; 46
	*current = *prx;

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( R_RX_PAYLOAD );
	while ( data_len-- ) {
     79e:	9f ef       	ldi	r25, 0xFF	; 255
     7a0:	91 0f       	add	r25, r17
     7a2:	11 23       	and	r17, r17
     7a4:	59 f0       	breq	.+22     	; 0x7bc <_ZN4RF2412read_payloadEPvh+0x6a>
     7a6:	ed 2d       	mov	r30, r13
     7a8:	fe 2d       	mov	r31, r14
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	3e bd       	out	0x2e, r19	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <_ZN4RF2412read_payloadEPvh+0x5c>
	return SPDR;
     7b4:	2e b5       	in	r18, 0x2e	; 46
		*current++ = AVR_SPI_MSTR_TRANSMIT_VAL(0xFF);
     7b6:	21 93       	st	Z+, r18
	*current = *prx;

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( R_RX_PAYLOAD );
	while ( data_len-- ) {
     7b8:	91 50       	subi	r25, 0x01	; 1
     7ba:	c0 f7       	brcc	.-16     	; 0x7ac <_ZN4RF2412read_payloadEPvh+0x5a>
		*current++ = AVR_SPI_MSTR_TRANSMIT_VAL(0xFF);
	}
	while ( blank_len-- ) {
     7bc:	9f ef       	ldi	r25, 0xFF	; 255
     7be:	90 0f       	add	r25, r16
     7c0:	00 23       	and	r16, r16
     7c2:	41 f0       	breq	.+16     	; 0x7d4 <_ZN4RF2412read_payloadEPvh+0x82>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     7c8:	0d b4       	in	r0, 0x2d	; 45
     7ca:	07 fe       	sbrs	r0, 7
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <_ZN4RF2412read_payloadEPvh+0x76>
	return SPDR;
     7ce:	3e b5       	in	r19, 0x2e	; 46
     7d0:	91 50       	subi	r25, 0x01	; 1
     7d2:	c8 f7       	brcc	.-14     	; 0x7c6 <_ZN4RF2412read_payloadEPvh+0x74>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     7dc:	8f 2d       	mov	r24, r15
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	08 95       	ret

000007ee <_ZN4RF248spiTransEh>:
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
     7f6:	16 2f       	mov	r17, r22
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     7f8:	84 b1       	in	r24, 0x04	; 4
     7fa:	8c 62       	ori	r24, 0x2C	; 44
     7fc:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     7fe:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     800:	8c b5       	in	r24, 0x2c	; 44
     802:	80 65       	ori	r24, 0x50	; 80
     804:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     80e:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     810:	0d b4       	in	r0, 0x2d	; 45
     812:	07 fe       	sbrs	r0, 7
     814:	fd cf       	rjmp	.-6      	; 0x810 <_ZN4RF248spiTransEh+0x22>
	return SPDR;
     816:	1e b5       	in	r17, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     820:	81 2f       	mov	r24, r17
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	08 95       	ret

0000082a <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
     82a:	62 ee       	ldi	r22, 0xE2	; 226
     82c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN4RF248spiTransEh>
}
     830:	08 95       	ret

00000832 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
     832:	61 ee       	ldi	r22, 0xE1	; 225
     834:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN4RF248spiTransEh>
}
     838:	08 95       	ret

0000083a <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(NOP);
     83a:	6f ef       	ldi	r22, 0xFF	; 255
     83c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN4RF248spiTransEh>
}
     840:	08 95       	ret

00000842 <_ZN4RF24C1Ehh>:
{
	pipe0_reading_address[0]=0;
}
/****************************************************************************/

RF24::RF24(uint8_t _cepin, uint8_t _cspin):
     842:	fc 01       	movw	r30, r24
  ce_pin(_cepin), csn_pin(_cspin), p_variant(false),
  payload_size(32), dynamic_payloads_enabled(false), addr_width(5)//,pipe0_reading_address(0)
     844:	60 83       	st	Z, r22
     846:	41 83       	std	Z+1, r20	; 0x01
     848:	12 82       	std	Z+2, r1	; 0x02
     84a:	80 e2       	ldi	r24, 0x20	; 32
     84c:	83 83       	std	Z+3, r24	; 0x03
     84e:	14 82       	std	Z+4, r1	; 0x04
     850:	85 e0       	ldi	r24, 0x05	; 5
     852:	82 87       	std	Z+10, r24	; 0x0a
{
  pipe0_reading_address[0]=0;
     854:	15 82       	std	Z+5, r1	; 0x05
     856:	08 95       	ret

00000858 <_ZN4RF2410setChannelEh>:
#endif

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     858:	46 2f       	mov	r20, r22
  const uint8_t max_channel = 127;
  write_register(RF_CH,rf24_min(channel,max_channel));
     85a:	60 38       	cpi	r22, 0x80	; 128
     85c:	08 f0       	brcs	.+2      	; 0x860 <_ZN4RF2410setChannelEh+0x8>
     85e:	4f e7       	ldi	r20, 0x7F	; 127
     860:	65 e0       	ldi	r22, 0x05	; 5
     862:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
     866:	08 95       	ret

00000868 <_ZN4RF2413stopListeningEv>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::stopListening(void)
{  
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
  ce(LOW);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4RF242ceEb>
     874:	8f e8       	ldi	r24, 0x8F	; 143
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <_ZN4RF2413stopListeningEv+0x10>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <_ZN4RF2413stopListeningEv+0x16>
     87e:	00 00       	nop
	delayMicroseconds(200);
 #else
delayMicroseconds(txRxDelay);
 #endif 
  
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
     880:	6d e1       	ldi	r22, 0x1D	; 29
     882:	ce 01       	movw	r24, r28
     884:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     888:	81 ff       	sbrs	r24, 1
     88a:	09 c0       	rjmp	.+18     	; 0x89e <_ZN4RF2413stopListeningEv+0x36>
     88c:	8f e8       	ldi	r24, 0x8F	; 143
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <_ZN4RF2413stopListeningEv+0x28>
     894:	00 c0       	rjmp	.+0      	; 0x896 <_ZN4RF2413stopListeningEv+0x2e>
     896:	00 00       	nop
     #if defined (__AVR__)
     delayMicroseconds(200);
     #else
     delayMicroseconds(txRxDelay);
     #endif
	flush_tx();
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 19 04 	call	0x832	; 0x832 <_ZN4RF248flush_txEv>
  }
  //flush_rx();
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	ce 01       	movw	r24, r28
     8a2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     8a6:	48 2f       	mov	r20, r24
     8a8:	4e 7f       	andi	r20, 0xFE	; 254
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	ce 01       	movw	r24, r28
     8ae:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
  if (ce_pin == csn_pin) {
    powerDown();
	powerUp();
  }
  #endif
  write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     8ba:	e4 e7       	ldi	r30, 0x74	; 116
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	e4 91       	lpm	r30, Z
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	a9 01       	movw	r20, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <_ZN4RF2413stopListeningEv+0x64>
     8c8:	44 0f       	add	r20, r20
     8ca:	55 1f       	adc	r21, r21
     8cc:	ea 95       	dec	r30
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <_ZN4RF2413stopListeningEv+0x60>
     8d0:	fa 01       	movw	r30, r20
     8d2:	48 2f       	mov	r20, r24
     8d4:	4e 2b       	or	r20, r30
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	ce 01       	movw	r24, r28
     8da:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
  
  //delayMicroseconds(100);

}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	ec 01       	movw	r28, r24
   uint8_t cfg = read_register(CONFIG);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
     8f0:	81 fd       	sbrc	r24, 1
     8f2:	10 c0       	rjmp	.+32     	; 0x914 <__stack+0x15>
      write_register(CONFIG,read_register(CONFIG) | _BV(PWR_UP));
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	ce 01       	movw	r24, r28
     8f8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     8fc:	48 2f       	mov	r20, r24
     8fe:	42 60       	ori	r20, 0x02	; 2
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	ce 01       	movw	r24, r28
     904:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     908:	8f e0       	ldi	r24, 0x0F	; 15
     90a:	97 e2       	ldi	r25, 0x27	; 39
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0x13>
     912:	00 00       	nop
	  _delay_ms(5);
	  #else
      delay(5);
	  #endif
   }
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <_ZN4RF2414startFastWriteEPKvhbb>:
//Per the documentation, we want to set PTX Mode when not listening. Then all we do is write data and set CE high
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite( const void* buf, uint8_t len, const bool multicast, bool startTx){ //TMRh20
     91a:	0f 93       	push	r16
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24

	//write_payload( buf,len);
	write_payload( buf, len,multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD ) ;
     922:	22 23       	and	r18, r18
     924:	11 f0       	breq	.+4      	; 0x92a <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     926:	20 eb       	ldi	r18, 0xB0	; 176
     928:	01 c0       	rjmp	.+2      	; 0x92c <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     92a:	20 ea       	ldi	r18, 0xA0	; 160
     92c:	ce 01       	movw	r24, r28
     92e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN4RF2413write_payloadEPKvhh>
	if(startTx){
     932:	00 23       	and	r16, r16
     934:	21 f0       	breq	.+8      	; 0x93e <_ZN4RF2414startFastWriteEPKvhbb+0x24>
		ce(HIGH);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4RF242ceEb>
	}

}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <_ZN4RF245writeEPKvhb>:
#endif
/******************************************************************/

//Similar to the previous write, clears the interrupt flags
bool RF24::write( const void* buf, uint8_t len, const bool multicast )
{
     946:	0f 93       	push	r16
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ec 01       	movw	r28, r24
	//Start Writing
	startFastWrite(buf,len,multicast);
     94e:	01 e0       	ldi	r16, 0x01	; 1
     950:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2414startFastWriteEPKvhbb>
	//Wait until complete or failed
	#if defined (FAILURE_HANDLING) || defined (RF24_LINUX)
		uint32_t timer = millis();
	#endif 
	
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) { 
     954:	ce 01       	movw	r24, r28
     956:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2410get_statusEv>
     95a:	80 73       	andi	r24, 0x30	; 48
     95c:	d9 f3       	breq	.-10     	; 0x954 <_ZN4RF245writeEPKvhb+0xe>
				#endif
			}
		#endif
	}
    
	ce(LOW);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	ce 01       	movw	r24, r28
     962:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4RF242ceEb>

	uint8_t status = write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     966:	40 e7       	ldi	r20, 0x70	; 112
     968:	67 e0       	ldi	r22, 0x07	; 7
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

  //Max retries exceeded
  if( status & _BV(MAX_RT)){
     970:	84 ff       	sbrs	r24, 4
     972:	05 c0       	rjmp	.+10     	; 0x97e <_ZN4RF245writeEPKvhb+0x38>
  	flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     974:	ce 01       	movw	r24, r28
     976:	0e 94 19 04 	call	0x832	; 0x832 <_ZN4RF248flush_txEv>
  	return 0;
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	01 c0       	rjmp	.+2      	; 0x980 <_ZN4RF245writeEPKvhb+0x3a>
  }
	//TX OK 1 or 0
  return 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <_ZN4RF245writeEPKvh>:

bool RF24::write( const void* buf, uint8_t len ){
	return write(buf,len,0);
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN4RF245writeEPKvhb>
}
     98e:	08 95       	ret

00000990 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
     99a:	8b 01       	movw	r16, r22
  if (!( read_register(FIFO_STATUS) & _BV(RX_EMPTY) )){
     99c:	67 e1       	ldi	r22, 0x17	; 23
     99e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     9a2:	80 fd       	sbrc	r24, 0
     9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <_ZN4RF249availableEPh+0x32>

    // If the caller wants the pipe number, include that
    if ( pipe_num ){
     9a6:	01 15       	cp	r16, r1
     9a8:	11 05       	cpc	r17, r1
     9aa:	69 f0       	breq	.+26     	; 0x9c6 <_ZN4RF249availableEPh+0x36>
	  uint8_t status = get_status();
     9ac:	ce 01       	movw	r24, r28
     9ae:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2410get_statusEv>
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	95 95       	asr	r25
     9b6:	87 95       	ror	r24
     9b8:	87 70       	andi	r24, 0x07	; 7
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 83       	st	Z, r24
  	}
  	return 1;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <_ZN4RF249availableEPh+0x38>
  }


  return 0;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <_ZN4RF249availableEPh+0x38>
    // If the caller wants the pipe number, include that
    if ( pipe_num ){
	  uint8_t status = get_status();
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
  	}
  	return 1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1


  return 0;


}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	08 95       	ret

000009d2 <_ZN4RF249availableEv>:

/****************************************************************************/

bool RF24::available(void)
{
  return available(NULL);
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN4RF249availableEPh>
}
     9da:	08 95       	ret

000009dc <_ZN4RF244readEPvh>:

}

/****************************************************************************/

void RF24::read( void* buf, uint8_t len ){
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24

  // Fetch the payload
  read_payload( buf, len );
     9e2:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN4RF2412read_payloadEPvh>

  //Clear the two possible interrupt flags with one command
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS) );
     9e6:	40 e7       	ldi	r20, 0x70	; 112
     9e8:	67 e0       	ldi	r22, 0x07	; 7
     9ea:	ce 01       	movw	r24, r28
     9ec:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <_ZN4RF2415openWritingPipeEPKh>:
  write_register(RX_PW_P0,payload_size);
}

/****************************************************************************/
void RF24::openWritingPipe(const uint8_t *address)
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	8b 01       	movw	r16, r22
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0,address, addr_width);
     a02:	2a 85       	ldd	r18, Y+10	; 0x0a
     a04:	ab 01       	movw	r20, r22
     a06:	6a e0       	ldi	r22, 0x0A	; 10
     a08:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN4RF2414write_registerEhPKhh>
  write_register(TX_ADDR, address, addr_width);
     a0c:	2a 85       	ldd	r18, Y+10	; 0x0a
     a0e:	a8 01       	movw	r20, r16
     a10:	60 e1       	ldi	r22, 0x10	; 16
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN4RF2414write_registerEhPKhh>

  //const uint8_t max_payload_size = 32;
  //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
  write_register(RX_PW_P0,payload_size);
     a18:	4b 81       	ldd	r20, Y+3	; 0x03
     a1a:	61 e1       	ldi	r22, 0x11	; 17
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <_ZN4RF2415openReadingPipeEhPKh>:
}

/****************************************************************************/

void RF24::openReadingPipe(uint8_t child, const uint8_t *address)
{
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ec 01       	movw	r28, r24
     a38:	f6 2e       	mov	r15, r22
     a3a:	8a 01       	movw	r16, r20
  // If this is pipe 0, cache the address.  This is needed because
  // openWritingPipe() will overwrite the pipe 0 address, so
  // startListening() will have to restore it.
  if (child == 0){
     a3c:	61 11       	cpse	r22, r1
     a3e:	07 c0       	rjmp	.+14     	; 0xa4e <_ZN4RF2415openReadingPipeEhPKh+0x22>
    memcpy(pipe0_reading_address,address,addr_width);
     a40:	4a 85       	ldd	r20, Y+10	; 0x0a
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	b8 01       	movw	r22, r16
     a46:	05 96       	adiw	r24, 0x05	; 5
     a48:	0e 94 96 06 	call	0xd2c	; 0xd2c <memcpy>
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <_ZN4RF2415openReadingPipeEhPKh+0x30>
  }
  if (child <= 6)
     a4e:	66 e0       	ldi	r22, 0x06	; 6
     a50:	6f 15       	cp	r22, r15
     a52:	08 f4       	brcc	.+2      	; 0xa56 <_ZN4RF2415openReadingPipeEhPKh+0x2a>
     a54:	36 c0       	rjmp	.+108    	; 0xac2 <_ZN4RF2415openReadingPipeEhPKh+0x96>
  {
    // For pipes 2-5, only write the LSB
    if ( child < 2 ){
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	7f 15       	cp	r23, r15
     a5a:	58 f0       	brcs	.+22     	; 0xa72 <_ZN4RF2415openReadingPipeEhPKh+0x46>
      write_register(pgm_read_byte(&child_pipe[child]), address, addr_width);
     a5c:	ef 2d       	mov	r30, r15
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	e2 59       	subi	r30, 0x92	; 146
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	64 91       	lpm	r22, Z
     a66:	2a 85       	ldd	r18, Y+10	; 0x0a
     a68:	a8 01       	movw	r20, r16
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN4RF2414write_registerEhPKhh>
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <_ZN4RF2415openReadingPipeEhPKh+0x56>
    }else{
      write_register(pgm_read_byte(&child_pipe[child]), address, 1);
     a72:	ef 2d       	mov	r30, r15
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	e2 59       	subi	r30, 0x92	; 146
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	64 91       	lpm	r22, Z
     a7c:	21 e0       	ldi	r18, 0x01	; 1
     a7e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN4RF2414write_registerEhPKhh>
	}
    write_register(pgm_read_byte(&child_payload_size[child]),payload_size);
     a82:	0f 2d       	mov	r16, r15
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	f8 01       	movw	r30, r16
     a88:	e8 59       	subi	r30, 0x98	; 152
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	64 91       	lpm	r22, Z
     a8e:	4b 81       	ldd	r20, Y+3	; 0x03
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	ce 01       	movw	r24, r28
     a9a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     a9e:	f8 01       	movw	r30, r16
     aa0:	ec 58       	subi	r30, 0x8C	; 140
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	44 91       	lpm	r20, Z
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	b9 01       	movw	r22, r18
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <_ZN4RF2415openReadingPipeEhPKh+0x86>
     aae:	66 0f       	add	r22, r22
     ab0:	77 1f       	adc	r23, r23
     ab2:	4a 95       	dec	r20
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <_ZN4RF2415openReadingPipeEhPKh+0x82>
     ab6:	ab 01       	movw	r20, r22
     ab8:	48 2b       	or	r20, r24
     aba:	62 e0       	ldi	r22, 0x02	; 2
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

  }
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	08 95       	ret

00000ace <_ZN4RF2416closeReadingPipeEh>:

/****************************************************************************/

void RF24::closeReadingPipe( uint8_t pipe )
{
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	16 2f       	mov	r17, r22
  write_register(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     ad8:	62 e0       	ldi	r22, 0x02	; 2
     ada:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     ade:	e1 2f       	mov	r30, r17
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ec 58       	subi	r30, 0x8C	; 140
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	e4 91       	lpm	r30, Z
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	a9 01       	movw	r20, r18
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <_ZN4RF2416closeReadingPipeEh+0x26>
     af0:	44 0f       	add	r20, r20
     af2:	55 1f       	adc	r21, r21
     af4:	ea 95       	dec	r30
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <_ZN4RF2416closeReadingPipeEh+0x22>
     af8:	fa 01       	movw	r30, r20
     afa:	e0 95       	com	r30
     afc:	4e 2f       	mov	r20, r30
     afe:	48 23       	and	r20, r24
     b00:	62 e0       	ldi	r22, 0x02	; 2
     b02:	ce 01       	movw	r24, r28
     b04:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	08 95       	ret

00000b10 <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
 #if !defined (RF24_TINY) && ! defined(LITTLEWIRE)
  powerUp();
     b16:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN4RF247powerUpEv>
 #endif
  write_register(CONFIG, read_register(CONFIG) | _BV(PRIM_RX));
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     b22:	48 2f       	mov	r20, r24
     b24:	41 60       	ori	r20, 0x01	; 1
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	ce 01       	movw	r24, r28
     b2a:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
  write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     b2e:	40 e7       	ldi	r20, 0x70	; 112
     b30:	67 e0       	ldi	r22, 0x07	; 7
     b32:	ce 01       	movw	r24, r28
     b34:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
  ce(HIGH);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4RF242ceEb>
  // Restore the pipe0 adddress, if exists
  if (pipe0_reading_address[0] > 0){
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	88 23       	and	r24, r24
     b44:	49 f0       	breq	.+18     	; 0xb58 <_ZN4RF2414startListeningEv+0x48>
    write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);	
     b46:	2a 85       	ldd	r18, Y+10	; 0x0a
     b48:	ae 01       	movw	r20, r28
     b4a:	4b 5f       	subi	r20, 0xFB	; 251
     b4c:	5f 4f       	sbci	r21, 0xFF	; 255
     b4e:	6a e0       	ldi	r22, 0x0A	; 10
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN4RF2414write_registerEhPKhh>
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <_ZN4RF2414startListeningEv+0x50>
  }else{
	closeReadingPipe(0);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 67 05 	call	0xace	; 0xace <_ZN4RF2416closeReadingPipeEh>
  }

  // Flush buffers
  //flush_rx();
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
     b60:	6d e1       	ldi	r22, 0x1D	; 29
     b62:	ce 01       	movw	r24, r28
     b64:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     b68:	81 ff       	sbrs	r24, 1
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <_ZN4RF2414startListeningEv+0x62>
	flush_tx();
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 19 04 	call	0x832	; 0x832 <_ZN4RF248flush_txEv>
  }

  // Go!
  //delayMicroseconds(100);
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     b7e:	84 b1       	in	r24, 0x04	; 4
     b80:	8c 62       	ori	r24, 0x2C	; 44
     b82:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     b84:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     b86:	8c b5       	in	r24, 0x2c	; 44
     b88:	80 65       	ori	r24, 0x50	; 80
     b8a:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	ce 01       	movw	r24, r28
     b90:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     b94:	80 e5       	ldi	r24, 0x50	; 80
     b96:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     b98:	0d b4       	in	r0, 0x2d	; 45
     b9a:	07 fe       	sbrs	r0, 7
     b9c:	fd cf       	rjmp	.-6      	; 0xb98 <_ZN4RF2415toggle_featuresEv+0x20>
	return SPDR;
     b9e:	8e b5       	in	r24, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     ba0:	83 e7       	ldi	r24, 0x73	; 115
     ba2:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     ba4:	0d b4       	in	r0, 0x2d	; 45
     ba6:	07 fe       	sbrs	r0, 7
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <_ZN4RF2415toggle_featuresEv+0x2c>
	return SPDR;
     baa:	8e b5       	in	r24, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	ce 01       	movw	r24, r28
     bb0:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
  #endif

}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
     bc2:	16 2f       	mov	r17, r22

  uint8_t setup = read_register(RF_SETUP) & 0b11111000;
     bc4:	66 e0       	ldi	r22, 0x06	; 6
     bc6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     bca:	88 7f       	andi	r24, 0xF8	; 248

  if(level > 3){  						// If invalid level, go to max PA
     bcc:	14 30       	cpi	r17, 0x04	; 4
     bce:	20 f4       	brcc	.+8      	; 0xbd8 <_ZN4RF2410setPALevelEh+0x1e>
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
     bd0:	41 2f       	mov	r20, r17
     bd2:	44 0f       	add	r20, r20
     bd4:	4f 5f       	subi	r20, 0xFF	; 255
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <_ZN4RF2410setPALevelEh+0x20>
{

  uint8_t setup = read_register(RF_SETUP) & 0b11111000;

  if(level > 3){  						// If invalid level, go to max PA
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
     bd8:	47 e0       	ldi	r20, 0x07	; 7
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
     bda:	48 2b       	or	r20, r24
     bdc:	66 e0       	ldi	r22, 0x06	; 6
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	08 95       	ret

00000bec <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
     bf8:	16 2f       	mov	r17, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     bfa:	66 e0       	ldi	r22, 0x06	; 6
     bfc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     c00:	87 7d       	andi	r24, 0xD7	; 215
     c02:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
  #endif
  if( speed == RF24_250KBPS )
     c04:	12 30       	cpi	r17, 0x02	; 2
     c06:	59 f4       	brne	.+22     	; 0xc1e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x32>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     c08:	80 62       	ori	r24, 0x20	; 32
     c0a:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
     c0c:	0b e9       	ldi	r16, 0x9B	; 155
     c0e:	10 e0       	ldi	r17, 0x00	; 0
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	0b 87       	std	Y+11, r16	; 0x0b
     c16:	1c 87       	std	Y+12, r17	; 0x0c
     c18:	2d 87       	std	Y+13, r18	; 0x0d
     c1a:	3e 87       	std	Y+14, r19	; 0x0e
     c1c:	15 c0       	rjmp	.+42     	; 0xc48 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     c1e:	11 30       	cpi	r17, 0x01	; 1
     c20:	49 f0       	breq	.+18     	; 0xc34 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
     c22:	05 e5       	ldi	r16, 0x55	; 85
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	0b 87       	std	Y+11, r16	; 0x0b
     c2c:	1c 87       	std	Y+12, r17	; 0x0c
     c2e:	2d 87       	std	Y+13, r18	; 0x0d
     c30:	3e 87       	std	Y+14, r19	; 0x0e
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     c34:	88 60       	ori	r24, 0x08	; 8
     c36:	f8 2e       	mov	r15, r24
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txRxDelay=190;
      #else //16Mhz Arduino	  
	  txRxDelay=65;
     c38:	01 e4       	ldi	r16, 0x41	; 65
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	0b 87       	std	Y+11, r16	; 0x0b
     c42:	1c 87       	std	Y+12, r17	; 0x0c
     c44:	2d 87       	std	Y+13, r18	; 0x0d
     c46:	3e 87       	std	Y+14, r19	; 0x0e
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
     c48:	4f 2d       	mov	r20, r15
     c4a:	66 e0       	ldi	r22, 0x06	; 6
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     c52:	66 e0       	ldi	r22, 0x06	; 6
     c54:	ce 01       	movw	r24, r28
     c56:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	f8 12       	cpse	r15, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
  {
    result = true;
  }
  return result;
}
     c60:	89 2f       	mov	r24, r25
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	08 95       	ret

00000c6e <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ec 01       	movw	r28, r24
  #elif defined(LITTLEWIRE)
    pinMode(csn_pin,OUTPUT);
    _SPI.begin();
    csn(HIGH);
  #elif defined(__AVR__)
	CE_PORT |= (1<<CE_BIT);
     c74:	5f 9a       	sbi	0x0b, 7	; 11
	CSN_PORT|=(1<<CSN_BIT);
     c76:	28 9a       	sbi	0x05, 0	; 5
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     c78:	84 b1       	in	r24, 0x04	; 4
     c7a:	8c 62       	ori	r24, 0x2C	; 44
     c7c:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     c7e:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     c80:	8c b5       	in	r24, 0x2c	; 44
     c82:	80 65       	ori	r24, 0x50	; 80
     c84:	8c bd       	out	0x2c, r24	; 44
	spi_master_initialize();
	csn(HIGH);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN4RF243csnEb>
     c8e:	8f e0       	ldi	r24, 0x0F	; 15
     c90:	97 e2       	ldi	r25, 0x27	; 39
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <_ZN4RF245beginEv+0x24>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <_ZN4RF245beginEv+0x2a>
     c98:	00 00       	nop
  #else
  delay( 5 ) ;
  #endif

  // Reset CONFIG and enable 16-bit CRC.
  write_register( CONFIG, 0b00001100 ) ;
     c9a:	4c e0       	ldi	r20, 0x0C	; 12
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     ca4:	4f e5       	ldi	r20, 0x5F	; 95
     ca6:	64 e0       	ldi	r22, 0x04	; 4
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN4RF2411setDataRateE15rf24_datarate_e>
     cb6:	88 23       	and	r24, r24
     cb8:	11 f0       	breq	.+4      	; 0xcbe <_ZN4RF245beginEv+0x50>
  {
    p_variant = true ;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	8a 83       	std	Y+2, r24	; 0x02
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     cc6:	ce 01       	movw	r24, r28
     cc8:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	6d e1       	ldi	r22, 0x1D	; 29
     cd0:	ce 01       	movw	r24, r28
     cd2:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	6c e1       	ldi	r22, 0x1C	; 28
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     ce0:	40 e7       	ldi	r20, 0x70	; 112
     ce2:	67 e0       	ldi	r22, 0x07	; 7
     ce4:	ce 01       	movw	r24, r28
     ce6:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     cea:	6c e4       	ldi	r22, 0x4C	; 76
     cec:	ce 01       	movw	r24, r28
     cee:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     cf2:	ce 01       	movw	r24, r28
     cf4:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN4RF248flush_rxEv>
  flush_tx();
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 19 04 	call	0x832	; 0x832 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     cfe:	ce 01       	movw	r24, r28
     d00:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	ce 01       	movw	r24, r28
     d08:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN4RF2413read_registerEh>
     d0c:	48 2f       	mov	r20, r24
     d0e:	4e 7f       	andi	r20, 0xFE	; 254
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	ce 01       	movw	r24, r28
     d14:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
}
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <__tablejump2__>:
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31

00000d24 <__tablejump__>:
     d24:	05 90       	lpm	r0, Z+
     d26:	f4 91       	lpm	r31, Z
     d28:	e0 2d       	mov	r30, r0
     d2a:	09 94       	ijmp

00000d2c <memcpy>:
     d2c:	fb 01       	movw	r30, r22
     d2e:	dc 01       	movw	r26, r24
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <memcpy+0xa>
     d32:	01 90       	ld	r0, Z+
     d34:	0d 92       	st	X+, r0
     d36:	41 50       	subi	r20, 0x01	; 1
     d38:	50 40       	sbci	r21, 0x00	; 0
     d3a:	d8 f7       	brcc	.-10     	; 0xd32 <memcpy+0x6>
     d3c:	08 95       	ret

00000d3e <fdevopen>:
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
     d48:	8b 01       	movw	r16, r22
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	31 f4       	brne	.+12     	; 0xd5a <fdevopen+0x1c>
     d4e:	61 15       	cp	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <fdevopen+0x1c>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	38 c0       	rjmp	.+112    	; 0xdca <fdevopen+0x8c>
     d5a:	6e e0       	ldi	r22, 0x0E	; 14
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 c6 0b 	call	0x178c	; 0x178c <calloc>
     d66:	fc 01       	movw	r30, r24
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a1 f3       	breq	.-24     	; 0xd54 <fdevopen+0x16>
     d6c:	80 e8       	ldi	r24, 0x80	; 128
     d6e:	83 83       	std	Z+3, r24	; 0x03
     d70:	01 15       	cp	r16, r1
     d72:	11 05       	cpc	r17, r1
     d74:	71 f0       	breq	.+28     	; 0xd92 <fdevopen+0x54>
     d76:	13 87       	std	Z+11, r17	; 0x0b
     d78:	02 87       	std	Z+10, r16	; 0x0a
     d7a:	81 e8       	ldi	r24, 0x81	; 129
     d7c:	83 83       	std	Z+3, r24	; 0x03
     d7e:	80 91 88 02 	lds	r24, 0x0288
     d82:	90 91 89 02 	lds	r25, 0x0289
     d86:	89 2b       	or	r24, r25
     d88:	21 f4       	brne	.+8      	; 0xd92 <fdevopen+0x54>
     d8a:	f0 93 89 02 	sts	0x0289, r31
     d8e:	e0 93 88 02 	sts	0x0288, r30
     d92:	20 97       	sbiw	r28, 0x00	; 0
     d94:	c9 f0       	breq	.+50     	; 0xdc8 <fdevopen+0x8a>
     d96:	d1 87       	std	Z+9, r29	; 0x09
     d98:	c0 87       	std	Z+8, r28	; 0x08
     d9a:	83 81       	ldd	r24, Z+3	; 0x03
     d9c:	82 60       	ori	r24, 0x02	; 2
     d9e:	83 83       	std	Z+3, r24	; 0x03
     da0:	80 91 8a 02 	lds	r24, 0x028A
     da4:	90 91 8b 02 	lds	r25, 0x028B
     da8:	89 2b       	or	r24, r25
     daa:	71 f4       	brne	.+28     	; 0xdc8 <fdevopen+0x8a>
     dac:	f0 93 8b 02 	sts	0x028B, r31
     db0:	e0 93 8a 02 	sts	0x028A, r30
     db4:	80 91 8c 02 	lds	r24, 0x028C
     db8:	90 91 8d 02 	lds	r25, 0x028D
     dbc:	89 2b       	or	r24, r25
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <fdevopen+0x8a>
     dc0:	f0 93 8d 02 	sts	0x028D, r31
     dc4:	e0 93 8c 02 	sts	0x028C, r30
     dc8:	cf 01       	movw	r24, r30
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <printf>:
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x20>
     de0:	fe 01       	movw	r30, r28
     de2:	35 96       	adiw	r30, 0x05	; 5
     de4:	61 91       	ld	r22, Z+
     de6:	71 91       	ld	r23, Z+
     de8:	af 01       	movw	r20, r30
     dea:	80 91 8a 02 	lds	r24, 0x028A
     dee:	90 91 8b 02 	lds	r25, 0x028B
     df2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <vfprintf>
     df6:	e2 e0       	ldi	r30, 0x02	; 2
     df8:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x20>

00000dfc <puts>:
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	e0 91 8a 02 	lds	r30, 0x028A
     e08:	f0 91 8b 02 	lds	r31, 0x028B
     e0c:	23 81       	ldd	r18, Z+3	; 0x03
     e0e:	21 ff       	sbrs	r18, 1
     e10:	1b c0       	rjmp	.+54     	; 0xe48 <puts+0x4c>
     e12:	ec 01       	movw	r28, r24
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	89 91       	ld	r24, Y+
     e1a:	60 91 8a 02 	lds	r22, 0x028A
     e1e:	70 91 8b 02 	lds	r23, 0x028B
     e22:	db 01       	movw	r26, r22
     e24:	18 96       	adiw	r26, 0x08	; 8
     e26:	ed 91       	ld	r30, X+
     e28:	fc 91       	ld	r31, X
     e2a:	19 97       	sbiw	r26, 0x09	; 9
     e2c:	88 23       	and	r24, r24
     e2e:	31 f0       	breq	.+12     	; 0xe3c <puts+0x40>
     e30:	09 95       	icall
     e32:	89 2b       	or	r24, r25
     e34:	89 f3       	breq	.-30     	; 0xe18 <puts+0x1c>
     e36:	0f ef       	ldi	r16, 0xFF	; 255
     e38:	1f ef       	ldi	r17, 0xFF	; 255
     e3a:	ee cf       	rjmp	.-36     	; 0xe18 <puts+0x1c>
     e3c:	8a e0       	ldi	r24, 0x0A	; 10
     e3e:	09 95       	icall
     e40:	89 2b       	or	r24, r25
     e42:	11 f4       	brne	.+4      	; 0xe48 <puts+0x4c>
     e44:	c8 01       	movw	r24, r16
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <puts+0x50>
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <scanf>:
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f7 e0       	ldi	r31, 0x07	; 7
     e5e:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x20>
     e62:	fe 01       	movw	r30, r28
     e64:	35 96       	adiw	r30, 0x05	; 5
     e66:	61 91       	ld	r22, Z+
     e68:	71 91       	ld	r23, Z+
     e6a:	af 01       	movw	r20, r30
     e6c:	80 91 88 02 	lds	r24, 0x0288
     e70:	90 91 89 02 	lds	r25, 0x0289
     e74:	0e 94 8f 0a 	call	0x151e	; 0x151e <vfscanf>
     e78:	e2 e0       	ldi	r30, 0x02	; 2
     e7a:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x20>

00000e7e <vfprintf>:
     e7e:	ac e0       	ldi	r26, 0x0C	; 12
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e4       	ldi	r30, 0x45	; 69
     e84:	f7 e0       	ldi	r31, 0x07	; 7
     e86:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__prologue_saves__>
     e8a:	7c 01       	movw	r14, r24
     e8c:	6b 01       	movw	r12, r22
     e8e:	8a 01       	movw	r16, r20
     e90:	fc 01       	movw	r30, r24
     e92:	17 82       	std	Z+7, r1	; 0x07
     e94:	16 82       	std	Z+6, r1	; 0x06
     e96:	83 81       	ldd	r24, Z+3	; 0x03
     e98:	81 ff       	sbrs	r24, 1
     e9a:	bd c1       	rjmp	.+890    	; 0x1216 <vfprintf+0x398>
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	4c 01       	movw	r8, r24
     ea2:	f7 01       	movw	r30, r14
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	f6 01       	movw	r30, r12
     ea8:	93 fd       	sbrc	r25, 3
     eaa:	85 91       	lpm	r24, Z+
     eac:	93 ff       	sbrs	r25, 3
     eae:	81 91       	ld	r24, Z+
     eb0:	6f 01       	movw	r12, r30
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <vfprintf+0x3a>
     eb6:	ab c1       	rjmp	.+854    	; 0x120e <vfprintf+0x390>
     eb8:	85 32       	cpi	r24, 0x25	; 37
     eba:	39 f4       	brne	.+14     	; 0xeca <vfprintf+0x4c>
     ebc:	93 fd       	sbrc	r25, 3
     ebe:	85 91       	lpm	r24, Z+
     ec0:	93 ff       	sbrs	r25, 3
     ec2:	81 91       	ld	r24, Z+
     ec4:	6f 01       	movw	r12, r30
     ec6:	85 32       	cpi	r24, 0x25	; 37
     ec8:	29 f4       	brne	.+10     	; 0xed4 <vfprintf+0x56>
     eca:	b7 01       	movw	r22, r14
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
     ed2:	e7 cf       	rjmp	.-50     	; 0xea2 <vfprintf+0x24>
     ed4:	51 2c       	mov	r5, r1
     ed6:	31 2c       	mov	r3, r1
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	20 32       	cpi	r18, 0x20	; 32
     edc:	a0 f4       	brcc	.+40     	; 0xf06 <vfprintf+0x88>
     ede:	8b 32       	cpi	r24, 0x2B	; 43
     ee0:	69 f0       	breq	.+26     	; 0xefc <vfprintf+0x7e>
     ee2:	30 f4       	brcc	.+12     	; 0xef0 <vfprintf+0x72>
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	59 f0       	breq	.+22     	; 0xefe <vfprintf+0x80>
     ee8:	83 32       	cpi	r24, 0x23	; 35
     eea:	69 f4       	brne	.+26     	; 0xf06 <vfprintf+0x88>
     eec:	20 61       	ori	r18, 0x10	; 16
     eee:	2c c0       	rjmp	.+88     	; 0xf48 <vfprintf+0xca>
     ef0:	8d 32       	cpi	r24, 0x2D	; 45
     ef2:	39 f0       	breq	.+14     	; 0xf02 <vfprintf+0x84>
     ef4:	80 33       	cpi	r24, 0x30	; 48
     ef6:	39 f4       	brne	.+14     	; 0xf06 <vfprintf+0x88>
     ef8:	21 60       	ori	r18, 0x01	; 1
     efa:	26 c0       	rjmp	.+76     	; 0xf48 <vfprintf+0xca>
     efc:	22 60       	ori	r18, 0x02	; 2
     efe:	24 60       	ori	r18, 0x04	; 4
     f00:	23 c0       	rjmp	.+70     	; 0xf48 <vfprintf+0xca>
     f02:	28 60       	ori	r18, 0x08	; 8
     f04:	21 c0       	rjmp	.+66     	; 0xf48 <vfprintf+0xca>
     f06:	27 fd       	sbrc	r18, 7
     f08:	27 c0       	rjmp	.+78     	; 0xf58 <vfprintf+0xda>
     f0a:	30 ed       	ldi	r19, 0xD0	; 208
     f0c:	38 0f       	add	r19, r24
     f0e:	3a 30       	cpi	r19, 0x0A	; 10
     f10:	78 f4       	brcc	.+30     	; 0xf30 <vfprintf+0xb2>
     f12:	26 ff       	sbrs	r18, 6
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <vfprintf+0xa4>
     f16:	fa e0       	ldi	r31, 0x0A	; 10
     f18:	5f 9e       	mul	r5, r31
     f1a:	30 0d       	add	r19, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	53 2e       	mov	r5, r19
     f20:	13 c0       	rjmp	.+38     	; 0xf48 <vfprintf+0xca>
     f22:	8a e0       	ldi	r24, 0x0A	; 10
     f24:	38 9e       	mul	r3, r24
     f26:	30 0d       	add	r19, r0
     f28:	11 24       	eor	r1, r1
     f2a:	33 2e       	mov	r3, r19
     f2c:	20 62       	ori	r18, 0x20	; 32
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <vfprintf+0xca>
     f30:	8e 32       	cpi	r24, 0x2E	; 46
     f32:	21 f4       	brne	.+8      	; 0xf3c <vfprintf+0xbe>
     f34:	26 fd       	sbrc	r18, 6
     f36:	6b c1       	rjmp	.+726    	; 0x120e <vfprintf+0x390>
     f38:	20 64       	ori	r18, 0x40	; 64
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <vfprintf+0xca>
     f3c:	8c 36       	cpi	r24, 0x6C	; 108
     f3e:	11 f4       	brne	.+4      	; 0xf44 <vfprintf+0xc6>
     f40:	20 68       	ori	r18, 0x80	; 128
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0xca>
     f44:	88 36       	cpi	r24, 0x68	; 104
     f46:	41 f4       	brne	.+16     	; 0xf58 <vfprintf+0xda>
     f48:	f6 01       	movw	r30, r12
     f4a:	93 fd       	sbrc	r25, 3
     f4c:	85 91       	lpm	r24, Z+
     f4e:	93 ff       	sbrs	r25, 3
     f50:	81 91       	ld	r24, Z+
     f52:	6f 01       	movw	r12, r30
     f54:	81 11       	cpse	r24, r1
     f56:	c1 cf       	rjmp	.-126    	; 0xeda <vfprintf+0x5c>
     f58:	98 2f       	mov	r25, r24
     f5a:	9f 7d       	andi	r25, 0xDF	; 223
     f5c:	95 54       	subi	r25, 0x45	; 69
     f5e:	93 30       	cpi	r25, 0x03	; 3
     f60:	28 f4       	brcc	.+10     	; 0xf6c <vfprintf+0xee>
     f62:	0c 5f       	subi	r16, 0xFC	; 252
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	ff e3       	ldi	r31, 0x3F	; 63
     f68:	f9 83       	std	Y+1, r31	; 0x01
     f6a:	0d c0       	rjmp	.+26     	; 0xf86 <vfprintf+0x108>
     f6c:	83 36       	cpi	r24, 0x63	; 99
     f6e:	31 f0       	breq	.+12     	; 0xf7c <vfprintf+0xfe>
     f70:	83 37       	cpi	r24, 0x73	; 115
     f72:	71 f0       	breq	.+28     	; 0xf90 <vfprintf+0x112>
     f74:	83 35       	cpi	r24, 0x53	; 83
     f76:	09 f0       	breq	.+2      	; 0xf7a <vfprintf+0xfc>
     f78:	5b c0       	rjmp	.+182    	; 0x1030 <vfprintf+0x1b2>
     f7a:	22 c0       	rjmp	.+68     	; 0xfc0 <vfprintf+0x142>
     f7c:	f8 01       	movw	r30, r16
     f7e:	80 81       	ld	r24, Z
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	0e 5f       	subi	r16, 0xFE	; 254
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	44 24       	eor	r4, r4
     f88:	43 94       	inc	r4
     f8a:	51 2c       	mov	r5, r1
     f8c:	54 01       	movw	r10, r8
     f8e:	15 c0       	rjmp	.+42     	; 0xfba <vfprintf+0x13c>
     f90:	38 01       	movw	r6, r16
     f92:	f2 e0       	ldi	r31, 0x02	; 2
     f94:	6f 0e       	add	r6, r31
     f96:	71 1c       	adc	r7, r1
     f98:	f8 01       	movw	r30, r16
     f9a:	a0 80       	ld	r10, Z
     f9c:	b1 80       	ldd	r11, Z+1	; 0x01
     f9e:	26 ff       	sbrs	r18, 6
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x12a>
     fa2:	65 2d       	mov	r22, r5
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x12e>
     fa8:	6f ef       	ldi	r22, 0xFF	; 255
     faa:	7f ef       	ldi	r23, 0xFF	; 255
     fac:	c5 01       	movw	r24, r10
     fae:	2c 87       	std	Y+12, r18	; 0x0c
     fb0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <strnlen>
     fb4:	2c 01       	movw	r4, r24
     fb6:	83 01       	movw	r16, r6
     fb8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fba:	2f 77       	andi	r18, 0x7F	; 127
     fbc:	22 2e       	mov	r2, r18
     fbe:	17 c0       	rjmp	.+46     	; 0xfee <vfprintf+0x170>
     fc0:	38 01       	movw	r6, r16
     fc2:	f2 e0       	ldi	r31, 0x02	; 2
     fc4:	6f 0e       	add	r6, r31
     fc6:	71 1c       	adc	r7, r1
     fc8:	f8 01       	movw	r30, r16
     fca:	a0 80       	ld	r10, Z
     fcc:	b1 80       	ldd	r11, Z+1	; 0x01
     fce:	26 ff       	sbrs	r18, 6
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <vfprintf+0x15a>
     fd2:	65 2d       	mov	r22, r5
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x15e>
     fd8:	6f ef       	ldi	r22, 0xFF	; 255
     fda:	7f ef       	ldi	r23, 0xFF	; 255
     fdc:	c5 01       	movw	r24, r10
     fde:	2c 87       	std	Y+12, r18	; 0x0c
     fe0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strnlen_P>
     fe4:	2c 01       	movw	r4, r24
     fe6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe8:	20 68       	ori	r18, 0x80	; 128
     fea:	22 2e       	mov	r2, r18
     fec:	83 01       	movw	r16, r6
     fee:	23 fc       	sbrc	r2, 3
     ff0:	1b c0       	rjmp	.+54     	; 0x1028 <vfprintf+0x1aa>
     ff2:	83 2d       	mov	r24, r3
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	48 16       	cp	r4, r24
     ff8:	59 06       	cpc	r5, r25
     ffa:	b0 f4       	brcc	.+44     	; 0x1028 <vfprintf+0x1aa>
     ffc:	b7 01       	movw	r22, r14
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1006:	3a 94       	dec	r3
    1008:	f4 cf       	rjmp	.-24     	; 0xff2 <vfprintf+0x174>
    100a:	f5 01       	movw	r30, r10
    100c:	27 fc       	sbrc	r2, 7
    100e:	85 91       	lpm	r24, Z+
    1010:	27 fe       	sbrs	r2, 7
    1012:	81 91       	ld	r24, Z+
    1014:	5f 01       	movw	r10, r30
    1016:	b7 01       	movw	r22, r14
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    101e:	31 10       	cpse	r3, r1
    1020:	3a 94       	dec	r3
    1022:	f1 e0       	ldi	r31, 0x01	; 1
    1024:	4f 1a       	sub	r4, r31
    1026:	51 08       	sbc	r5, r1
    1028:	41 14       	cp	r4, r1
    102a:	51 04       	cpc	r5, r1
    102c:	71 f7       	brne	.-36     	; 0x100a <vfprintf+0x18c>
    102e:	e5 c0       	rjmp	.+458    	; 0x11fa <vfprintf+0x37c>
    1030:	84 36       	cpi	r24, 0x64	; 100
    1032:	11 f0       	breq	.+4      	; 0x1038 <vfprintf+0x1ba>
    1034:	89 36       	cpi	r24, 0x69	; 105
    1036:	39 f5       	brne	.+78     	; 0x1086 <vfprintf+0x208>
    1038:	f8 01       	movw	r30, r16
    103a:	27 ff       	sbrs	r18, 7
    103c:	07 c0       	rjmp	.+14     	; 0x104c <vfprintf+0x1ce>
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	0c 5f       	subi	r16, 0xFC	; 252
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	08 c0       	rjmp	.+16     	; 0x105c <vfprintf+0x1de>
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	88 27       	eor	r24, r24
    1052:	77 fd       	sbrc	r23, 7
    1054:	80 95       	com	r24
    1056:	98 2f       	mov	r25, r24
    1058:	0e 5f       	subi	r16, 0xFE	; 254
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	2f 76       	andi	r18, 0x6F	; 111
    105e:	b2 2e       	mov	r11, r18
    1060:	97 ff       	sbrs	r25, 7
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <vfprintf+0x1f8>
    1064:	90 95       	com	r25
    1066:	80 95       	com	r24
    1068:	70 95       	com	r23
    106a:	61 95       	neg	r22
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8f 4f       	sbci	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	20 68       	ori	r18, 0x80	; 128
    1074:	b2 2e       	mov	r11, r18
    1076:	2a e0       	ldi	r18, 0x0A	; 10
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	a4 01       	movw	r20, r8
    107c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__ultoa_invert>
    1080:	a8 2e       	mov	r10, r24
    1082:	a8 18       	sub	r10, r8
    1084:	44 c0       	rjmp	.+136    	; 0x110e <vfprintf+0x290>
    1086:	85 37       	cpi	r24, 0x75	; 117
    1088:	29 f4       	brne	.+10     	; 0x1094 <vfprintf+0x216>
    108a:	2f 7e       	andi	r18, 0xEF	; 239
    108c:	b2 2e       	mov	r11, r18
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	25 c0       	rjmp	.+74     	; 0x10de <vfprintf+0x260>
    1094:	f2 2f       	mov	r31, r18
    1096:	f9 7f       	andi	r31, 0xF9	; 249
    1098:	bf 2e       	mov	r11, r31
    109a:	8f 36       	cpi	r24, 0x6F	; 111
    109c:	c1 f0       	breq	.+48     	; 0x10ce <vfprintf+0x250>
    109e:	18 f4       	brcc	.+6      	; 0x10a6 <vfprintf+0x228>
    10a0:	88 35       	cpi	r24, 0x58	; 88
    10a2:	79 f0       	breq	.+30     	; 0x10c2 <vfprintf+0x244>
    10a4:	b4 c0       	rjmp	.+360    	; 0x120e <vfprintf+0x390>
    10a6:	80 37       	cpi	r24, 0x70	; 112
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <vfprintf+0x232>
    10aa:	88 37       	cpi	r24, 0x78	; 120
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <vfprintf+0x238>
    10ae:	af c0       	rjmp	.+350    	; 0x120e <vfprintf+0x390>
    10b0:	2f 2f       	mov	r18, r31
    10b2:	20 61       	ori	r18, 0x10	; 16
    10b4:	b2 2e       	mov	r11, r18
    10b6:	b4 fe       	sbrs	r11, 4
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <vfprintf+0x256>
    10ba:	8b 2d       	mov	r24, r11
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	b8 2e       	mov	r11, r24
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x256>
    10c2:	24 ff       	sbrs	r18, 4
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <vfprintf+0x25c>
    10c6:	9f 2f       	mov	r25, r31
    10c8:	96 60       	ori	r25, 0x06	; 6
    10ca:	b9 2e       	mov	r11, r25
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <vfprintf+0x25c>
    10ce:	28 e0       	ldi	r18, 0x08	; 8
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <vfprintf+0x260>
    10d4:	20 e1       	ldi	r18, 0x10	; 16
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x260>
    10da:	20 e1       	ldi	r18, 0x10	; 16
    10dc:	32 e0       	ldi	r19, 0x02	; 2
    10de:	f8 01       	movw	r30, r16
    10e0:	b7 fe       	sbrs	r11, 7
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <vfprintf+0x274>
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	93 81       	ldd	r25, Z+3	; 0x03
    10ec:	0c 5f       	subi	r16, 0xFC	; 252
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0x280>
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 5f       	subi	r16, 0xFE	; 254
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	a4 01       	movw	r20, r8
    1100:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__ultoa_invert>
    1104:	a8 2e       	mov	r10, r24
    1106:	a8 18       	sub	r10, r8
    1108:	fb 2d       	mov	r31, r11
    110a:	ff 77       	andi	r31, 0x7F	; 127
    110c:	bf 2e       	mov	r11, r31
    110e:	b6 fe       	sbrs	r11, 6
    1110:	0b c0       	rjmp	.+22     	; 0x1128 <vfprintf+0x2aa>
    1112:	2b 2d       	mov	r18, r11
    1114:	2e 7f       	andi	r18, 0xFE	; 254
    1116:	a5 14       	cp	r10, r5
    1118:	50 f4       	brcc	.+20     	; 0x112e <vfprintf+0x2b0>
    111a:	b4 fe       	sbrs	r11, 4
    111c:	0a c0       	rjmp	.+20     	; 0x1132 <vfprintf+0x2b4>
    111e:	b2 fc       	sbrc	r11, 2
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <vfprintf+0x2b4>
    1122:	2b 2d       	mov	r18, r11
    1124:	2e 7e       	andi	r18, 0xEE	; 238
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <vfprintf+0x2b4>
    1128:	7a 2c       	mov	r7, r10
    112a:	2b 2d       	mov	r18, r11
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <vfprintf+0x2b6>
    112e:	7a 2c       	mov	r7, r10
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <vfprintf+0x2b6>
    1132:	75 2c       	mov	r7, r5
    1134:	24 ff       	sbrs	r18, 4
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <vfprintf+0x2d4>
    1138:	fe 01       	movw	r30, r28
    113a:	ea 0d       	add	r30, r10
    113c:	f1 1d       	adc	r31, r1
    113e:	80 81       	ld	r24, Z
    1140:	80 33       	cpi	r24, 0x30	; 48
    1142:	11 f4       	brne	.+4      	; 0x1148 <vfprintf+0x2ca>
    1144:	29 7e       	andi	r18, 0xE9	; 233
    1146:	09 c0       	rjmp	.+18     	; 0x115a <vfprintf+0x2dc>
    1148:	22 ff       	sbrs	r18, 2
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <vfprintf+0x2da>
    114c:	73 94       	inc	r7
    114e:	73 94       	inc	r7
    1150:	04 c0       	rjmp	.+8      	; 0x115a <vfprintf+0x2dc>
    1152:	82 2f       	mov	r24, r18
    1154:	86 78       	andi	r24, 0x86	; 134
    1156:	09 f0       	breq	.+2      	; 0x115a <vfprintf+0x2dc>
    1158:	73 94       	inc	r7
    115a:	23 fd       	sbrc	r18, 3
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <vfprintf+0x306>
    115e:	20 ff       	sbrs	r18, 0
    1160:	06 c0       	rjmp	.+12     	; 0x116e <vfprintf+0x2f0>
    1162:	5a 2c       	mov	r5, r10
    1164:	73 14       	cp	r7, r3
    1166:	18 f4       	brcc	.+6      	; 0x116e <vfprintf+0x2f0>
    1168:	53 0c       	add	r5, r3
    116a:	57 18       	sub	r5, r7
    116c:	73 2c       	mov	r7, r3
    116e:	73 14       	cp	r7, r3
    1170:	68 f4       	brcc	.+26     	; 0x118c <vfprintf+0x30e>
    1172:	b7 01       	movw	r22, r14
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	2c 87       	std	Y+12, r18	; 0x0c
    117a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    117e:	73 94       	inc	r7
    1180:	2c 85       	ldd	r18, Y+12	; 0x0c
    1182:	f5 cf       	rjmp	.-22     	; 0x116e <vfprintf+0x2f0>
    1184:	73 14       	cp	r7, r3
    1186:	10 f4       	brcc	.+4      	; 0x118c <vfprintf+0x30e>
    1188:	37 18       	sub	r3, r7
    118a:	01 c0       	rjmp	.+2      	; 0x118e <vfprintf+0x310>
    118c:	31 2c       	mov	r3, r1
    118e:	24 ff       	sbrs	r18, 4
    1190:	12 c0       	rjmp	.+36     	; 0x11b6 <vfprintf+0x338>
    1192:	b7 01       	movw	r22, r14
    1194:	80 e3       	ldi	r24, 0x30	; 48
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	2c 87       	std	Y+12, r18	; 0x0c
    119a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    119e:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a0:	22 ff       	sbrs	r18, 2
    11a2:	17 c0       	rjmp	.+46     	; 0x11d2 <vfprintf+0x354>
    11a4:	21 ff       	sbrs	r18, 1
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <vfprintf+0x330>
    11a8:	88 e5       	ldi	r24, 0x58	; 88
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <vfprintf+0x334>
    11ae:	88 e7       	ldi	r24, 0x78	; 120
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	b7 01       	movw	r22, r14
    11b4:	0c c0       	rjmp	.+24     	; 0x11ce <vfprintf+0x350>
    11b6:	82 2f       	mov	r24, r18
    11b8:	86 78       	andi	r24, 0x86	; 134
    11ba:	59 f0       	breq	.+22     	; 0x11d2 <vfprintf+0x354>
    11bc:	21 fd       	sbrc	r18, 1
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <vfprintf+0x346>
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <vfprintf+0x348>
    11c4:	8b e2       	ldi	r24, 0x2B	; 43
    11c6:	27 fd       	sbrc	r18, 7
    11c8:	8d e2       	ldi	r24, 0x2D	; 45
    11ca:	b7 01       	movw	r22, r14
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    11d2:	a5 14       	cp	r10, r5
    11d4:	38 f4       	brcc	.+14     	; 0x11e4 <vfprintf+0x366>
    11d6:	b7 01       	movw	r22, r14
    11d8:	80 e3       	ldi	r24, 0x30	; 48
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    11e0:	5a 94       	dec	r5
    11e2:	f7 cf       	rjmp	.-18     	; 0x11d2 <vfprintf+0x354>
    11e4:	aa 94       	dec	r10
    11e6:	f4 01       	movw	r30, r8
    11e8:	ea 0d       	add	r30, r10
    11ea:	f1 1d       	adc	r31, r1
    11ec:	80 81       	ld	r24, Z
    11ee:	b7 01       	movw	r22, r14
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    11f6:	a1 10       	cpse	r10, r1
    11f8:	f5 cf       	rjmp	.-22     	; 0x11e4 <vfprintf+0x366>
    11fa:	33 20       	and	r3, r3
    11fc:	09 f4       	brne	.+2      	; 0x1200 <vfprintf+0x382>
    11fe:	51 ce       	rjmp	.-862    	; 0xea2 <vfprintf+0x24>
    1200:	b7 01       	movw	r22, r14
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    120a:	3a 94       	dec	r3
    120c:	f6 cf       	rjmp	.-20     	; 0x11fa <vfprintf+0x37c>
    120e:	f7 01       	movw	r30, r14
    1210:	86 81       	ldd	r24, Z+6	; 0x06
    1212:	97 81       	ldd	r25, Z+7	; 0x07
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0x39c>
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	2c 96       	adiw	r28, 0x0c	; 12
    121c:	e2 e1       	ldi	r30, 0x12	; 18
    121e:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__epilogue_restores__>

00001222 <putval>:
    1222:	20 fd       	sbrc	r18, 0
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <putval+0x16>
    1226:	fc 01       	movw	r30, r24
    1228:	23 fd       	sbrc	r18, 3
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <putval+0x14>
    122c:	22 ff       	sbrs	r18, 2
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <putval+0x12>
    1230:	73 83       	std	Z+3, r23	; 0x03
    1232:	62 83       	std	Z+2, r22	; 0x02
    1234:	51 83       	std	Z+1, r21	; 0x01
    1236:	40 83       	st	Z, r20
    1238:	08 95       	ret

0000123a <mulacc>:
    123a:	44 fd       	sbrc	r20, 4
    123c:	10 c0       	rjmp	.+32     	; 0x125e <mulacc+0x24>
    123e:	46 fd       	sbrc	r20, 6
    1240:	10 c0       	rjmp	.+32     	; 0x1262 <mulacc+0x28>
    1242:	db 01       	movw	r26, r22
    1244:	fc 01       	movw	r30, r24
    1246:	aa 0f       	add	r26, r26
    1248:	bb 1f       	adc	r27, r27
    124a:	ee 1f       	adc	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	10 94       	com	r1
    1250:	d1 f7       	brne	.-12     	; 0x1246 <mulacc+0xc>
    1252:	6a 0f       	add	r22, r26
    1254:	7b 1f       	adc	r23, r27
    1256:	8e 1f       	adc	r24, r30
    1258:	9f 1f       	adc	r25, r31
    125a:	31 e0       	ldi	r19, 0x01	; 1
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <mulacc+0x2a>
    125e:	33 e0       	ldi	r19, 0x03	; 3
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <mulacc+0x2a>
    1262:	34 e0       	ldi	r19, 0x04	; 4
    1264:	66 0f       	add	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	31 50       	subi	r19, 0x01	; 1
    126e:	d1 f7       	brne	.-12     	; 0x1264 <mulacc+0x2a>
    1270:	62 0f       	add	r22, r18
    1272:	71 1d       	adc	r23, r1
    1274:	81 1d       	adc	r24, r1
    1276:	91 1d       	adc	r25, r1
    1278:	08 95       	ret

0000127a <skip_spaces>:
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	8c 01       	movw	r16, r24
    1284:	c8 01       	movw	r24, r16
    1286:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    128a:	ec 01       	movw	r28, r24
    128c:	97 fd       	sbrc	r25, 7
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <skip_spaces+0x26>
    1290:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <isspace>
    1294:	89 2b       	or	r24, r25
    1296:	b1 f7       	brne	.-20     	; 0x1284 <skip_spaces+0xa>
    1298:	b8 01       	movw	r22, r16
    129a:	ce 01       	movw	r24, r28
    129c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ungetc>
    12a0:	ce 01       	movw	r24, r28
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <conv_int>:
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	ec 01       	movw	r28, r24
    12c4:	a6 2e       	mov	r10, r22
    12c6:	4a 01       	movw	r8, r20
    12c8:	02 2f       	mov	r16, r18
    12ca:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    12ce:	ac 01       	movw	r20, r24
    12d0:	55 27       	eor	r21, r21
    12d2:	4b 32       	cpi	r20, 0x2B	; 43
    12d4:	51 05       	cpc	r21, r1
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <conv_int+0x34>
    12d8:	4d 32       	cpi	r20, 0x2D	; 45
    12da:	51 05       	cpc	r21, r1
    12dc:	51 f4       	brne	.+20     	; 0x12f2 <conv_int+0x46>
    12de:	00 68       	ori	r16, 0x80	; 128
    12e0:	aa 94       	dec	r10
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <conv_int+0x3c>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	67 c0       	rjmp	.+206    	; 0x13b6 <conv_int+0x10a>
    12e8:	ce 01       	movw	r24, r28
    12ea:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    12ee:	97 fd       	sbrc	r25, 7
    12f0:	f9 cf       	rjmp	.-14     	; 0x12e4 <conv_int+0x38>
    12f2:	10 2f       	mov	r17, r16
    12f4:	1d 7f       	andi	r17, 0xFD	; 253
    12f6:	30 2f       	mov	r19, r16
    12f8:	30 73       	andi	r19, 0x30	; 48
    12fa:	01 f5       	brne	.+64     	; 0x133c <conv_int+0x90>
    12fc:	80 33       	cpi	r24, 0x30	; 48
    12fe:	f1 f4       	brne	.+60     	; 0x133c <conv_int+0x90>
    1300:	ff 24       	eor	r15, r15
    1302:	fa 94       	dec	r15
    1304:	fa 0c       	add	r15, r10
    1306:	09 f4       	brne	.+2      	; 0x130a <conv_int+0x5e>
    1308:	42 c0       	rjmp	.+132    	; 0x138e <conv_int+0xe2>
    130a:	ce 01       	movw	r24, r28
    130c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    1310:	97 fd       	sbrc	r25, 7
    1312:	3d c0       	rjmp	.+122    	; 0x138e <conv_int+0xe2>
    1314:	38 2f       	mov	r19, r24
    1316:	3f 7d       	andi	r19, 0xDF	; 223
    1318:	38 35       	cpi	r19, 0x58	; 88
    131a:	51 f4       	brne	.+20     	; 0x1330 <conv_int+0x84>
    131c:	12 64       	ori	r17, 0x42	; 66
    131e:	aa 94       	dec	r10
    1320:	aa 94       	dec	r10
    1322:	a9 f1       	breq	.+106    	; 0x138e <conv_int+0xe2>
    1324:	ce 01       	movw	r24, r28
    1326:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    132a:	97 ff       	sbrs	r25, 7
    132c:	07 c0       	rjmp	.+14     	; 0x133c <conv_int+0x90>
    132e:	2f c0       	rjmp	.+94     	; 0x138e <conv_int+0xe2>
    1330:	06 ff       	sbrs	r16, 6
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <conv_int+0x8c>
    1334:	12 60       	ori	r17, 0x02	; 2
    1336:	01 c0       	rjmp	.+2      	; 0x133a <conv_int+0x8e>
    1338:	12 61       	ori	r17, 0x12	; 18
    133a:	af 2c       	mov	r10, r15
    133c:	c1 2c       	mov	r12, r1
    133e:	d1 2c       	mov	r13, r1
    1340:	76 01       	movw	r14, r12
    1342:	20 ed       	ldi	r18, 0xD0	; 208
    1344:	28 0f       	add	r18, r24
    1346:	28 30       	cpi	r18, 0x08	; 8
    1348:	80 f0       	brcs	.+32     	; 0x136a <conv_int+0xbe>
    134a:	14 ff       	sbrs	r17, 4
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <conv_int+0xaa>
    134e:	be 01       	movw	r22, r28
    1350:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ungetc>
    1354:	19 c0       	rjmp	.+50     	; 0x1388 <conv_int+0xdc>
    1356:	2a 30       	cpi	r18, 0x0A	; 10
    1358:	40 f0       	brcs	.+16     	; 0x136a <conv_int+0xbe>
    135a:	16 ff       	sbrs	r17, 6
    135c:	f8 cf       	rjmp	.-16     	; 0x134e <conv_int+0xa2>
    135e:	2f 7d       	andi	r18, 0xDF	; 223
    1360:	3f ee       	ldi	r19, 0xEF	; 239
    1362:	32 0f       	add	r19, r18
    1364:	36 30       	cpi	r19, 0x06	; 6
    1366:	98 f7       	brcc	.-26     	; 0x134e <conv_int+0xa2>
    1368:	27 50       	subi	r18, 0x07	; 7
    136a:	41 2f       	mov	r20, r17
    136c:	c7 01       	movw	r24, r14
    136e:	b6 01       	movw	r22, r12
    1370:	0e 94 1d 09 	call	0x123a	; 0x123a <mulacc>
    1374:	6b 01       	movw	r12, r22
    1376:	7c 01       	movw	r14, r24
    1378:	12 60       	ori	r17, 0x02	; 2
    137a:	aa 94       	dec	r10
    137c:	59 f0       	breq	.+22     	; 0x1394 <conv_int+0xe8>
    137e:	ce 01       	movw	r24, r28
    1380:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    1384:	97 ff       	sbrs	r25, 7
    1386:	dd cf       	rjmp	.-70     	; 0x1342 <conv_int+0x96>
    1388:	11 fd       	sbrc	r17, 1
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <conv_int+0xe8>
    138c:	ab cf       	rjmp	.-170    	; 0x12e4 <conv_int+0x38>
    138e:	c1 2c       	mov	r12, r1
    1390:	d1 2c       	mov	r13, r1
    1392:	76 01       	movw	r14, r12
    1394:	17 ff       	sbrs	r17, 7
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <conv_int+0xfc>
    1398:	f0 94       	com	r15
    139a:	e0 94       	com	r14
    139c:	d0 94       	com	r13
    139e:	c0 94       	com	r12
    13a0:	c1 1c       	adc	r12, r1
    13a2:	d1 1c       	adc	r13, r1
    13a4:	e1 1c       	adc	r14, r1
    13a6:	f1 1c       	adc	r15, r1
    13a8:	21 2f       	mov	r18, r17
    13aa:	b7 01       	movw	r22, r14
    13ac:	a6 01       	movw	r20, r12
    13ae:	c4 01       	movw	r24, r8
    13b0:	0e 94 11 09 	call	0x1222	; 0x1222 <putval>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	af 90       	pop	r10
    13c8:	9f 90       	pop	r9
    13ca:	8f 90       	pop	r8
    13cc:	08 95       	ret

000013ce <conv_brk>:
    13ce:	a1 e2       	ldi	r26, 0x21	; 33
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ed ee       	ldi	r30, 0xED	; 237
    13d4:	f9 e0       	ldi	r31, 0x09	; 9
    13d6:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__+0xa>
    13da:	5c 01       	movw	r10, r24
    13dc:	7a 01       	movw	r14, r20
    13de:	8e 01       	movw	r16, r28
    13e0:	0f 5f       	subi	r16, 0xFF	; 255
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	68 01       	movw	r12, r16
    13e6:	80 e2       	ldi	r24, 0x20	; 32
    13e8:	d8 01       	movw	r26, r16
    13ea:	1d 92       	st	X+, r1
    13ec:	8a 95       	dec	r24
    13ee:	e9 f7       	brne	.-6      	; 0x13ea <conv_brk+0x1c>
    13f0:	f5 01       	movw	r30, r10
    13f2:	73 80       	ldd	r7, Z+3	; 0x03
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	81 2c       	mov	r8, r1
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	91 2c       	mov	r9, r1
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	73 fc       	sbrc	r7, 3
    1406:	a5 91       	lpm	r26, Z+
    1408:	73 fe       	sbrs	r7, 3
    140a:	a1 91       	ld	r26, Z+
    140c:	8f 01       	movw	r16, r30
    140e:	7a 2f       	mov	r23, r26
    1410:	9f 01       	movw	r18, r30
    1412:	a1 11       	cpse	r26, r1
    1414:	03 c0       	rjmp	.+6      	; 0x141c <conv_brk+0x4e>
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	7d c0       	rjmp	.+250    	; 0x1516 <conv_brk+0x148>
    141c:	ae 35       	cpi	r26, 0x5E	; 94
    141e:	19 f4       	brne	.+6      	; 0x1426 <conv_brk+0x58>
    1420:	41 15       	cp	r20, r1
    1422:	51 05       	cpc	r21, r1
    1424:	59 f1       	breq	.+86     	; 0x147c <conv_brk+0xae>
    1426:	e9 2d       	mov	r30, r9
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	e4 17       	cp	r30, r20
    142c:	f5 07       	cpc	r31, r21
    142e:	3c f4       	brge	.+14     	; 0x143e <conv_brk+0x70>
    1430:	ad 35       	cpi	r26, 0x5D	; 93
    1432:	69 f1       	breq	.+90     	; 0x148e <conv_brk+0xc0>
    1434:	ad 32       	cpi	r26, 0x2D	; 45
    1436:	19 f4       	brne	.+6      	; 0x143e <conv_brk+0x70>
    1438:	bb 23       	and	r27, r27
    143a:	19 f1       	breq	.+70     	; 0x1482 <conv_brk+0xb4>
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <conv_brk+0x76>
    143e:	b1 11       	cpse	r27, r1
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <conv_brk+0x76>
    1442:	8a 2e       	mov	r8, r26
    1444:	e7 2f       	mov	r30, r23
    1446:	e6 95       	lsr	r30
    1448:	e6 95       	lsr	r30
    144a:	e6 95       	lsr	r30
    144c:	86 01       	movw	r16, r12
    144e:	0e 0f       	add	r16, r30
    1450:	11 1d       	adc	r17, r1
    1452:	f8 01       	movw	r30, r16
    1454:	a7 2f       	mov	r26, r23
    1456:	a7 70       	andi	r26, 0x07	; 7
    1458:	8c 01       	movw	r16, r24
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <conv_brk+0x92>
    145c:	00 0f       	add	r16, r16
    145e:	11 1f       	adc	r17, r17
    1460:	aa 95       	dec	r26
    1462:	e2 f7       	brpl	.-8      	; 0x145c <conv_brk+0x8e>
    1464:	d8 01       	movw	r26, r16
    1466:	b0 81       	ld	r27, Z
    1468:	ba 2b       	or	r27, r26
    146a:	b0 83       	st	Z, r27
    146c:	78 15       	cp	r23, r8
    146e:	59 f0       	breq	.+22     	; 0x1486 <conv_brk+0xb8>
    1470:	78 15       	cp	r23, r8
    1472:	10 f4       	brcc	.+4      	; 0x1478 <conv_brk+0xaa>
    1474:	7f 5f       	subi	r23, 0xFF	; 255
    1476:	e6 cf       	rjmp	.-52     	; 0x1444 <conv_brk+0x76>
    1478:	71 50       	subi	r23, 0x01	; 1
    147a:	e4 cf       	rjmp	.-56     	; 0x1444 <conv_brk+0x76>
    147c:	99 24       	eor	r9, r9
    147e:	93 94       	inc	r9
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <conv_brk+0xba>
    1482:	b1 e0       	ldi	r27, 0x01	; 1
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <conv_brk+0xba>
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	4f 5f       	subi	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	ba cf       	rjmp	.-140    	; 0x1402 <conv_brk+0x34>
    148e:	bb 23       	and	r27, r27
    1490:	19 f0       	breq	.+6      	; 0x1498 <conv_brk+0xca>
    1492:	8e 81       	ldd	r24, Y+6	; 0x06
    1494:	80 62       	ori	r24, 0x20	; 32
    1496:	8e 83       	std	Y+6, r24	; 0x06
    1498:	91 10       	cpse	r9, r1
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <conv_brk+0xd4>
    149c:	99 24       	eor	r9, r9
    149e:	93 94       	inc	r9
    14a0:	15 c0       	rjmp	.+42     	; 0x14cc <conv_brk+0xfe>
    14a2:	f6 01       	movw	r30, r12
    14a4:	ce 01       	movw	r24, r28
    14a6:	81 96       	adiw	r24, 0x21	; 33
    14a8:	20 81       	ld	r18, Z
    14aa:	20 95       	com	r18
    14ac:	21 93       	st	Z+, r18
    14ae:	e8 17       	cp	r30, r24
    14b0:	f9 07       	cpc	r31, r25
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <conv_brk+0xda>
    14b4:	f3 cf       	rjmp	.-26     	; 0x149c <conv_brk+0xce>
    14b6:	e1 14       	cp	r14, r1
    14b8:	f1 04       	cpc	r15, r1
    14ba:	29 f0       	breq	.+10     	; 0x14c6 <conv_brk+0xf8>
    14bc:	d7 01       	movw	r26, r14
    14be:	8c 93       	st	X, r24
    14c0:	f7 01       	movw	r30, r14
    14c2:	31 96       	adiw	r30, 0x01	; 1
    14c4:	7f 01       	movw	r14, r30
    14c6:	61 50       	subi	r22, 0x01	; 1
    14c8:	01 f1       	breq	.+64     	; 0x150a <conv_brk+0x13c>
    14ca:	91 2c       	mov	r9, r1
    14cc:	c5 01       	movw	r24, r10
    14ce:	69 a3       	std	Y+33, r22	; 0x21
    14d0:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    14d4:	69 a1       	ldd	r22, Y+33	; 0x21
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <conv_brk+0x138>
    14da:	28 2f       	mov	r18, r24
    14dc:	26 95       	lsr	r18
    14de:	26 95       	lsr	r18
    14e0:	26 95       	lsr	r18
    14e2:	f6 01       	movw	r30, r12
    14e4:	e2 0f       	add	r30, r18
    14e6:	f1 1d       	adc	r31, r1
    14e8:	20 81       	ld	r18, Z
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	ac 01       	movw	r20, r24
    14ee:	47 70       	andi	r20, 0x07	; 7
    14f0:	55 27       	eor	r21, r21
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <conv_brk+0x12a>
    14f4:	35 95       	asr	r19
    14f6:	27 95       	ror	r18
    14f8:	4a 95       	dec	r20
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <conv_brk+0x126>
    14fc:	20 fd       	sbrc	r18, 0
    14fe:	db cf       	rjmp	.-74     	; 0x14b6 <conv_brk+0xe8>
    1500:	b5 01       	movw	r22, r10
    1502:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ungetc>
    1506:	91 10       	cpse	r9, r1
    1508:	86 cf       	rjmp	.-244    	; 0x1416 <conv_brk+0x48>
    150a:	e1 14       	cp	r14, r1
    150c:	f1 04       	cpc	r15, r1
    150e:	11 f0       	breq	.+4      	; 0x1514 <conv_brk+0x146>
    1510:	d7 01       	movw	r26, r14
    1512:	1c 92       	st	X, r1
    1514:	c8 01       	movw	r24, r16
    1516:	a1 96       	adiw	r28, 0x21	; 33
    1518:	ed e0       	ldi	r30, 0x0D	; 13
    151a:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__+0xa>

0000151e <vfscanf>:
    151e:	4f 92       	push	r4
    1520:	5f 92       	push	r5
    1522:	7f 92       	push	r7
    1524:	8f 92       	push	r8
    1526:	9f 92       	push	r9
    1528:	af 92       	push	r10
    152a:	bf 92       	push	r11
    152c:	cf 92       	push	r12
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	1f 92       	push	r1
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	8c 01       	movw	r16, r24
    1544:	2b 01       	movw	r4, r22
    1546:	7a 01       	movw	r14, r20
    1548:	fc 01       	movw	r30, r24
    154a:	17 82       	std	Z+7, r1	; 0x07
    154c:	16 82       	std	Z+6, r1	; 0x06
    154e:	a1 2c       	mov	r10, r1
    1550:	f8 01       	movw	r30, r16
    1552:	d3 80       	ldd	r13, Z+3	; 0x03
    1554:	f2 01       	movw	r30, r4
    1556:	d3 fc       	sbrc	r13, 3
    1558:	85 91       	lpm	r24, Z+
    155a:	d3 fe       	sbrs	r13, 3
    155c:	81 91       	ld	r24, Z+
    155e:	38 2f       	mov	r19, r24
    1560:	2f 01       	movw	r4, r30
    1562:	88 23       	and	r24, r24
    1564:	09 f4       	brne	.+2      	; 0x1568 <vfscanf+0x4a>
    1566:	fc c0       	rjmp	.+504    	; 0x1760 <vfscanf+0x242>
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	39 83       	std	Y+1, r19	; 0x01
    156c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <isspace>
    1570:	39 81       	ldd	r19, Y+1	; 0x01
    1572:	89 2b       	or	r24, r25
    1574:	21 f0       	breq	.+8      	; 0x157e <vfscanf+0x60>
    1576:	c8 01       	movw	r24, r16
    1578:	0e 94 3d 09 	call	0x127a	; 0x127a <skip_spaces>
    157c:	e9 cf       	rjmp	.-46     	; 0x1550 <vfscanf+0x32>
    157e:	35 32       	cpi	r19, 0x25	; 37
    1580:	41 f4       	brne	.+16     	; 0x1592 <vfscanf+0x74>
    1582:	f2 01       	movw	r30, r4
    1584:	d3 fc       	sbrc	r13, 3
    1586:	35 91       	lpm	r19, Z+
    1588:	d3 fe       	sbrs	r13, 3
    158a:	31 91       	ld	r19, Z+
    158c:	2f 01       	movw	r4, r30
    158e:	35 32       	cpi	r19, 0x25	; 37
    1590:	69 f4       	brne	.+26     	; 0x15ac <vfscanf+0x8e>
    1592:	c8 01       	movw	r24, r16
    1594:	39 83       	std	Y+1, r19	; 0x01
    1596:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    159a:	39 81       	ldd	r19, Y+1	; 0x01
    159c:	97 fd       	sbrc	r25, 7
    159e:	de c0       	rjmp	.+444    	; 0x175c <vfscanf+0x23e>
    15a0:	38 17       	cp	r19, r24
    15a2:	b1 f2       	breq	.-84     	; 0x1550 <vfscanf+0x32>
    15a4:	b8 01       	movw	r22, r16
    15a6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ungetc>
    15aa:	da c0       	rjmp	.+436    	; 0x1760 <vfscanf+0x242>
    15ac:	3a 32       	cpi	r19, 0x2A	; 42
    15ae:	41 f4       	brne	.+16     	; 0x15c0 <vfscanf+0xa2>
    15b0:	d3 fc       	sbrc	r13, 3
    15b2:	35 91       	lpm	r19, Z+
    15b4:	d3 fe       	sbrs	r13, 3
    15b6:	31 91       	ld	r19, Z+
    15b8:	2f 01       	movw	r4, r30
    15ba:	bb 24       	eor	r11, r11
    15bc:	b3 94       	inc	r11
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <vfscanf+0xa4>
    15c0:	b1 2c       	mov	r11, r1
    15c2:	71 2c       	mov	r7, r1
    15c4:	20 ed       	ldi	r18, 0xD0	; 208
    15c6:	23 0f       	add	r18, r19
    15c8:	2a 30       	cpi	r18, 0x0A	; 10
    15ca:	90 f4       	brcc	.+36     	; 0x15f0 <vfscanf+0xd2>
    15cc:	fb 2d       	mov	r31, r11
    15ce:	f2 60       	ori	r31, 0x02	; 2
    15d0:	bf 2e       	mov	r11, r31
    15d2:	67 2d       	mov	r22, r7
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	0e 94 1d 09 	call	0x123a	; 0x123a <mulacc>
    15e0:	76 2e       	mov	r7, r22
    15e2:	f2 01       	movw	r30, r4
    15e4:	d3 fc       	sbrc	r13, 3
    15e6:	35 91       	lpm	r19, Z+
    15e8:	d3 fe       	sbrs	r13, 3
    15ea:	31 91       	ld	r19, Z+
    15ec:	2f 01       	movw	r4, r30
    15ee:	ea cf       	rjmp	.-44     	; 0x15c4 <vfscanf+0xa6>
    15f0:	b1 fe       	sbrs	r11, 1
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <vfscanf+0xdc>
    15f4:	71 10       	cpse	r7, r1
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <vfscanf+0xe0>
    15f8:	b3 c0       	rjmp	.+358    	; 0x1760 <vfscanf+0x242>
    15fa:	77 24       	eor	r7, r7
    15fc:	7a 94       	dec	r7
    15fe:	38 36       	cpi	r19, 0x68	; 104
    1600:	19 f0       	breq	.+6      	; 0x1608 <vfscanf+0xea>
    1602:	3c 36       	cpi	r19, 0x6C	; 108
    1604:	61 f0       	breq	.+24     	; 0x161e <vfscanf+0x100>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <vfscanf+0x112>
    1608:	f2 01       	movw	r30, r4
    160a:	d3 fc       	sbrc	r13, 3
    160c:	35 91       	lpm	r19, Z+
    160e:	d3 fe       	sbrs	r13, 3
    1610:	31 91       	ld	r19, Z+
    1612:	2f 01       	movw	r4, r30
    1614:	38 36       	cpi	r19, 0x68	; 104
    1616:	61 f4       	brne	.+24     	; 0x1630 <vfscanf+0x112>
    1618:	fb 2d       	mov	r31, r11
    161a:	f8 60       	ori	r31, 0x08	; 8
    161c:	bf 2e       	mov	r11, r31
    161e:	8b 2d       	mov	r24, r11
    1620:	84 60       	ori	r24, 0x04	; 4
    1622:	b8 2e       	mov	r11, r24
    1624:	f2 01       	movw	r30, r4
    1626:	d3 fc       	sbrc	r13, 3
    1628:	35 91       	lpm	r19, Z+
    162a:	d3 fe       	sbrs	r13, 3
    162c:	31 91       	ld	r19, Z+
    162e:	2f 01       	movw	r4, r30
    1630:	33 23       	and	r19, r19
    1632:	09 f4       	brne	.+2      	; 0x1636 <vfscanf+0x118>
    1634:	95 c0       	rjmp	.+298    	; 0x1760 <vfscanf+0x242>
    1636:	63 2f       	mov	r22, r19
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	8a e7       	ldi	r24, 0x7A	; 122
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	39 83       	std	Y+1, r19	; 0x01
    1640:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <strchr_P>
    1644:	39 81       	ldd	r19, Y+1	; 0x01
    1646:	89 2b       	or	r24, r25
    1648:	09 f4       	brne	.+2      	; 0x164c <vfscanf+0x12e>
    164a:	8a c0       	rjmp	.+276    	; 0x1760 <vfscanf+0x242>
    164c:	b0 fc       	sbrc	r11, 0
    164e:	07 c0       	rjmp	.+14     	; 0x165e <vfscanf+0x140>
    1650:	f7 01       	movw	r30, r14
    1652:	c0 80       	ld	r12, Z
    1654:	d1 80       	ldd	r13, Z+1	; 0x01
    1656:	c7 01       	movw	r24, r14
    1658:	02 96       	adiw	r24, 0x02	; 2
    165a:	7c 01       	movw	r14, r24
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfscanf+0x144>
    165e:	c1 2c       	mov	r12, r1
    1660:	d1 2c       	mov	r13, r1
    1662:	3e 36       	cpi	r19, 0x6E	; 110
    1664:	51 f4       	brne	.+20     	; 0x167a <vfscanf+0x15c>
    1666:	f8 01       	movw	r30, r16
    1668:	46 81       	ldd	r20, Z+6	; 0x06
    166a:	57 81       	ldd	r21, Z+7	; 0x07
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	2b 2d       	mov	r18, r11
    1672:	c6 01       	movw	r24, r12
    1674:	0e 94 11 09 	call	0x1222	; 0x1222 <putval>
    1678:	6b cf       	rjmp	.-298    	; 0x1550 <vfscanf+0x32>
    167a:	33 36       	cpi	r19, 0x63	; 99
    167c:	a1 f4       	brne	.+40     	; 0x16a6 <vfscanf+0x188>
    167e:	b1 fc       	sbrc	r11, 1
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfscanf+0x168>
    1682:	77 24       	eor	r7, r7
    1684:	73 94       	inc	r7
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    168c:	97 fd       	sbrc	r25, 7
    168e:	66 c0       	rjmp	.+204    	; 0x175c <vfscanf+0x23e>
    1690:	c1 14       	cp	r12, r1
    1692:	d1 04       	cpc	r13, r1
    1694:	29 f0       	breq	.+10     	; 0x16a0 <vfscanf+0x182>
    1696:	f6 01       	movw	r30, r12
    1698:	80 83       	st	Z, r24
    169a:	c6 01       	movw	r24, r12
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	6c 01       	movw	r12, r24
    16a0:	7a 94       	dec	r7
    16a2:	89 f7       	brne	.-30     	; 0x1686 <vfscanf+0x168>
    16a4:	57 c0       	rjmp	.+174    	; 0x1754 <vfscanf+0x236>
    16a6:	3b 35       	cpi	r19, 0x5B	; 91
    16a8:	59 f4       	brne	.+22     	; 0x16c0 <vfscanf+0x1a2>
    16aa:	92 01       	movw	r18, r4
    16ac:	a6 01       	movw	r20, r12
    16ae:	67 2d       	mov	r22, r7
    16b0:	c8 01       	movw	r24, r16
    16b2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <conv_brk>
    16b6:	2c 01       	movw	r4, r24
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	09 f0       	breq	.+2      	; 0x16be <vfscanf+0x1a0>
    16bc:	4b c0       	rjmp	.+150    	; 0x1754 <vfscanf+0x236>
    16be:	45 c0       	rjmp	.+138    	; 0x174a <vfscanf+0x22c>
    16c0:	c8 01       	movw	r24, r16
    16c2:	39 83       	std	Y+1, r19	; 0x01
    16c4:	0e 94 3d 09 	call	0x127a	; 0x127a <skip_spaces>
    16c8:	39 81       	ldd	r19, Y+1	; 0x01
    16ca:	97 fd       	sbrc	r25, 7
    16cc:	47 c0       	rjmp	.+142    	; 0x175c <vfscanf+0x23e>
    16ce:	3f 36       	cpi	r19, 0x6F	; 111
    16d0:	69 f1       	breq	.+90     	; 0x172c <vfscanf+0x20e>
    16d2:	28 f4       	brcc	.+10     	; 0x16de <vfscanf+0x1c0>
    16d4:	34 36       	cpi	r19, 0x64	; 100
    16d6:	31 f1       	breq	.+76     	; 0x1724 <vfscanf+0x206>
    16d8:	39 36       	cpi	r19, 0x69	; 105
    16da:	79 f1       	breq	.+94     	; 0x173a <vfscanf+0x21c>
    16dc:	2b c0       	rjmp	.+86     	; 0x1734 <vfscanf+0x216>
    16de:	33 37       	cpi	r19, 0x73	; 115
    16e0:	69 f0       	breq	.+26     	; 0x16fc <vfscanf+0x1de>
    16e2:	35 37       	cpi	r19, 0x75	; 117
    16e4:	f9 f0       	breq	.+62     	; 0x1724 <vfscanf+0x206>
    16e6:	26 c0       	rjmp	.+76     	; 0x1734 <vfscanf+0x216>
    16e8:	c1 14       	cp	r12, r1
    16ea:	d1 04       	cpc	r13, r1
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <vfscanf+0x1da>
    16ee:	f6 01       	movw	r30, r12
    16f0:	80 82       	st	Z, r8
    16f2:	c6 01       	movw	r24, r12
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	6c 01       	movw	r12, r24
    16f8:	7a 94       	dec	r7
    16fa:	71 f0       	breq	.+28     	; 0x1718 <vfscanf+0x1fa>
    16fc:	c8 01       	movw	r24, r16
    16fe:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fgetc>
    1702:	4c 01       	movw	r8, r24
    1704:	97 fd       	sbrc	r25, 7
    1706:	08 c0       	rjmp	.+16     	; 0x1718 <vfscanf+0x1fa>
    1708:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <isspace>
    170c:	89 2b       	or	r24, r25
    170e:	61 f3       	breq	.-40     	; 0x16e8 <vfscanf+0x1ca>
    1710:	b8 01       	movw	r22, r16
    1712:	c4 01       	movw	r24, r8
    1714:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ungetc>
    1718:	c1 14       	cp	r12, r1
    171a:	d1 04       	cpc	r13, r1
    171c:	d9 f0       	breq	.+54     	; 0x1754 <vfscanf+0x236>
    171e:	f6 01       	movw	r30, r12
    1720:	10 82       	st	Z, r1
    1722:	18 c0       	rjmp	.+48     	; 0x1754 <vfscanf+0x236>
    1724:	fb 2d       	mov	r31, r11
    1726:	f0 62       	ori	r31, 0x20	; 32
    1728:	bf 2e       	mov	r11, r31
    172a:	07 c0       	rjmp	.+14     	; 0x173a <vfscanf+0x21c>
    172c:	8b 2d       	mov	r24, r11
    172e:	80 61       	ori	r24, 0x10	; 16
    1730:	b8 2e       	mov	r11, r24
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfscanf+0x21c>
    1734:	9b 2d       	mov	r25, r11
    1736:	90 64       	ori	r25, 0x40	; 64
    1738:	b9 2e       	mov	r11, r25
    173a:	2b 2d       	mov	r18, r11
    173c:	a6 01       	movw	r20, r12
    173e:	67 2d       	mov	r22, r7
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 56 09 	call	0x12ac	; 0x12ac <conv_int>
    1746:	81 11       	cpse	r24, r1
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <vfscanf+0x236>
    174a:	f8 01       	movw	r30, r16
    174c:	83 81       	ldd	r24, Z+3	; 0x03
    174e:	80 73       	andi	r24, 0x30	; 48
    1750:	29 f4       	brne	.+10     	; 0x175c <vfscanf+0x23e>
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <vfscanf+0x242>
    1754:	b0 fc       	sbrc	r11, 0
    1756:	fc ce       	rjmp	.-520    	; 0x1550 <vfscanf+0x32>
    1758:	a3 94       	inc	r10
    175a:	fa ce       	rjmp	.-524    	; 0x1550 <vfscanf+0x32>
    175c:	aa 20       	and	r10, r10
    175e:	19 f0       	breq	.+6      	; 0x1766 <vfscanf+0x248>
    1760:	8a 2d       	mov	r24, r10
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfscanf+0x24c>
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	0f 90       	pop	r0
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	df 90       	pop	r13
    177a:	cf 90       	pop	r12
    177c:	bf 90       	pop	r11
    177e:	af 90       	pop	r10
    1780:	9f 90       	pop	r9
    1782:	8f 90       	pop	r8
    1784:	7f 90       	pop	r7
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	08 95       	ret

0000178c <calloc>:
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	86 9f       	mul	r24, r22
    1796:	80 01       	movw	r16, r0
    1798:	87 9f       	mul	r24, r23
    179a:	10 0d       	add	r17, r0
    179c:	96 9f       	mul	r25, r22
    179e:	10 0d       	add	r17, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	c8 01       	movw	r24, r16
    17a4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <malloc>
    17a8:	ec 01       	movw	r28, r24
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	29 f0       	breq	.+10     	; 0x17b8 <calloc+0x2c>
    17ae:	a8 01       	movw	r20, r16
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <memset>
    17b8:	ce 01       	movw	r24, r28
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <malloc>:
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	91 05       	cpc	r25, r1
    17cc:	10 f4       	brcc	.+4      	; 0x17d2 <malloc+0xe>
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	e0 91 90 02 	lds	r30, 0x0290
    17d6:	f0 91 91 02 	lds	r31, 0x0291
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	30 97       	sbiw	r30, 0x00	; 0
    17e4:	39 f1       	breq	.+78     	; 0x1834 <malloc+0x70>
    17e6:	40 81       	ld	r20, Z
    17e8:	51 81       	ldd	r21, Z+1	; 0x01
    17ea:	48 17       	cp	r20, r24
    17ec:	59 07       	cpc	r21, r25
    17ee:	b8 f0       	brcs	.+46     	; 0x181e <malloc+0x5a>
    17f0:	48 17       	cp	r20, r24
    17f2:	59 07       	cpc	r21, r25
    17f4:	71 f4       	brne	.+28     	; 0x1812 <malloc+0x4e>
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	10 97       	sbiw	r26, 0x00	; 0
    17fc:	29 f0       	breq	.+10     	; 0x1808 <malloc+0x44>
    17fe:	13 96       	adiw	r26, 0x03	; 3
    1800:	9c 93       	st	X, r25
    1802:	8e 93       	st	-X, r24
    1804:	12 97       	sbiw	r26, 0x02	; 2
    1806:	2c c0       	rjmp	.+88     	; 0x1860 <malloc+0x9c>
    1808:	90 93 91 02 	sts	0x0291, r25
    180c:	80 93 90 02 	sts	0x0290, r24
    1810:	27 c0       	rjmp	.+78     	; 0x1860 <malloc+0x9c>
    1812:	21 15       	cp	r18, r1
    1814:	31 05       	cpc	r19, r1
    1816:	31 f0       	breq	.+12     	; 0x1824 <malloc+0x60>
    1818:	42 17       	cp	r20, r18
    181a:	53 07       	cpc	r21, r19
    181c:	18 f0       	brcs	.+6      	; 0x1824 <malloc+0x60>
    181e:	a9 01       	movw	r20, r18
    1820:	db 01       	movw	r26, r22
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <malloc+0x62>
    1824:	ef 01       	movw	r28, r30
    1826:	9a 01       	movw	r18, r20
    1828:	bd 01       	movw	r22, r26
    182a:	df 01       	movw	r26, r30
    182c:	02 80       	ldd	r0, Z+2	; 0x02
    182e:	f3 81       	ldd	r31, Z+3	; 0x03
    1830:	e0 2d       	mov	r30, r0
    1832:	d7 cf       	rjmp	.-82     	; 0x17e2 <malloc+0x1e>
    1834:	21 15       	cp	r18, r1
    1836:	31 05       	cpc	r19, r1
    1838:	f9 f0       	breq	.+62     	; 0x1878 <malloc+0xb4>
    183a:	28 1b       	sub	r18, r24
    183c:	39 0b       	sbc	r19, r25
    183e:	24 30       	cpi	r18, 0x04	; 4
    1840:	31 05       	cpc	r19, r1
    1842:	80 f4       	brcc	.+32     	; 0x1864 <malloc+0xa0>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	61 15       	cp	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	21 f0       	breq	.+8      	; 0x1856 <malloc+0x92>
    184e:	fb 01       	movw	r30, r22
    1850:	93 83       	std	Z+3, r25	; 0x03
    1852:	82 83       	std	Z+2, r24	; 0x02
    1854:	04 c0       	rjmp	.+8      	; 0x185e <malloc+0x9a>
    1856:	90 93 91 02 	sts	0x0291, r25
    185a:	80 93 90 02 	sts	0x0290, r24
    185e:	fe 01       	movw	r30, r28
    1860:	32 96       	adiw	r30, 0x02	; 2
    1862:	44 c0       	rjmp	.+136    	; 0x18ec <malloc+0x128>
    1864:	fe 01       	movw	r30, r28
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	81 93       	st	Z+, r24
    186c:	91 93       	st	Z+, r25
    186e:	22 50       	subi	r18, 0x02	; 2
    1870:	31 09       	sbc	r19, r1
    1872:	39 83       	std	Y+1, r19	; 0x01
    1874:	28 83       	st	Y, r18
    1876:	3a c0       	rjmp	.+116    	; 0x18ec <malloc+0x128>
    1878:	20 91 8e 02 	lds	r18, 0x028E
    187c:	30 91 8f 02 	lds	r19, 0x028F
    1880:	23 2b       	or	r18, r19
    1882:	41 f4       	brne	.+16     	; 0x1894 <malloc+0xd0>
    1884:	20 91 02 01 	lds	r18, 0x0102
    1888:	30 91 03 01 	lds	r19, 0x0103
    188c:	30 93 8f 02 	sts	0x028F, r19
    1890:	20 93 8e 02 	sts	0x028E, r18
    1894:	20 91 00 01 	lds	r18, 0x0100
    1898:	30 91 01 01 	lds	r19, 0x0101
    189c:	21 15       	cp	r18, r1
    189e:	31 05       	cpc	r19, r1
    18a0:	41 f4       	brne	.+16     	; 0x18b2 <malloc+0xee>
    18a2:	2d b7       	in	r18, 0x3d	; 61
    18a4:	3e b7       	in	r19, 0x3e	; 62
    18a6:	40 91 04 01 	lds	r20, 0x0104
    18aa:	50 91 05 01 	lds	r21, 0x0105
    18ae:	24 1b       	sub	r18, r20
    18b0:	35 0b       	sbc	r19, r21
    18b2:	e0 91 8e 02 	lds	r30, 0x028E
    18b6:	f0 91 8f 02 	lds	r31, 0x028F
    18ba:	e2 17       	cp	r30, r18
    18bc:	f3 07       	cpc	r31, r19
    18be:	a0 f4       	brcc	.+40     	; 0x18e8 <malloc+0x124>
    18c0:	2e 1b       	sub	r18, r30
    18c2:	3f 0b       	sbc	r19, r31
    18c4:	28 17       	cp	r18, r24
    18c6:	39 07       	cpc	r19, r25
    18c8:	78 f0       	brcs	.+30     	; 0x18e8 <malloc+0x124>
    18ca:	ac 01       	movw	r20, r24
    18cc:	4e 5f       	subi	r20, 0xFE	; 254
    18ce:	5f 4f       	sbci	r21, 0xFF	; 255
    18d0:	24 17       	cp	r18, r20
    18d2:	35 07       	cpc	r19, r21
    18d4:	48 f0       	brcs	.+18     	; 0x18e8 <malloc+0x124>
    18d6:	4e 0f       	add	r20, r30
    18d8:	5f 1f       	adc	r21, r31
    18da:	50 93 8f 02 	sts	0x028F, r21
    18de:	40 93 8e 02 	sts	0x028E, r20
    18e2:	81 93       	st	Z+, r24
    18e4:	91 93       	st	Z+, r25
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <malloc+0x128>
    18e8:	e0 e0       	ldi	r30, 0x00	; 0
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	cf 01       	movw	r24, r30
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <free>:
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	09 f4       	brne	.+2      	; 0x18fe <free+0xa>
    18fc:	87 c0       	rjmp	.+270    	; 0x1a0c <free+0x118>
    18fe:	fc 01       	movw	r30, r24
    1900:	32 97       	sbiw	r30, 0x02	; 2
    1902:	13 82       	std	Z+3, r1	; 0x03
    1904:	12 82       	std	Z+2, r1	; 0x02
    1906:	c0 91 90 02 	lds	r28, 0x0290
    190a:	d0 91 91 02 	lds	r29, 0x0291
    190e:	20 97       	sbiw	r28, 0x00	; 0
    1910:	81 f4       	brne	.+32     	; 0x1932 <free+0x3e>
    1912:	20 81       	ld	r18, Z
    1914:	31 81       	ldd	r19, Z+1	; 0x01
    1916:	28 0f       	add	r18, r24
    1918:	39 1f       	adc	r19, r25
    191a:	80 91 8e 02 	lds	r24, 0x028E
    191e:	90 91 8f 02 	lds	r25, 0x028F
    1922:	82 17       	cp	r24, r18
    1924:	93 07       	cpc	r25, r19
    1926:	79 f5       	brne	.+94     	; 0x1986 <free+0x92>
    1928:	f0 93 8f 02 	sts	0x028F, r31
    192c:	e0 93 8e 02 	sts	0x028E, r30
    1930:	6d c0       	rjmp	.+218    	; 0x1a0c <free+0x118>
    1932:	de 01       	movw	r26, r28
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	ae 17       	cp	r26, r30
    193a:	bf 07       	cpc	r27, r31
    193c:	50 f4       	brcc	.+20     	; 0x1952 <free+0x5e>
    193e:	12 96       	adiw	r26, 0x02	; 2
    1940:	4d 91       	ld	r20, X+
    1942:	5c 91       	ld	r21, X
    1944:	13 97       	sbiw	r26, 0x03	; 3
    1946:	9d 01       	movw	r18, r26
    1948:	41 15       	cp	r20, r1
    194a:	51 05       	cpc	r21, r1
    194c:	09 f1       	breq	.+66     	; 0x1990 <free+0x9c>
    194e:	da 01       	movw	r26, r20
    1950:	f3 cf       	rjmp	.-26     	; 0x1938 <free+0x44>
    1952:	b3 83       	std	Z+3, r27	; 0x03
    1954:	a2 83       	std	Z+2, r26	; 0x02
    1956:	40 81       	ld	r20, Z
    1958:	51 81       	ldd	r21, Z+1	; 0x01
    195a:	84 0f       	add	r24, r20
    195c:	95 1f       	adc	r25, r21
    195e:	8a 17       	cp	r24, r26
    1960:	9b 07       	cpc	r25, r27
    1962:	71 f4       	brne	.+28     	; 0x1980 <free+0x8c>
    1964:	8d 91       	ld	r24, X+
    1966:	9c 91       	ld	r25, X
    1968:	11 97       	sbiw	r26, 0x01	; 1
    196a:	84 0f       	add	r24, r20
    196c:	95 1f       	adc	r25, r21
    196e:	02 96       	adiw	r24, 0x02	; 2
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	12 96       	adiw	r26, 0x02	; 2
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	13 97       	sbiw	r26, 0x03	; 3
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	29 f4       	brne	.+10     	; 0x1990 <free+0x9c>
    1986:	f0 93 91 02 	sts	0x0291, r31
    198a:	e0 93 90 02 	sts	0x0290, r30
    198e:	3e c0       	rjmp	.+124    	; 0x1a0c <free+0x118>
    1990:	d9 01       	movw	r26, r18
    1992:	13 96       	adiw	r26, 0x03	; 3
    1994:	fc 93       	st	X, r31
    1996:	ee 93       	st	-X, r30
    1998:	12 97       	sbiw	r26, 0x02	; 2
    199a:	4d 91       	ld	r20, X+
    199c:	5d 91       	ld	r21, X+
    199e:	a4 0f       	add	r26, r20
    19a0:	b5 1f       	adc	r27, r21
    19a2:	ea 17       	cp	r30, r26
    19a4:	fb 07       	cpc	r31, r27
    19a6:	79 f4       	brne	.+30     	; 0x19c6 <free+0xd2>
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	84 0f       	add	r24, r20
    19ae:	95 1f       	adc	r25, r21
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	d9 01       	movw	r26, r18
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	9c 93       	st	X, r25
    19b8:	8e 93       	st	-X, r24
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	13 96       	adiw	r26, 0x03	; 3
    19c0:	9c 93       	st	X, r25
    19c2:	8e 93       	st	-X, r24
    19c4:	12 97       	sbiw	r26, 0x02	; 2
    19c6:	e0 e0       	ldi	r30, 0x00	; 0
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <free+0xe4>
    19d2:	fe 01       	movw	r30, r28
    19d4:	ec 01       	movw	r28, r24
    19d6:	f9 cf       	rjmp	.-14     	; 0x19ca <free+0xd6>
    19d8:	ce 01       	movw	r24, r28
    19da:	02 96       	adiw	r24, 0x02	; 2
    19dc:	28 81       	ld	r18, Y
    19de:	39 81       	ldd	r19, Y+1	; 0x01
    19e0:	82 0f       	add	r24, r18
    19e2:	93 1f       	adc	r25, r19
    19e4:	20 91 8e 02 	lds	r18, 0x028E
    19e8:	30 91 8f 02 	lds	r19, 0x028F
    19ec:	28 17       	cp	r18, r24
    19ee:	39 07       	cpc	r19, r25
    19f0:	69 f4       	brne	.+26     	; 0x1a0c <free+0x118>
    19f2:	30 97       	sbiw	r30, 0x00	; 0
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <free+0x10c>
    19f6:	10 92 91 02 	sts	0x0291, r1
    19fa:	10 92 90 02 	sts	0x0290, r1
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <free+0x110>
    1a00:	13 82       	std	Z+3, r1	; 0x03
    1a02:	12 82       	std	Z+2, r1	; 0x02
    1a04:	d0 93 8f 02 	sts	0x028F, r29
    1a08:	c0 93 8e 02 	sts	0x028E, r28
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <isspace>:
    1a12:	91 11       	cpse	r25, r1
    1a14:	15 c1       	rjmp	.+554    	; 0x1c40 <__ctype_isfalse>
    1a16:	80 32       	cpi	r24, 0x20	; 32
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <isspace+0xe>
    1a1a:	89 50       	subi	r24, 0x09	; 9
    1a1c:	85 50       	subi	r24, 0x05	; 5
    1a1e:	d0 f7       	brcc	.-12     	; 0x1a14 <isspace+0x2>
    1a20:	08 95       	ret

00001a22 <strchr_P>:
    1a22:	fc 01       	movw	r30, r24
    1a24:	05 90       	lpm	r0, Z+
    1a26:	06 16       	cp	r0, r22
    1a28:	21 f0       	breq	.+8      	; 0x1a32 <strchr_P+0x10>
    1a2a:	00 20       	and	r0, r0
    1a2c:	d9 f7       	brne	.-10     	; 0x1a24 <strchr_P+0x2>
    1a2e:	c0 01       	movw	r24, r0
    1a30:	08 95       	ret
    1a32:	31 97       	sbiw	r30, 0x01	; 1
    1a34:	cf 01       	movw	r24, r30
    1a36:	08 95       	ret

00001a38 <strnlen_P>:
    1a38:	fc 01       	movw	r30, r24
    1a3a:	05 90       	lpm	r0, Z+
    1a3c:	61 50       	subi	r22, 0x01	; 1
    1a3e:	70 40       	sbci	r23, 0x00	; 0
    1a40:	01 10       	cpse	r0, r1
    1a42:	d8 f7       	brcc	.-10     	; 0x1a3a <strnlen_P+0x2>
    1a44:	80 95       	com	r24
    1a46:	90 95       	com	r25
    1a48:	8e 0f       	add	r24, r30
    1a4a:	9f 1f       	adc	r25, r31
    1a4c:	08 95       	ret

00001a4e <memset>:
    1a4e:	dc 01       	movw	r26, r24
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <memset+0x6>
    1a52:	6d 93       	st	X+, r22
    1a54:	41 50       	subi	r20, 0x01	; 1
    1a56:	50 40       	sbci	r21, 0x00	; 0
    1a58:	e0 f7       	brcc	.-8      	; 0x1a52 <memset+0x4>
    1a5a:	08 95       	ret

00001a5c <strnlen>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	61 50       	subi	r22, 0x01	; 1
    1a60:	70 40       	sbci	r23, 0x00	; 0
    1a62:	01 90       	ld	r0, Z+
    1a64:	01 10       	cpse	r0, r1
    1a66:	d8 f7       	brcc	.-10     	; 0x1a5e <strnlen+0x2>
    1a68:	80 95       	com	r24
    1a6a:	90 95       	com	r25
    1a6c:	8e 0f       	add	r24, r30
    1a6e:	9f 1f       	adc	r25, r31
    1a70:	08 95       	ret

00001a72 <fgetc>:
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	ec 01       	movw	r28, r24
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	20 ff       	sbrs	r18, 0
    1a7c:	33 c0       	rjmp	.+102    	; 0x1ae4 <fgetc+0x72>
    1a7e:	26 ff       	sbrs	r18, 6
    1a80:	0a c0       	rjmp	.+20     	; 0x1a96 <fgetc+0x24>
    1a82:	2f 7b       	andi	r18, 0xBF	; 191
    1a84:	2b 83       	std	Y+3, r18	; 0x03
    1a86:	8e 81       	ldd	r24, Y+6	; 0x06
    1a88:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	9f 83       	std	Y+7, r25	; 0x07
    1a8e:	8e 83       	std	Y+6, r24	; 0x06
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	29 c0       	rjmp	.+82     	; 0x1ae8 <fgetc+0x76>
    1a96:	22 ff       	sbrs	r18, 2
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <fgetc+0x46>
    1a9a:	e8 81       	ld	r30, Y
    1a9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a9e:	80 81       	ld	r24, Z
    1aa0:	99 27       	eor	r25, r25
    1aa2:	87 fd       	sbrc	r24, 7
    1aa4:	90 95       	com	r25
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	19 f4       	brne	.+6      	; 0x1ab0 <fgetc+0x3e>
    1aaa:	20 62       	ori	r18, 0x20	; 32
    1aac:	2b 83       	std	Y+3, r18	; 0x03
    1aae:	1a c0       	rjmp	.+52     	; 0x1ae4 <fgetc+0x72>
    1ab0:	31 96       	adiw	r30, 0x01	; 1
    1ab2:	f9 83       	std	Y+1, r31	; 0x01
    1ab4:	e8 83       	st	Y, r30
    1ab6:	0e c0       	rjmp	.+28     	; 0x1ad4 <fgetc+0x62>
    1ab8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1aba:	fb 85       	ldd	r31, Y+11	; 0x0b
    1abc:	09 95       	icall
    1abe:	97 ff       	sbrs	r25, 7
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <fgetc+0x62>
    1ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <fgetc+0x5a>
    1ac8:	80 e1       	ldi	r24, 0x10	; 16
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <fgetc+0x5c>
    1acc:	80 e2       	ldi	r24, 0x20	; 32
    1ace:	82 2b       	or	r24, r18
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
    1ad2:	08 c0       	rjmp	.+16     	; 0x1ae4 <fgetc+0x72>
    1ad4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ad8:	2f 5f       	subi	r18, 0xFF	; 255
    1ada:	3f 4f       	sbci	r19, 0xFF	; 255
    1adc:	3f 83       	std	Y+7, r19	; 0x07
    1ade:	2e 83       	std	Y+6, r18	; 0x06
    1ae0:	99 27       	eor	r25, r25
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <fgetc+0x76>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	9f ef       	ldi	r25, 0xFF	; 255
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <fputc>:
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	18 2f       	mov	r17, r24
    1af8:	09 2f       	mov	r16, r25
    1afa:	eb 01       	movw	r28, r22
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	81 fd       	sbrc	r24, 1
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <fputc+0x1a>
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	20 c0       	rjmp	.+64     	; 0x1b48 <fputc+0x5a>
    1b08:	82 ff       	sbrs	r24, 2
    1b0a:	10 c0       	rjmp	.+32     	; 0x1b2c <fputc+0x3e>
    1b0c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b0e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b10:	2c 81       	ldd	r18, Y+4	; 0x04
    1b12:	3d 81       	ldd	r19, Y+5	; 0x05
    1b14:	42 17       	cp	r20, r18
    1b16:	53 07       	cpc	r21, r19
    1b18:	7c f4       	brge	.+30     	; 0x1b38 <fputc+0x4a>
    1b1a:	e8 81       	ld	r30, Y
    1b1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b1e:	9f 01       	movw	r18, r30
    1b20:	2f 5f       	subi	r18, 0xFF	; 255
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	39 83       	std	Y+1, r19	; 0x01
    1b26:	28 83       	st	Y, r18
    1b28:	10 83       	st	Z, r17
    1b2a:	06 c0       	rjmp	.+12     	; 0x1b38 <fputc+0x4a>
    1b2c:	e8 85       	ldd	r30, Y+8	; 0x08
    1b2e:	f9 85       	ldd	r31, Y+9	; 0x09
    1b30:	81 2f       	mov	r24, r17
    1b32:	09 95       	icall
    1b34:	89 2b       	or	r24, r25
    1b36:	29 f7       	brne	.-54     	; 0x1b02 <fputc+0x14>
    1b38:	2e 81       	ldd	r18, Y+6	; 0x06
    1b3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b3c:	2f 5f       	subi	r18, 0xFF	; 255
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	3f 83       	std	Y+7, r19	; 0x07
    1b42:	2e 83       	std	Y+6, r18	; 0x06
    1b44:	81 2f       	mov	r24, r17
    1b46:	90 2f       	mov	r25, r16
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	08 95       	ret

00001b52 <ungetc>:
    1b52:	fb 01       	movw	r30, r22
    1b54:	23 81       	ldd	r18, Z+3	; 0x03
    1b56:	20 ff       	sbrs	r18, 0
    1b58:	12 c0       	rjmp	.+36     	; 0x1b7e <ungetc+0x2c>
    1b5a:	26 fd       	sbrc	r18, 6
    1b5c:	10 c0       	rjmp	.+32     	; 0x1b7e <ungetc+0x2c>
    1b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	93 07       	cpc	r25, r19
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <ungetc+0x2c>
    1b66:	82 83       	std	Z+2, r24	; 0x02
    1b68:	2f 7d       	andi	r18, 0xDF	; 223
    1b6a:	20 64       	ori	r18, 0x40	; 64
    1b6c:	23 83       	std	Z+3, r18	; 0x03
    1b6e:	26 81       	ldd	r18, Z+6	; 0x06
    1b70:	37 81       	ldd	r19, Z+7	; 0x07
    1b72:	21 50       	subi	r18, 0x01	; 1
    1b74:	31 09       	sbc	r19, r1
    1b76:	37 83       	std	Z+7, r19	; 0x07
    1b78:	26 83       	std	Z+6, r18	; 0x06
    1b7a:	99 27       	eor	r25, r25
    1b7c:	08 95       	ret
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	08 95       	ret

00001b84 <__ultoa_invert>:
    1b84:	fa 01       	movw	r30, r20
    1b86:	aa 27       	eor	r26, r26
    1b88:	28 30       	cpi	r18, 0x08	; 8
    1b8a:	51 f1       	breq	.+84     	; 0x1be0 <__ultoa_invert+0x5c>
    1b8c:	20 31       	cpi	r18, 0x10	; 16
    1b8e:	81 f1       	breq	.+96     	; 0x1bf0 <__ultoa_invert+0x6c>
    1b90:	e8 94       	clt
    1b92:	6f 93       	push	r22
    1b94:	6e 7f       	andi	r22, 0xFE	; 254
    1b96:	6e 5f       	subi	r22, 0xFE	; 254
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ba0:	b1 e0       	ldi	r27, 0x01	; 1
    1ba2:	3e d0       	rcall	.+124    	; 0x1c20 <__ultoa_invert+0x9c>
    1ba4:	b4 e0       	ldi	r27, 0x04	; 4
    1ba6:	3c d0       	rcall	.+120    	; 0x1c20 <__ultoa_invert+0x9c>
    1ba8:	67 0f       	add	r22, r23
    1baa:	78 1f       	adc	r23, r24
    1bac:	89 1f       	adc	r24, r25
    1bae:	9a 1f       	adc	r25, r26
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	68 0f       	add	r22, r24
    1bb4:	79 1f       	adc	r23, r25
    1bb6:	8a 1f       	adc	r24, r26
    1bb8:	91 1d       	adc	r25, r1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	6a 0f       	add	r22, r26
    1bbe:	71 1d       	adc	r23, r1
    1bc0:	81 1d       	adc	r24, r1
    1bc2:	91 1d       	adc	r25, r1
    1bc4:	a1 1d       	adc	r26, r1
    1bc6:	20 d0       	rcall	.+64     	; 0x1c08 <__ultoa_invert+0x84>
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <__ultoa_invert+0x48>
    1bca:	68 94       	set
    1bcc:	3f 91       	pop	r19
    1bce:	2a e0       	ldi	r18, 0x0A	; 10
    1bd0:	26 9f       	mul	r18, r22
    1bd2:	11 24       	eor	r1, r1
    1bd4:	30 19       	sub	r19, r0
    1bd6:	30 5d       	subi	r19, 0xD0	; 208
    1bd8:	31 93       	st	Z+, r19
    1bda:	de f6       	brtc	.-74     	; 0x1b92 <__ultoa_invert+0xe>
    1bdc:	cf 01       	movw	r24, r30
    1bde:	08 95       	ret
    1be0:	46 2f       	mov	r20, r22
    1be2:	47 70       	andi	r20, 0x07	; 7
    1be4:	40 5d       	subi	r20, 0xD0	; 208
    1be6:	41 93       	st	Z+, r20
    1be8:	b3 e0       	ldi	r27, 0x03	; 3
    1bea:	0f d0       	rcall	.+30     	; 0x1c0a <__ultoa_invert+0x86>
    1bec:	c9 f7       	brne	.-14     	; 0x1be0 <__ultoa_invert+0x5c>
    1bee:	f6 cf       	rjmp	.-20     	; 0x1bdc <__ultoa_invert+0x58>
    1bf0:	46 2f       	mov	r20, r22
    1bf2:	4f 70       	andi	r20, 0x0F	; 15
    1bf4:	40 5d       	subi	r20, 0xD0	; 208
    1bf6:	4a 33       	cpi	r20, 0x3A	; 58
    1bf8:	18 f0       	brcs	.+6      	; 0x1c00 <__ultoa_invert+0x7c>
    1bfa:	49 5d       	subi	r20, 0xD9	; 217
    1bfc:	31 fd       	sbrc	r19, 1
    1bfe:	40 52       	subi	r20, 0x20	; 32
    1c00:	41 93       	st	Z+, r20
    1c02:	02 d0       	rcall	.+4      	; 0x1c08 <__ultoa_invert+0x84>
    1c04:	a9 f7       	brne	.-22     	; 0x1bf0 <__ultoa_invert+0x6c>
    1c06:	ea cf       	rjmp	.-44     	; 0x1bdc <__ultoa_invert+0x58>
    1c08:	b4 e0       	ldi	r27, 0x04	; 4
    1c0a:	a6 95       	lsr	r26
    1c0c:	97 95       	ror	r25
    1c0e:	87 95       	ror	r24
    1c10:	77 95       	ror	r23
    1c12:	67 95       	ror	r22
    1c14:	ba 95       	dec	r27
    1c16:	c9 f7       	brne	.-14     	; 0x1c0a <__ultoa_invert+0x86>
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	61 05       	cpc	r22, r1
    1c1c:	71 05       	cpc	r23, r1
    1c1e:	08 95       	ret
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	0a 2e       	mov	r0, r26
    1c26:	06 94       	lsr	r0
    1c28:	57 95       	ror	r21
    1c2a:	47 95       	ror	r20
    1c2c:	37 95       	ror	r19
    1c2e:	27 95       	ror	r18
    1c30:	ba 95       	dec	r27
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__ultoa_invert+0xa2>
    1c34:	62 0f       	add	r22, r18
    1c36:	73 1f       	adc	r23, r19
    1c38:	84 1f       	adc	r24, r20
    1c3a:	95 1f       	adc	r25, r21
    1c3c:	a0 1d       	adc	r26, r0
    1c3e:	08 95       	ret

00001c40 <__ctype_isfalse>:
    1c40:	99 27       	eor	r25, r25
    1c42:	88 27       	eor	r24, r24

00001c44 <__ctype_istrue>:
    1c44:	08 95       	ret

00001c46 <__prologue_saves__>:
    1c46:	2f 92       	push	r2
    1c48:	3f 92       	push	r3
    1c4a:	4f 92       	push	r4
    1c4c:	5f 92       	push	r5
    1c4e:	6f 92       	push	r6
    1c50:	7f 92       	push	r7
    1c52:	8f 92       	push	r8
    1c54:	9f 92       	push	r9
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	ca 1b       	sub	r28, r26
    1c70:	db 0b       	sbc	r29, r27
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	09 94       	ijmp

00001c7e <__epilogue_restores__>:
    1c7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c80:	39 88       	ldd	r3, Y+17	; 0x11
    1c82:	48 88       	ldd	r4, Y+16	; 0x10
    1c84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c90:	b9 84       	ldd	r11, Y+9	; 0x09
    1c92:	c8 84       	ldd	r12, Y+8	; 0x08
    1c94:	df 80       	ldd	r13, Y+7	; 0x07
    1c96:	ee 80       	ldd	r14, Y+6	; 0x06
    1c98:	fd 80       	ldd	r15, Y+5	; 0x05
    1c9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1ca0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca2:	ce 0f       	add	r28, r30
    1ca4:	d1 1d       	adc	r29, r1
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	ed 01       	movw	r28, r26
    1cb2:	08 95       	ret

00001cb4 <_exit>:
    1cb4:	f8 94       	cli

00001cb6 <__stop_program>:
    1cb6:	ff cf       	rjmp	.-2      	; 0x1cb6 <__stop_program>
