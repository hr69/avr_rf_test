
nrf24l01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  0000083e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e8  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000557f  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f8  00000000  00000000  000060d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbc  00000000  00000000  000069cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000afc  00000000  00000000  0000758c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000012e3  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003d1b  00000000  00000000  0000936b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e0  00000000  00000000  0000d086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a6 e0       	ldi	r26, 0x06	; 6
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 31       	cpi	r26, 0x16	; 22
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e4 ea       	ldi	r30, 0xA4	; 164
  8c:	f7 e0       	ldi	r31, 0x07	; 7
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z23usart_transmit_byte_valh>:
/**
 * transmit byte via pass by value
 * @param data data byte to be sent
 */
void usart_transmit_byte_val(uint8_t data){
	 while (!(UCSR0A & (1<<UDRE0)));
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <_Z23usart_transmit_byte_valh+0x4>
	 UDR0 = data;
  b0:	80 93 c6 00 	sts	0x00C6, r24
  b4:	08 95       	ret

000000b6 <_Z12uart_putcharcP6__file>:

/**
 * putchar for streaming file out
 */
int uart_putchar(char ch, FILE *stream)
{
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
	if(ch=='\n')
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	19 f4       	brne	.+6      	; 0xc4 <_Z12uart_putcharcP6__file+0xe>
	uart_putchar('\r',stream);
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z12uart_putcharcP6__file>
	stdio_serial_send_function((uint8_t) ch);
  c4:	8c 2f       	mov	r24, r28
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z23usart_transmit_byte_valh>
	return 0;
}
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <_Z22usart_receive_byte_refPh>:
/**
 * receive byte via reference
 * @param data address of data byte into which the data shall be recieved
 */
void usart_receive_byte_ref(uint8_t *data){
	 while (!(UCSR0A & (1<<RXC0)));
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	20 81       	ld	r18, Z
  d8:	22 23       	and	r18, r18
  da:	ec f7       	brge	.-6      	; 0xd6 <_Z22usart_receive_byte_refPh+0x4>
	 *data = UDR0;
  dc:	20 91 c6 00 	lds	r18, 0x00C6
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <_Z12uart_getcharP6__file>:
/**
 * get char for streaming file in
 */
int uart_getchar(FILE *stream)
{
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	1f 92       	push	r1
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	8c 01       	movw	r16, r24
	char ch;
	stdio_serial_receive_function( (uint8_t *) &ch);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z22usart_receive_byte_refPh>
	
	/* Echo the output back to the terminal */
	uart_putchar(ch,stream);
  fe:	b8 01       	movw	r22, r16
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z12uart_putcharcP6__file>

	return ch;
 106:	89 81       	ldd	r24, Y+1	; 0x01
}
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <_Z23stdio_serial_initializev>:
/**
 * initializing the stdio file stream over uart
 */
void stdio_serial_initialize()
{
	uart_str = fdevopen(uart_putchar,uart_getchar);	
 116:	63 e7       	ldi	r22, 0x73	; 115
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	8b e5       	ldi	r24, 0x5B	; 91
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 3b 02 	call	0x476	; 0x476 <fdevopen>
 122:	90 93 07 01 	sts	0x0107, r25
 126:	80 93 06 01 	sts	0x0106, r24
	stdout = stdin = uart_str;
 12a:	90 93 0d 01 	sts	0x010D, r25
 12e:	80 93 0c 01 	sts	0x010C, r24
 132:	90 93 0f 01 	sts	0x010F, r25
 136:	80 93 0e 01 	sts	0x010E, r24
 13a:	08 95       	ret

0000013c <main>:

#include "RF24-master/RF24.h"


int main(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	60 97       	sbiw	r28, 0x10	; 16
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 * initialize the usart baud rate
 * @param baud_rate the baud rate for teh usart module
 */
void usart_set_baud_rate(unsigned long baud_rate){
	unsigned int ubrr = (F_CPU/16/baud_rate)-1;
	UBRR0H = (unsigned char)(ubrr>>8);
 150:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	80 93 c4 00 	sts	0x00C4, r24
 * @param stop_bits	0->1 stop bit, 1-> 2 stop bits
 * @param char_size	0->5-bit, 1->6-bit, 2->7-bit, 3->8-bit,7->9-bit
 * @param pol		0->tx or rising, rx on falling, 1-> tx on falling, rx on rising
 */
void usart_setup(uint8_t mode, uint8_t parity, uint8_t stop_bits, uint8_t char_size,uint8_t pol){
	 UCSR0C =  (mode<<6) | (parity<<4) | (stop_bits<<3) |(char_size<<1) | (pol<<0);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 c2 00 	sts	0x00C2, r24

/**
 * enable the USART tx and rx
 */
void usart_enable(){
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 160:	88 e1       	ldi	r24, 0x18	; 24
 162:	80 93 c1 00 	sts	0x00C1, r24
	
	usart_set_baud_rate(9600);
	usart_setup(0,0,0,3,0);
	usart_enable();
	stdio_serial_initialize();
 166:	0e 94 8b 00 	call	0x116	; 0x116 <_Z23stdio_serial_initializev>

	RF24 radio;
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN4RF24C1Ev>


	radio.begin();
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN4RF245beginEv>
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0x3e>

0000017c <_Z21spi_master_initializev>:
/**
 * initialize the SPI module as master
 */
void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	8c 62       	ori	r24, 0x2C	; 44
 180:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
 182:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
 184:	8c b5       	in	r24, 0x2c	; 44
 186:	80 65       	ori	r24, 0x50	; 80
 188:	8c bd       	out	0x2c, r24	; 44
 18a:	08 95       	ret

0000018c <_Z28spi_master_transmit_byte_valh>:
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
 18c:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
 18e:	0d b4       	in	r0, 0x2d	; 45
 190:	07 fe       	sbrs	r0, 7
 192:	fd cf       	rjmp	.-6      	; 0x18e <_Z28spi_master_transmit_byte_valh+0x2>
	return SPDR;
 194:	8e b5       	in	r24, 0x2e	; 46
}
 196:	08 95       	ret

00000198 <__vector_14>:
volatile int us_10 = 0;
volatile int us;



ISR(TIMER0_COMPA_vect){
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
	us_10++;
 1a6:	80 91 0a 01 	lds	r24, 0x010A
 1aa:	90 91 0b 01 	lds	r25, 0x010B
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 0b 01 	sts	0x010B, r25
 1b4:	80 93 0a 01 	sts	0x010A, r24
	if(us_10>=100){  ////if 8 Mhz make it >100 ,  if 16 Mhz   make it  > 200
 1b8:	80 91 0a 01 	lds	r24, 0x010A
 1bc:	90 91 0b 01 	lds	r25, 0x010B
 1c0:	84 36       	cpi	r24, 0x64	; 100
 1c2:	91 05       	cpc	r25, r1
 1c4:	74 f0       	brlt	.+28     	; 0x1e2 <__vector_14+0x4a>
		us_10 = 0;
 1c6:	10 92 0b 01 	sts	0x010B, r1
 1ca:	10 92 0a 01 	sts	0x010A, r1
		us ++;
 1ce:	80 91 08 01 	lds	r24, 0x0108
 1d2:	90 91 09 01 	lds	r25, 0x0109
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	90 93 09 01 	sts	0x0109, r25
 1dc:	80 93 08 01 	sts	0x0108, r24
		asm("nop");
 1e0:	00 00       	nop
	}
}
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_ZN4RF243csnEb>:
	  _SPI.setDataMode(RF24_DATA_MODE);
	  _SPI.setClockDivider(spi_speed ? spi_speed : RF24_CLOCK_DIVIDER);
	  _SPI.chipSelect(csn_pin);
	  delayMicroseconds(5);
#elif defined (__AVR__) 
	  if (mode == HIGH) {
 1f0:	66 23       	and	r22, r22
 1f2:	41 f0       	breq	.+16     	; 0x204 <_ZN4RF243csnEb+0x14>
		  PORTB |= (1<<PINB2);  	// SCK->CSN HIGH
 1f4:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	87 ec       	ldi	r24, 0xC7	; 199
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <_ZN4RF243csnEb+0xa>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_ZN4RF243csnEb+0x10>
 200:	00 00       	nop
 202:	08 95       	ret
		  delayMicroseconds(100); // allow csn to settle.
	  }
	  else {
		  PORTB &= ~(1<<PINB2);	// SCK->CSN LOW
 204:	2a 98       	cbi	0x05, 2	; 5
 206:	9d e1       	ldi	r25, 0x1D	; 29
 208:	9a 95       	dec	r25
 20a:	f1 f7       	brne	.-4      	; 0x208 <_ZN4RF243csnEb+0x18>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
 218:	16 2f       	mov	r17, r22

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 21a:	0e 94 be 00 	call	0x17c	; 0x17c <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	ce 01       	movw	r24, r28
 222:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
  result = *++prx;   // result is 2nd byte of receive buffer  

	#elif defined(__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( R_REGISTER | ( REGISTER_MASK & reg ) );
 226:	81 2f       	mov	r24, r17
 228:	8f 71       	andi	r24, 0x1F	; 31
 22a:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
	result = AVR_SPI_MSTR_TRANSMIT_VAL(0xff);
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
 234:	18 2f       	mov	r17, r24
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return result;
}
 23e:	81 2f       	mov	r24, r17
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	08 95       	ret

00000248 <_ZN4RF2414write_registerEhh>:
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	16 2f       	mov	r17, r22
 254:	04 2f       	mov	r16, r20

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 256:	0e 94 be 00 	call	0x17c	; 0x17c <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	ce 01       	movw	r24, r28
 25e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
	_SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
	status = *prx++; // status is 1st byte of receive buffer

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
 262:	81 2f       	mov	r24, r17
 264:	8f 71       	andi	r24, 0x1F	; 31
 266:	80 62       	ori	r24, 0x20	; 32
 268:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
 26c:	18 2f       	mov	r17, r24
	AVR_SPI_MSTR_TRANSMIT_VAL(value);
 26e:	80 2f       	mov	r24, r16
 270:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	ce 01       	movw	r24, r28
 278:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
 27c:	81 2f       	mov	r24, r17
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <_ZN4RF248spiTransEh>:
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
 290:	16 2f       	mov	r17, r22

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 292:	0e 94 be 00 	call	0x17c	; 0x17c <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	ce 01       	movw	r24, r28
 29a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
    csn(LOW);
    status = _SPI.transfer( cmd );

  #elif defined (__AVR__)
  beginTransaction();
  status = AVR_SPI_MSTR_TRANSMIT_VAL( cmd );
 29e:	81 2f       	mov	r24, r17
 2a0:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
 2a4:	18 2f       	mov	r17, r24
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	ce 01       	movw	r24, r28
 2aa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
 2ae:	81 2f       	mov	r24, r17
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	08 95       	ret

000002b8 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
 2b8:	62 ee       	ldi	r22, 0xE2	; 226
 2ba:	0e 94 44 01 	call	0x288	; 0x288 <_ZN4RF248spiTransEh>
}
 2be:	08 95       	ret

000002c0 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
 2c0:	61 ee       	ldi	r22, 0xE1	; 225
 2c2:	0e 94 44 01 	call	0x288	; 0x288 <_ZN4RF248spiTransEh>
}
 2c6:	08 95       	ret

000002c8 <_ZN4RF24C1Ev>:
  printf_P(PSTR("\r\n"));
}
#endif
/****************************************************************************/

RF24::RF24():p_variant(false),
 2c8:	fc 01       	movw	r30, r24
payload_size(32), dynamic_payloads_enabled(false), addr_width(5)
 2ca:	12 82       	std	Z+2, r1	; 0x02
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	83 83       	std	Z+3, r24	; 0x03
 2d0:	14 82       	std	Z+4, r1	; 0x04
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	82 87       	std	Z+10, r24	; 0x0a
{
	pipe0_reading_address[0]=0;
 2d6:	15 82       	std	Z+5, r1	; 0x05
 2d8:	08 95       	ret

000002da <_ZN4RF2410setChannelEh>:
#endif

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 2da:	46 2f       	mov	r20, r22
  const uint8_t max_channel = 127;
  write_register(RF_CH,rf24_min(channel,max_channel));
 2dc:	60 38       	cpi	r22, 0x80	; 128
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <_ZN4RF2410setChannelEh+0x8>
 2e0:	4f e7       	ldi	r20, 0x7F	; 127
 2e2:	65 e0       	ldi	r22, 0x05	; 5
 2e4:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>
 2e8:	08 95       	ret

000002ea <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
   uint8_t cfg = read_register(CONFIG);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	0e 94 08 01 	call	0x210	; 0x210 <_ZN4RF2413read_registerEh>

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
 2f6:	81 fd       	sbrc	r24, 1
 2f8:	10 c0       	rjmp	.+32     	; 0x31a <_ZN4RF247powerUpEv+0x30>
      write_register(CONFIG,read_register(CONFIG) | _BV(PWR_UP));
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 08 01 	call	0x210	; 0x210 <_ZN4RF2413read_registerEh>
 302:	48 2f       	mov	r20, r24
 304:	42 60       	ori	r20, 0x02	; 2
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	8f e0       	ldi	r24, 0x0F	; 15
 310:	97 e2       	ldi	r25, 0x27	; 39
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <_ZN4RF247powerUpEv+0x28>
 316:	00 c0       	rjmp	.+0      	; 0x318 <_ZN4RF247powerUpEv+0x2e>
 318:	00 00       	nop
	  _delay_ms(5);
	  #else
      delay(5);
	  #endif
   }
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
 326:	0e 94 be 00 	call	0x17c	; 0x17c <_Z21spi_master_initializev>
	#endif
    csn(LOW);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
    _SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	csn(HIGH);
  #elif defined (__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( ACTIVATE );
 332:	80 e5       	ldi	r24, 0x50	; 80
 334:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
	AVR_SPI_MSTR_TRANSMIT_VAL( 0x73 );
 338:	83 e7       	ldi	r24, 0x73	; 115
 33a:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z28spi_master_transmit_byte_valh>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	ce 01       	movw	r24, r28
 342:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
  #endif

}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	16 2f       	mov	r17, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
 35a:	66 e0       	ldi	r22, 0x06	; 6
 35c:	0e 94 08 01 	call	0x210	; 0x210 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 360:	87 7d       	andi	r24, 0xD7	; 215
 362:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
  #endif
  if( speed == RF24_250KBPS )
 364:	12 30       	cpi	r17, 0x02	; 2
 366:	59 f4       	brne	.+22     	; 0x37e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x32>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
 368:	80 62       	ori	r24, 0x20	; 32
 36a:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
 36c:	0b e9       	ldi	r16, 0x9B	; 155
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	0b 87       	std	Y+11, r16	; 0x0b
 376:	1c 87       	std	Y+12, r17	; 0x0c
 378:	2d 87       	std	Y+13, r18	; 0x0d
 37a:	3e 87       	std	Y+14, r19	; 0x0e
 37c:	15 c0       	rjmp	.+42     	; 0x3a8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 37e:	11 30       	cpi	r17, 0x01	; 1
 380:	49 f0       	breq	.+18     	; 0x394 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
 382:	05 e5       	ldi	r16, 0x55	; 85
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	0b 87       	std	Y+11, r16	; 0x0b
 38c:	1c 87       	std	Y+12, r17	; 0x0c
 38e:	2d 87       	std	Y+13, r18	; 0x0d
 390:	3e 87       	std	Y+14, r19	; 0x0e
 392:	0a c0       	rjmp	.+20     	; 0x3a8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
 394:	88 60       	ori	r24, 0x08	; 8
 396:	f8 2e       	mov	r15, r24
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txRxDelay=190;
      #else //16Mhz Arduino	  
	  txRxDelay=65;
 398:	01 e4       	ldi	r16, 0x41	; 65
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	0b 87       	std	Y+11, r16	; 0x0b
 3a2:	1c 87       	std	Y+12, r17	; 0x0c
 3a4:	2d 87       	std	Y+13, r18	; 0x0d
 3a6:	3e 87       	std	Y+14, r19	; 0x0e
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
 3a8:	4f 2d       	mov	r20, r15
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	ce 01       	movw	r24, r28
 3ae:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
 3b2:	66 e0       	ldi	r22, 0x06	; 6
 3b4:	ce 01       	movw	r24, r28
 3b6:	0e 94 08 01 	call	0x210	; 0x210 <_ZN4RF2413read_registerEh>
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	f8 12       	cpse	r15, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
  {
    result = true;
  }
  return result;
}
 3c0:	89 2f       	mov	r24, r25
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	08 95       	ret

000003ce <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
  #elif defined(LITTLEWIRE)
    pinMode(csn_pin,OUTPUT);
    _SPI.begin();
    csn(HIGH);
  #elif defined(__AVR__)
	CE_PORT |= (1<<CE_BIT);
 3d4:	5f 9a       	sbi	0x0b, 7	; 11
	CSN_PORT|=(1<<CSN_BIT);
 3d6:	28 9a       	sbi	0x05, 0	; 5
	spi_master_initialize();
 3d8:	0e 94 be 00 	call	0x17c	; 0x17c <_Z21spi_master_initializev>
	csn(HIGH);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN4RF243csnEb>
 3e4:	8f e0       	ldi	r24, 0x0F	; 15
 3e6:	97 e2       	ldi	r25, 0x27	; 39
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <_ZN4RF245beginEv+0x1a>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <_ZN4RF245beginEv+0x20>
 3ee:	00 00       	nop
  #else
  delay( 5 ) ;
  #endif

  // Reset CONFIG and enable 16-bit CRC.
  write_register( CONFIG, 0b00001100 ) ;
 3f0:	4c e0       	ldi	r20, 0x0C	; 12
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	ce 01       	movw	r24, r28
 3f6:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
 3fa:	4f e5       	ldi	r20, 0x5F	; 95
 3fc:	64 e0       	ldi	r22, 0x04	; 4
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	ce 01       	movw	r24, r28
 408:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN4RF2411setDataRateE15rf24_datarate_e>
 40c:	88 23       	and	r24, r24
 40e:	11 f0       	breq	.+4      	; 0x414 <_ZN4RF245beginEv+0x46>
  {
    p_variant = true ;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	8a 83       	std	Y+2, r24	; 0x02
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	ce 01       	movw	r24, r28
 418:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
 41c:	ce 01       	movw	r24, r28
 41e:	0e 94 90 01 	call	0x320	; 0x320 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	6d e1       	ldi	r22, 0x1D	; 29
 426:	ce 01       	movw	r24, r28
 428:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	6c e1       	ldi	r22, 0x1C	; 28
 430:	ce 01       	movw	r24, r28
 432:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
 436:	40 e7       	ldi	r20, 0x70	; 112
 438:	67 e0       	ldi	r22, 0x07	; 7
 43a:	ce 01       	movw	r24, r28
 43c:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
 440:	6c e4       	ldi	r22, 0x4C	; 76
 442:	ce 01       	movw	r24, r28
 444:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
 448:	ce 01       	movw	r24, r28
 44a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN4RF248flush_rxEv>
  flush_tx();
 44e:	ce 01       	movw	r24, r28
 450:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
 454:	ce 01       	movw	r24, r28
 456:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	ce 01       	movw	r24, r28
 45e:	0e 94 08 01 	call	0x210	; 0x210 <_ZN4RF2413read_registerEh>
 462:	48 2f       	mov	r20, r24
 464:	4e 7f       	andi	r20, 0xFE	; 254
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 24 01 	call	0x248	; 0x248 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
}
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <fdevopen>:
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ec 01       	movw	r28, r24
 480:	8b 01       	movw	r16, r22
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	31 f4       	brne	.+12     	; 0x492 <fdevopen+0x1c>
 486:	61 15       	cp	r22, r1
 488:	71 05       	cpc	r23, r1
 48a:	19 f4       	brne	.+6      	; 0x492 <fdevopen+0x1c>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	38 c0       	rjmp	.+112    	; 0x502 <fdevopen+0x8c>
 492:	6e e0       	ldi	r22, 0x0E	; 14
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 86 02 	call	0x50c	; 0x50c <calloc>
 49e:	fc 01       	movw	r30, r24
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	a1 f3       	breq	.-24     	; 0x48c <fdevopen+0x16>
 4a4:	80 e8       	ldi	r24, 0x80	; 128
 4a6:	83 83       	std	Z+3, r24	; 0x03
 4a8:	01 15       	cp	r16, r1
 4aa:	11 05       	cpc	r17, r1
 4ac:	71 f0       	breq	.+28     	; 0x4ca <fdevopen+0x54>
 4ae:	13 87       	std	Z+11, r17	; 0x0b
 4b0:	02 87       	std	Z+10, r16	; 0x0a
 4b2:	81 e8       	ldi	r24, 0x81	; 129
 4b4:	83 83       	std	Z+3, r24	; 0x03
 4b6:	80 91 0c 01 	lds	r24, 0x010C
 4ba:	90 91 0d 01 	lds	r25, 0x010D
 4be:	89 2b       	or	r24, r25
 4c0:	21 f4       	brne	.+8      	; 0x4ca <fdevopen+0x54>
 4c2:	f0 93 0d 01 	sts	0x010D, r31
 4c6:	e0 93 0c 01 	sts	0x010C, r30
 4ca:	20 97       	sbiw	r28, 0x00	; 0
 4cc:	c9 f0       	breq	.+50     	; 0x500 <fdevopen+0x8a>
 4ce:	d1 87       	std	Z+9, r29	; 0x09
 4d0:	c0 87       	std	Z+8, r28	; 0x08
 4d2:	83 81       	ldd	r24, Z+3	; 0x03
 4d4:	82 60       	ori	r24, 0x02	; 2
 4d6:	83 83       	std	Z+3, r24	; 0x03
 4d8:	80 91 0e 01 	lds	r24, 0x010E
 4dc:	90 91 0f 01 	lds	r25, 0x010F
 4e0:	89 2b       	or	r24, r25
 4e2:	71 f4       	brne	.+28     	; 0x500 <fdevopen+0x8a>
 4e4:	f0 93 0f 01 	sts	0x010F, r31
 4e8:	e0 93 0e 01 	sts	0x010E, r30
 4ec:	80 91 10 01 	lds	r24, 0x0110
 4f0:	90 91 11 01 	lds	r25, 0x0111
 4f4:	89 2b       	or	r24, r25
 4f6:	21 f4       	brne	.+8      	; 0x500 <fdevopen+0x8a>
 4f8:	f0 93 11 01 	sts	0x0111, r31
 4fc:	e0 93 10 01 	sts	0x0110, r30
 500:	cf 01       	movw	r24, r30
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	08 95       	ret

0000050c <calloc>:
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	86 9f       	mul	r24, r22
 516:	80 01       	movw	r16, r0
 518:	87 9f       	mul	r24, r23
 51a:	10 0d       	add	r17, r0
 51c:	96 9f       	mul	r25, r22
 51e:	10 0d       	add	r17, r0
 520:	11 24       	eor	r1, r1
 522:	c8 01       	movw	r24, r16
 524:	0e 94 a2 02 	call	0x544	; 0x544 <malloc>
 528:	ec 01       	movw	r28, r24
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	29 f0       	breq	.+10     	; 0x538 <calloc+0x2c>
 52e:	a8 01       	movw	r20, r16
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	0e 94 c9 03 	call	0x792	; 0x792 <memset>
 538:	ce 01       	movw	r24, r28
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	08 95       	ret

00000544 <malloc>:
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	91 05       	cpc	r25, r1
 54c:	10 f4       	brcc	.+4      	; 0x552 <malloc+0xe>
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	e0 91 14 01 	lds	r30, 0x0114
 556:	f0 91 15 01 	lds	r31, 0x0115
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	a0 e0       	ldi	r26, 0x00	; 0
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	30 97       	sbiw	r30, 0x00	; 0
 564:	39 f1       	breq	.+78     	; 0x5b4 <malloc+0x70>
 566:	40 81       	ld	r20, Z
 568:	51 81       	ldd	r21, Z+1	; 0x01
 56a:	48 17       	cp	r20, r24
 56c:	59 07       	cpc	r21, r25
 56e:	b8 f0       	brcs	.+46     	; 0x59e <malloc+0x5a>
 570:	48 17       	cp	r20, r24
 572:	59 07       	cpc	r21, r25
 574:	71 f4       	brne	.+28     	; 0x592 <malloc+0x4e>
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	93 81       	ldd	r25, Z+3	; 0x03
 57a:	10 97       	sbiw	r26, 0x00	; 0
 57c:	29 f0       	breq	.+10     	; 0x588 <malloc+0x44>
 57e:	13 96       	adiw	r26, 0x03	; 3
 580:	9c 93       	st	X, r25
 582:	8e 93       	st	-X, r24
 584:	12 97       	sbiw	r26, 0x02	; 2
 586:	2c c0       	rjmp	.+88     	; 0x5e0 <malloc+0x9c>
 588:	90 93 15 01 	sts	0x0115, r25
 58c:	80 93 14 01 	sts	0x0114, r24
 590:	27 c0       	rjmp	.+78     	; 0x5e0 <malloc+0x9c>
 592:	21 15       	cp	r18, r1
 594:	31 05       	cpc	r19, r1
 596:	31 f0       	breq	.+12     	; 0x5a4 <malloc+0x60>
 598:	42 17       	cp	r20, r18
 59a:	53 07       	cpc	r21, r19
 59c:	18 f0       	brcs	.+6      	; 0x5a4 <malloc+0x60>
 59e:	a9 01       	movw	r20, r18
 5a0:	db 01       	movw	r26, r22
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <malloc+0x62>
 5a4:	ef 01       	movw	r28, r30
 5a6:	9a 01       	movw	r18, r20
 5a8:	bd 01       	movw	r22, r26
 5aa:	df 01       	movw	r26, r30
 5ac:	02 80       	ldd	r0, Z+2	; 0x02
 5ae:	f3 81       	ldd	r31, Z+3	; 0x03
 5b0:	e0 2d       	mov	r30, r0
 5b2:	d7 cf       	rjmp	.-82     	; 0x562 <malloc+0x1e>
 5b4:	21 15       	cp	r18, r1
 5b6:	31 05       	cpc	r19, r1
 5b8:	f9 f0       	breq	.+62     	; 0x5f8 <malloc+0xb4>
 5ba:	28 1b       	sub	r18, r24
 5bc:	39 0b       	sbc	r19, r25
 5be:	24 30       	cpi	r18, 0x04	; 4
 5c0:	31 05       	cpc	r19, r1
 5c2:	80 f4       	brcc	.+32     	; 0x5e4 <malloc+0xa0>
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	9b 81       	ldd	r25, Y+3	; 0x03
 5c8:	61 15       	cp	r22, r1
 5ca:	71 05       	cpc	r23, r1
 5cc:	21 f0       	breq	.+8      	; 0x5d6 <malloc+0x92>
 5ce:	fb 01       	movw	r30, r22
 5d0:	93 83       	std	Z+3, r25	; 0x03
 5d2:	82 83       	std	Z+2, r24	; 0x02
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <malloc+0x9a>
 5d6:	90 93 15 01 	sts	0x0115, r25
 5da:	80 93 14 01 	sts	0x0114, r24
 5de:	fe 01       	movw	r30, r28
 5e0:	32 96       	adiw	r30, 0x02	; 2
 5e2:	44 c0       	rjmp	.+136    	; 0x66c <malloc+0x128>
 5e4:	fe 01       	movw	r30, r28
 5e6:	e2 0f       	add	r30, r18
 5e8:	f3 1f       	adc	r31, r19
 5ea:	81 93       	st	Z+, r24
 5ec:	91 93       	st	Z+, r25
 5ee:	22 50       	subi	r18, 0x02	; 2
 5f0:	31 09       	sbc	r19, r1
 5f2:	39 83       	std	Y+1, r19	; 0x01
 5f4:	28 83       	st	Y, r18
 5f6:	3a c0       	rjmp	.+116    	; 0x66c <malloc+0x128>
 5f8:	20 91 12 01 	lds	r18, 0x0112
 5fc:	30 91 13 01 	lds	r19, 0x0113
 600:	23 2b       	or	r18, r19
 602:	41 f4       	brne	.+16     	; 0x614 <malloc+0xd0>
 604:	20 91 02 01 	lds	r18, 0x0102
 608:	30 91 03 01 	lds	r19, 0x0103
 60c:	30 93 13 01 	sts	0x0113, r19
 610:	20 93 12 01 	sts	0x0112, r18
 614:	20 91 00 01 	lds	r18, 0x0100
 618:	30 91 01 01 	lds	r19, 0x0101
 61c:	21 15       	cp	r18, r1
 61e:	31 05       	cpc	r19, r1
 620:	41 f4       	brne	.+16     	; 0x632 <malloc+0xee>
 622:	2d b7       	in	r18, 0x3d	; 61
 624:	3e b7       	in	r19, 0x3e	; 62
 626:	40 91 04 01 	lds	r20, 0x0104
 62a:	50 91 05 01 	lds	r21, 0x0105
 62e:	24 1b       	sub	r18, r20
 630:	35 0b       	sbc	r19, r21
 632:	e0 91 12 01 	lds	r30, 0x0112
 636:	f0 91 13 01 	lds	r31, 0x0113
 63a:	e2 17       	cp	r30, r18
 63c:	f3 07       	cpc	r31, r19
 63e:	a0 f4       	brcc	.+40     	; 0x668 <malloc+0x124>
 640:	2e 1b       	sub	r18, r30
 642:	3f 0b       	sbc	r19, r31
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	78 f0       	brcs	.+30     	; 0x668 <malloc+0x124>
 64a:	ac 01       	movw	r20, r24
 64c:	4e 5f       	subi	r20, 0xFE	; 254
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	24 17       	cp	r18, r20
 652:	35 07       	cpc	r19, r21
 654:	48 f0       	brcs	.+18     	; 0x668 <malloc+0x124>
 656:	4e 0f       	add	r20, r30
 658:	5f 1f       	adc	r21, r31
 65a:	50 93 13 01 	sts	0x0113, r21
 65e:	40 93 12 01 	sts	0x0112, r20
 662:	81 93       	st	Z+, r24
 664:	91 93       	st	Z+, r25
 666:	02 c0       	rjmp	.+4      	; 0x66c <malloc+0x128>
 668:	e0 e0       	ldi	r30, 0x00	; 0
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	cf 01       	movw	r24, r30
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <free>:
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	09 f4       	brne	.+2      	; 0x67e <free+0xa>
 67c:	87 c0       	rjmp	.+270    	; 0x78c <free+0x118>
 67e:	fc 01       	movw	r30, r24
 680:	32 97       	sbiw	r30, 0x02	; 2
 682:	13 82       	std	Z+3, r1	; 0x03
 684:	12 82       	std	Z+2, r1	; 0x02
 686:	c0 91 14 01 	lds	r28, 0x0114
 68a:	d0 91 15 01 	lds	r29, 0x0115
 68e:	20 97       	sbiw	r28, 0x00	; 0
 690:	81 f4       	brne	.+32     	; 0x6b2 <free+0x3e>
 692:	20 81       	ld	r18, Z
 694:	31 81       	ldd	r19, Z+1	; 0x01
 696:	28 0f       	add	r18, r24
 698:	39 1f       	adc	r19, r25
 69a:	80 91 12 01 	lds	r24, 0x0112
 69e:	90 91 13 01 	lds	r25, 0x0113
 6a2:	82 17       	cp	r24, r18
 6a4:	93 07       	cpc	r25, r19
 6a6:	79 f5       	brne	.+94     	; 0x706 <free+0x92>
 6a8:	f0 93 13 01 	sts	0x0113, r31
 6ac:	e0 93 12 01 	sts	0x0112, r30
 6b0:	6d c0       	rjmp	.+218    	; 0x78c <free+0x118>
 6b2:	de 01       	movw	r26, r28
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	ae 17       	cp	r26, r30
 6ba:	bf 07       	cpc	r27, r31
 6bc:	50 f4       	brcc	.+20     	; 0x6d2 <free+0x5e>
 6be:	12 96       	adiw	r26, 0x02	; 2
 6c0:	4d 91       	ld	r20, X+
 6c2:	5c 91       	ld	r21, X
 6c4:	13 97       	sbiw	r26, 0x03	; 3
 6c6:	9d 01       	movw	r18, r26
 6c8:	41 15       	cp	r20, r1
 6ca:	51 05       	cpc	r21, r1
 6cc:	09 f1       	breq	.+66     	; 0x710 <free+0x9c>
 6ce:	da 01       	movw	r26, r20
 6d0:	f3 cf       	rjmp	.-26     	; 0x6b8 <free+0x44>
 6d2:	b3 83       	std	Z+3, r27	; 0x03
 6d4:	a2 83       	std	Z+2, r26	; 0x02
 6d6:	40 81       	ld	r20, Z
 6d8:	51 81       	ldd	r21, Z+1	; 0x01
 6da:	84 0f       	add	r24, r20
 6dc:	95 1f       	adc	r25, r21
 6de:	8a 17       	cp	r24, r26
 6e0:	9b 07       	cpc	r25, r27
 6e2:	71 f4       	brne	.+28     	; 0x700 <free+0x8c>
 6e4:	8d 91       	ld	r24, X+
 6e6:	9c 91       	ld	r25, X
 6e8:	11 97       	sbiw	r26, 0x01	; 1
 6ea:	84 0f       	add	r24, r20
 6ec:	95 1f       	adc	r25, r21
 6ee:	02 96       	adiw	r24, 0x02	; 2
 6f0:	91 83       	std	Z+1, r25	; 0x01
 6f2:	80 83       	st	Z, r24
 6f4:	12 96       	adiw	r26, 0x02	; 2
 6f6:	8d 91       	ld	r24, X+
 6f8:	9c 91       	ld	r25, X
 6fa:	13 97       	sbiw	r26, 0x03	; 3
 6fc:	93 83       	std	Z+3, r25	; 0x03
 6fe:	82 83       	std	Z+2, r24	; 0x02
 700:	21 15       	cp	r18, r1
 702:	31 05       	cpc	r19, r1
 704:	29 f4       	brne	.+10     	; 0x710 <free+0x9c>
 706:	f0 93 15 01 	sts	0x0115, r31
 70a:	e0 93 14 01 	sts	0x0114, r30
 70e:	3e c0       	rjmp	.+124    	; 0x78c <free+0x118>
 710:	d9 01       	movw	r26, r18
 712:	13 96       	adiw	r26, 0x03	; 3
 714:	fc 93       	st	X, r31
 716:	ee 93       	st	-X, r30
 718:	12 97       	sbiw	r26, 0x02	; 2
 71a:	4d 91       	ld	r20, X+
 71c:	5d 91       	ld	r21, X+
 71e:	a4 0f       	add	r26, r20
 720:	b5 1f       	adc	r27, r21
 722:	ea 17       	cp	r30, r26
 724:	fb 07       	cpc	r31, r27
 726:	79 f4       	brne	.+30     	; 0x746 <free+0xd2>
 728:	80 81       	ld	r24, Z
 72a:	91 81       	ldd	r25, Z+1	; 0x01
 72c:	84 0f       	add	r24, r20
 72e:	95 1f       	adc	r25, r21
 730:	02 96       	adiw	r24, 0x02	; 2
 732:	d9 01       	movw	r26, r18
 734:	11 96       	adiw	r26, 0x01	; 1
 736:	9c 93       	st	X, r25
 738:	8e 93       	st	-X, r24
 73a:	82 81       	ldd	r24, Z+2	; 0x02
 73c:	93 81       	ldd	r25, Z+3	; 0x03
 73e:	13 96       	adiw	r26, 0x03	; 3
 740:	9c 93       	st	X, r25
 742:	8e 93       	st	-X, r24
 744:	12 97       	sbiw	r26, 0x02	; 2
 746:	e0 e0       	ldi	r30, 0x00	; 0
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	9b 81       	ldd	r25, Y+3	; 0x03
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	19 f0       	breq	.+6      	; 0x758 <free+0xe4>
 752:	fe 01       	movw	r30, r28
 754:	ec 01       	movw	r28, r24
 756:	f9 cf       	rjmp	.-14     	; 0x74a <free+0xd6>
 758:	ce 01       	movw	r24, r28
 75a:	02 96       	adiw	r24, 0x02	; 2
 75c:	28 81       	ld	r18, Y
 75e:	39 81       	ldd	r19, Y+1	; 0x01
 760:	82 0f       	add	r24, r18
 762:	93 1f       	adc	r25, r19
 764:	20 91 12 01 	lds	r18, 0x0112
 768:	30 91 13 01 	lds	r19, 0x0113
 76c:	28 17       	cp	r18, r24
 76e:	39 07       	cpc	r19, r25
 770:	69 f4       	brne	.+26     	; 0x78c <free+0x118>
 772:	30 97       	sbiw	r30, 0x00	; 0
 774:	29 f4       	brne	.+10     	; 0x780 <free+0x10c>
 776:	10 92 15 01 	sts	0x0115, r1
 77a:	10 92 14 01 	sts	0x0114, r1
 77e:	02 c0       	rjmp	.+4      	; 0x784 <free+0x110>
 780:	13 82       	std	Z+3, r1	; 0x03
 782:	12 82       	std	Z+2, r1	; 0x02
 784:	d0 93 13 01 	sts	0x0113, r29
 788:	c0 93 12 01 	sts	0x0112, r28
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	08 95       	ret

00000792 <memset>:
 792:	dc 01       	movw	r26, r24
 794:	01 c0       	rjmp	.+2      	; 0x798 <memset+0x6>
 796:	6d 93       	st	X+, r22
 798:	41 50       	subi	r20, 0x01	; 1
 79a:	50 40       	sbci	r21, 0x00	; 0
 79c:	e0 f7       	brcc	.-8      	; 0x796 <memset+0x4>
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
