
nrf24l01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000052e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800106  00800106  000005c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000651  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000348  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00001031  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034c  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z23usart_transmit_byte_valh>:
/**
 * transmit byte via pass by value
 * @param data data byte to be sent
 */
void usart_transmit_byte_val(uint8_t data){
	 while (!(UCSR0A & (1<<UDRE0)));
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <_Z23usart_transmit_byte_valh+0x4>
	 UDR0 = data;
  b0:	80 93 c6 00 	sts	0x00C6, r24
  b4:	08 95       	ret

000000b6 <_Z12uart_putcharcP6__file>:

/**
 * putchar for streaming file out
 */
int uart_putchar(char ch, FILE *stream)
{
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
	if(ch=='\n')
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	19 f4       	brne	.+6      	; 0xc4 <_Z12uart_putcharcP6__file+0xe>
	uart_putchar('\r',stream);
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z12uart_putcharcP6__file>
	stdio_serial_send_function((uint8_t) ch);
  c4:	8c 2f       	mov	r24, r28
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z23usart_transmit_byte_valh>
	return 0;
}
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <_Z22usart_receive_byte_refPh>:
/**
 * receive byte via reference
 * @param data address of data byte into which the data shall be recieved
 */
void usart_receive_byte_ref(uint8_t *data){
	 while (!(UCSR0A & (1<<RXC0)));
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	20 81       	ld	r18, Z
  d8:	22 23       	and	r18, r18
  da:	ec f7       	brge	.-6      	; 0xd6 <_Z22usart_receive_byte_refPh+0x4>
	 *data = UDR0;
  dc:	20 91 c6 00 	lds	r18, 0x00C6
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <_Z12uart_getcharP6__file>:
/**
 * get char for streaming file in
 */
int uart_getchar(FILE *stream)
{
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	1f 92       	push	r1
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	8c 01       	movw	r16, r24
	char ch;
	stdio_serial_receive_function( (uint8_t *) &ch);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z22usart_receive_byte_refPh>
	
	/* Echo the output back to the terminal */
	uart_putchar(ch,stream);
  fe:	b8 01       	movw	r22, r16
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z12uart_putcharcP6__file>

	return ch;
 106:	89 81       	ldd	r24, Y+1	; 0x01
}
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <_Z23stdio_serial_initializev>:
/**
 * initializing the stdio file stream over uart
 */
void stdio_serial_initialize()
{
	uart_str = fdevopen(uart_putchar,uart_getchar);	
 116:	63 e7       	ldi	r22, 0x73	; 115
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	8b e5       	ldi	r24, 0x5B	; 91
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 00 01 	call	0x200	; 0x200 <fdevopen>
 122:	90 93 07 01 	sts	0x0107, r25
 126:	80 93 06 01 	sts	0x0106, r24
	stdout = stdin = uart_str;
 12a:	90 93 11 01 	sts	0x0111, r25
 12e:	80 93 10 01 	sts	0x0110, r24
 132:	90 93 13 01 	sts	0x0113, r25
 136:	80 93 12 01 	sts	0x0112, r24
 13a:	08 95       	ret

0000013c <main>:
 * initialize the usart baud rate
 * @param baud_rate the baud rate for teh usart module
 */
void usart_set_baud_rate(unsigned long baud_rate){
	unsigned int ubrr = (F_CPU/16/baud_rate)-1;
	UBRR0H = (unsigned char)(ubrr>>8);
 13c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	80 93 c4 00 	sts	0x00C4, r24
 * @param stop_bits	0->1 stop bit, 1-> 2 stop bits
 * @param char_size	0->5-bit, 1->6-bit, 2->7-bit, 3->8-bit,7->9-bit
 * @param pol		0->tx or rising, rx on falling, 1-> tx on falling, rx on rising
 */
void usart_setup(uint8_t mode, uint8_t parity, uint8_t stop_bits, uint8_t char_size,uint8_t pol){
	 UCSR0C =  (mode<<6) | (parity<<4) | (stop_bits<<3) |(char_size<<1) | (pol<<0);
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24

/**
 * enable the USART tx and rx
 */
void usart_enable(){
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	80 93 c1 00 	sts	0x00C1, r24
{
	
	usart_set_baud_rate(9600);
	usart_setup(0,0,0,3,0);
	usart_enable();
	stdio_serial_initialize();
 152:	0e 94 8b 00 	call	0x116	; 0x116 <_Z23stdio_serial_initializev>
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x1a>

00000158 <__vector_14>:
volatile int us_counter = 0;
volatile int ms_counter = 0;
volatile int elapsed_us = 0;
volatile int elapsed_ms = 0;

ISR (TIMER0_COMPA_vect){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
	us_10++;
 16a:	80 91 0e 01 	lds	r24, 0x010E
 16e:	90 91 0f 01 	lds	r25, 0x010F
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 0f 01 	sts	0x010F, r25
 178:	80 93 0e 01 	sts	0x010E, r24
	if(us_10>=100){  ////if 8 Mhz make it >100 ,  if 16 Mhz   make it  > 200
 17c:	80 91 0e 01 	lds	r24, 0x010E
 180:	90 91 0f 01 	lds	r25, 0x010F
 184:	84 36       	cpi	r24, 0x64	; 100
 186:	91 05       	cpc	r25, r1
 188:	94 f1       	brlt	.+100    	; 0x1ee <__vector_14+0x96>
		us_10 = 0;
 18a:	10 92 0f 01 	sts	0x010F, r1
 18e:	10 92 0e 01 	sts	0x010E, r1
		elapsed_us ++;
 192:	80 91 0a 01 	lds	r24, 0x010A
 196:	90 91 0b 01 	lds	r25, 0x010B
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 0b 01 	sts	0x010B, r25
 1a0:	80 93 0a 01 	sts	0x010A, r24
		us_counter++;
 1a4:	80 91 0c 01 	lds	r24, 0x010C
 1a8:	90 91 0d 01 	lds	r25, 0x010D
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 0d 01 	sts	0x010D, r25
 1b2:	80 93 0c 01 	sts	0x010C, r24
		if(us_counter++>1000){
 1b6:	80 91 0c 01 	lds	r24, 0x010C
 1ba:	90 91 0d 01 	lds	r25, 0x010D
 1be:	9c 01       	movw	r18, r24
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	30 93 0d 01 	sts	0x010D, r19
 1c8:	20 93 0c 01 	sts	0x010C, r18
 1cc:	89 3e       	cpi	r24, 0xE9	; 233
 1ce:	93 40       	sbci	r25, 0x03	; 3
 1d0:	6c f0       	brlt	.+26     	; 0x1ec <__vector_14+0x94>
			us_counter=0;
 1d2:	10 92 0d 01 	sts	0x010D, r1
 1d6:	10 92 0c 01 	sts	0x010C, r1
			elapsed_ms++;
 1da:	80 91 08 01 	lds	r24, 0x0108
 1de:	90 91 09 01 	lds	r25, 0x0109
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 09 01 	sts	0x0109, r25
 1e8:	80 93 08 01 	sts	0x0108, r24
		
		}
		asm("nop");
 1ec:	00 00       	nop
	}
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <fdevopen>:
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	8b 01       	movw	r16, r22
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	31 f4       	brne	.+12     	; 0x21c <fdevopen+0x1c>
 210:	61 15       	cp	r22, r1
 212:	71 05       	cpc	r23, r1
 214:	19 f4       	brne	.+6      	; 0x21c <fdevopen+0x1c>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	38 c0       	rjmp	.+112    	; 0x28c <fdevopen+0x8c>
 21c:	6e e0       	ldi	r22, 0x0E	; 14
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 4b 01 	call	0x296	; 0x296 <calloc>
 228:	fc 01       	movw	r30, r24
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	a1 f3       	breq	.-24     	; 0x216 <fdevopen+0x16>
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	83 83       	std	Z+3, r24	; 0x03
 232:	01 15       	cp	r16, r1
 234:	11 05       	cpc	r17, r1
 236:	71 f0       	breq	.+28     	; 0x254 <fdevopen+0x54>
 238:	13 87       	std	Z+11, r17	; 0x0b
 23a:	02 87       	std	Z+10, r16	; 0x0a
 23c:	81 e8       	ldi	r24, 0x81	; 129
 23e:	83 83       	std	Z+3, r24	; 0x03
 240:	80 91 10 01 	lds	r24, 0x0110
 244:	90 91 11 01 	lds	r25, 0x0111
 248:	89 2b       	or	r24, r25
 24a:	21 f4       	brne	.+8      	; 0x254 <fdevopen+0x54>
 24c:	f0 93 11 01 	sts	0x0111, r31
 250:	e0 93 10 01 	sts	0x0110, r30
 254:	20 97       	sbiw	r28, 0x00	; 0
 256:	c9 f0       	breq	.+50     	; 0x28a <fdevopen+0x8a>
 258:	d1 87       	std	Z+9, r29	; 0x09
 25a:	c0 87       	std	Z+8, r28	; 0x08
 25c:	83 81       	ldd	r24, Z+3	; 0x03
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	83 83       	std	Z+3, r24	; 0x03
 262:	80 91 12 01 	lds	r24, 0x0112
 266:	90 91 13 01 	lds	r25, 0x0113
 26a:	89 2b       	or	r24, r25
 26c:	71 f4       	brne	.+28     	; 0x28a <fdevopen+0x8a>
 26e:	f0 93 13 01 	sts	0x0113, r31
 272:	e0 93 12 01 	sts	0x0112, r30
 276:	80 91 14 01 	lds	r24, 0x0114
 27a:	90 91 15 01 	lds	r25, 0x0115
 27e:	89 2b       	or	r24, r25
 280:	21 f4       	brne	.+8      	; 0x28a <fdevopen+0x8a>
 282:	f0 93 15 01 	sts	0x0115, r31
 286:	e0 93 14 01 	sts	0x0114, r30
 28a:	cf 01       	movw	r24, r30
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <calloc>:
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	86 9f       	mul	r24, r22
 2a0:	80 01       	movw	r16, r0
 2a2:	87 9f       	mul	r24, r23
 2a4:	10 0d       	add	r17, r0
 2a6:	96 9f       	mul	r25, r22
 2a8:	10 0d       	add	r17, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	c8 01       	movw	r24, r16
 2ae:	0e 94 67 01 	call	0x2ce	; 0x2ce <malloc>
 2b2:	ec 01       	movw	r28, r24
 2b4:	00 97       	sbiw	r24, 0x00	; 0
 2b6:	29 f0       	breq	.+10     	; 0x2c2 <calloc+0x2c>
 2b8:	a8 01       	movw	r20, r16
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	0e 94 8e 02 	call	0x51c	; 0x51c <memset>
 2c2:	ce 01       	movw	r24, r28
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <malloc>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	91 05       	cpc	r25, r1
 2d6:	10 f4       	brcc	.+4      	; 0x2dc <malloc+0xe>
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	e0 91 18 01 	lds	r30, 0x0118
 2e0:	f0 91 19 01 	lds	r31, 0x0119
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	a0 e0       	ldi	r26, 0x00	; 0
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	30 97       	sbiw	r30, 0x00	; 0
 2ee:	39 f1       	breq	.+78     	; 0x33e <malloc+0x70>
 2f0:	40 81       	ld	r20, Z
 2f2:	51 81       	ldd	r21, Z+1	; 0x01
 2f4:	48 17       	cp	r20, r24
 2f6:	59 07       	cpc	r21, r25
 2f8:	b8 f0       	brcs	.+46     	; 0x328 <malloc+0x5a>
 2fa:	48 17       	cp	r20, r24
 2fc:	59 07       	cpc	r21, r25
 2fe:	71 f4       	brne	.+28     	; 0x31c <malloc+0x4e>
 300:	82 81       	ldd	r24, Z+2	; 0x02
 302:	93 81       	ldd	r25, Z+3	; 0x03
 304:	10 97       	sbiw	r26, 0x00	; 0
 306:	29 f0       	breq	.+10     	; 0x312 <malloc+0x44>
 308:	13 96       	adiw	r26, 0x03	; 3
 30a:	9c 93       	st	X, r25
 30c:	8e 93       	st	-X, r24
 30e:	12 97       	sbiw	r26, 0x02	; 2
 310:	2c c0       	rjmp	.+88     	; 0x36a <malloc+0x9c>
 312:	90 93 19 01 	sts	0x0119, r25
 316:	80 93 18 01 	sts	0x0118, r24
 31a:	27 c0       	rjmp	.+78     	; 0x36a <malloc+0x9c>
 31c:	21 15       	cp	r18, r1
 31e:	31 05       	cpc	r19, r1
 320:	31 f0       	breq	.+12     	; 0x32e <malloc+0x60>
 322:	42 17       	cp	r20, r18
 324:	53 07       	cpc	r21, r19
 326:	18 f0       	brcs	.+6      	; 0x32e <malloc+0x60>
 328:	a9 01       	movw	r20, r18
 32a:	db 01       	movw	r26, r22
 32c:	01 c0       	rjmp	.+2      	; 0x330 <malloc+0x62>
 32e:	ef 01       	movw	r28, r30
 330:	9a 01       	movw	r18, r20
 332:	bd 01       	movw	r22, r26
 334:	df 01       	movw	r26, r30
 336:	02 80       	ldd	r0, Z+2	; 0x02
 338:	f3 81       	ldd	r31, Z+3	; 0x03
 33a:	e0 2d       	mov	r30, r0
 33c:	d7 cf       	rjmp	.-82     	; 0x2ec <malloc+0x1e>
 33e:	21 15       	cp	r18, r1
 340:	31 05       	cpc	r19, r1
 342:	f9 f0       	breq	.+62     	; 0x382 <malloc+0xb4>
 344:	28 1b       	sub	r18, r24
 346:	39 0b       	sbc	r19, r25
 348:	24 30       	cpi	r18, 0x04	; 4
 34a:	31 05       	cpc	r19, r1
 34c:	80 f4       	brcc	.+32     	; 0x36e <malloc+0xa0>
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	9b 81       	ldd	r25, Y+3	; 0x03
 352:	61 15       	cp	r22, r1
 354:	71 05       	cpc	r23, r1
 356:	21 f0       	breq	.+8      	; 0x360 <malloc+0x92>
 358:	fb 01       	movw	r30, r22
 35a:	93 83       	std	Z+3, r25	; 0x03
 35c:	82 83       	std	Z+2, r24	; 0x02
 35e:	04 c0       	rjmp	.+8      	; 0x368 <malloc+0x9a>
 360:	90 93 19 01 	sts	0x0119, r25
 364:	80 93 18 01 	sts	0x0118, r24
 368:	fe 01       	movw	r30, r28
 36a:	32 96       	adiw	r30, 0x02	; 2
 36c:	44 c0       	rjmp	.+136    	; 0x3f6 <malloc+0x128>
 36e:	fe 01       	movw	r30, r28
 370:	e2 0f       	add	r30, r18
 372:	f3 1f       	adc	r31, r19
 374:	81 93       	st	Z+, r24
 376:	91 93       	st	Z+, r25
 378:	22 50       	subi	r18, 0x02	; 2
 37a:	31 09       	sbc	r19, r1
 37c:	39 83       	std	Y+1, r19	; 0x01
 37e:	28 83       	st	Y, r18
 380:	3a c0       	rjmp	.+116    	; 0x3f6 <malloc+0x128>
 382:	20 91 16 01 	lds	r18, 0x0116
 386:	30 91 17 01 	lds	r19, 0x0117
 38a:	23 2b       	or	r18, r19
 38c:	41 f4       	brne	.+16     	; 0x39e <malloc+0xd0>
 38e:	20 91 02 01 	lds	r18, 0x0102
 392:	30 91 03 01 	lds	r19, 0x0103
 396:	30 93 17 01 	sts	0x0117, r19
 39a:	20 93 16 01 	sts	0x0116, r18
 39e:	20 91 00 01 	lds	r18, 0x0100
 3a2:	30 91 01 01 	lds	r19, 0x0101
 3a6:	21 15       	cp	r18, r1
 3a8:	31 05       	cpc	r19, r1
 3aa:	41 f4       	brne	.+16     	; 0x3bc <malloc+0xee>
 3ac:	2d b7       	in	r18, 0x3d	; 61
 3ae:	3e b7       	in	r19, 0x3e	; 62
 3b0:	40 91 04 01 	lds	r20, 0x0104
 3b4:	50 91 05 01 	lds	r21, 0x0105
 3b8:	24 1b       	sub	r18, r20
 3ba:	35 0b       	sbc	r19, r21
 3bc:	e0 91 16 01 	lds	r30, 0x0116
 3c0:	f0 91 17 01 	lds	r31, 0x0117
 3c4:	e2 17       	cp	r30, r18
 3c6:	f3 07       	cpc	r31, r19
 3c8:	a0 f4       	brcc	.+40     	; 0x3f2 <malloc+0x124>
 3ca:	2e 1b       	sub	r18, r30
 3cc:	3f 0b       	sbc	r19, r31
 3ce:	28 17       	cp	r18, r24
 3d0:	39 07       	cpc	r19, r25
 3d2:	78 f0       	brcs	.+30     	; 0x3f2 <malloc+0x124>
 3d4:	ac 01       	movw	r20, r24
 3d6:	4e 5f       	subi	r20, 0xFE	; 254
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	24 17       	cp	r18, r20
 3dc:	35 07       	cpc	r19, r21
 3de:	48 f0       	brcs	.+18     	; 0x3f2 <malloc+0x124>
 3e0:	4e 0f       	add	r20, r30
 3e2:	5f 1f       	adc	r21, r31
 3e4:	50 93 17 01 	sts	0x0117, r21
 3e8:	40 93 16 01 	sts	0x0116, r20
 3ec:	81 93       	st	Z+, r24
 3ee:	91 93       	st	Z+, r25
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <malloc+0x128>
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	cf 01       	movw	r24, r30
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <free>:
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	09 f4       	brne	.+2      	; 0x408 <free+0xa>
 406:	87 c0       	rjmp	.+270    	; 0x516 <free+0x118>
 408:	fc 01       	movw	r30, r24
 40a:	32 97       	sbiw	r30, 0x02	; 2
 40c:	13 82       	std	Z+3, r1	; 0x03
 40e:	12 82       	std	Z+2, r1	; 0x02
 410:	c0 91 18 01 	lds	r28, 0x0118
 414:	d0 91 19 01 	lds	r29, 0x0119
 418:	20 97       	sbiw	r28, 0x00	; 0
 41a:	81 f4       	brne	.+32     	; 0x43c <free+0x3e>
 41c:	20 81       	ld	r18, Z
 41e:	31 81       	ldd	r19, Z+1	; 0x01
 420:	28 0f       	add	r18, r24
 422:	39 1f       	adc	r19, r25
 424:	80 91 16 01 	lds	r24, 0x0116
 428:	90 91 17 01 	lds	r25, 0x0117
 42c:	82 17       	cp	r24, r18
 42e:	93 07       	cpc	r25, r19
 430:	79 f5       	brne	.+94     	; 0x490 <free+0x92>
 432:	f0 93 17 01 	sts	0x0117, r31
 436:	e0 93 16 01 	sts	0x0116, r30
 43a:	6d c0       	rjmp	.+218    	; 0x516 <free+0x118>
 43c:	de 01       	movw	r26, r28
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	ae 17       	cp	r26, r30
 444:	bf 07       	cpc	r27, r31
 446:	50 f4       	brcc	.+20     	; 0x45c <free+0x5e>
 448:	12 96       	adiw	r26, 0x02	; 2
 44a:	4d 91       	ld	r20, X+
 44c:	5c 91       	ld	r21, X
 44e:	13 97       	sbiw	r26, 0x03	; 3
 450:	9d 01       	movw	r18, r26
 452:	41 15       	cp	r20, r1
 454:	51 05       	cpc	r21, r1
 456:	09 f1       	breq	.+66     	; 0x49a <free+0x9c>
 458:	da 01       	movw	r26, r20
 45a:	f3 cf       	rjmp	.-26     	; 0x442 <free+0x44>
 45c:	b3 83       	std	Z+3, r27	; 0x03
 45e:	a2 83       	std	Z+2, r26	; 0x02
 460:	40 81       	ld	r20, Z
 462:	51 81       	ldd	r21, Z+1	; 0x01
 464:	84 0f       	add	r24, r20
 466:	95 1f       	adc	r25, r21
 468:	8a 17       	cp	r24, r26
 46a:	9b 07       	cpc	r25, r27
 46c:	71 f4       	brne	.+28     	; 0x48a <free+0x8c>
 46e:	8d 91       	ld	r24, X+
 470:	9c 91       	ld	r25, X
 472:	11 97       	sbiw	r26, 0x01	; 1
 474:	84 0f       	add	r24, r20
 476:	95 1f       	adc	r25, r21
 478:	02 96       	adiw	r24, 0x02	; 2
 47a:	91 83       	std	Z+1, r25	; 0x01
 47c:	80 83       	st	Z, r24
 47e:	12 96       	adiw	r26, 0x02	; 2
 480:	8d 91       	ld	r24, X+
 482:	9c 91       	ld	r25, X
 484:	13 97       	sbiw	r26, 0x03	; 3
 486:	93 83       	std	Z+3, r25	; 0x03
 488:	82 83       	std	Z+2, r24	; 0x02
 48a:	21 15       	cp	r18, r1
 48c:	31 05       	cpc	r19, r1
 48e:	29 f4       	brne	.+10     	; 0x49a <free+0x9c>
 490:	f0 93 19 01 	sts	0x0119, r31
 494:	e0 93 18 01 	sts	0x0118, r30
 498:	3e c0       	rjmp	.+124    	; 0x516 <free+0x118>
 49a:	d9 01       	movw	r26, r18
 49c:	13 96       	adiw	r26, 0x03	; 3
 49e:	fc 93       	st	X, r31
 4a0:	ee 93       	st	-X, r30
 4a2:	12 97       	sbiw	r26, 0x02	; 2
 4a4:	4d 91       	ld	r20, X+
 4a6:	5d 91       	ld	r21, X+
 4a8:	a4 0f       	add	r26, r20
 4aa:	b5 1f       	adc	r27, r21
 4ac:	ea 17       	cp	r30, r26
 4ae:	fb 07       	cpc	r31, r27
 4b0:	79 f4       	brne	.+30     	; 0x4d0 <free+0xd2>
 4b2:	80 81       	ld	r24, Z
 4b4:	91 81       	ldd	r25, Z+1	; 0x01
 4b6:	84 0f       	add	r24, r20
 4b8:	95 1f       	adc	r25, r21
 4ba:	02 96       	adiw	r24, 0x02	; 2
 4bc:	d9 01       	movw	r26, r18
 4be:	11 96       	adiw	r26, 0x01	; 1
 4c0:	9c 93       	st	X, r25
 4c2:	8e 93       	st	-X, r24
 4c4:	82 81       	ldd	r24, Z+2	; 0x02
 4c6:	93 81       	ldd	r25, Z+3	; 0x03
 4c8:	13 96       	adiw	r26, 0x03	; 3
 4ca:	9c 93       	st	X, r25
 4cc:	8e 93       	st	-X, r24
 4ce:	12 97       	sbiw	r26, 0x02	; 2
 4d0:	e0 e0       	ldi	r30, 0x00	; 0
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	9b 81       	ldd	r25, Y+3	; 0x03
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	19 f0       	breq	.+6      	; 0x4e2 <free+0xe4>
 4dc:	fe 01       	movw	r30, r28
 4de:	ec 01       	movw	r28, r24
 4e0:	f9 cf       	rjmp	.-14     	; 0x4d4 <free+0xd6>
 4e2:	ce 01       	movw	r24, r28
 4e4:	02 96       	adiw	r24, 0x02	; 2
 4e6:	28 81       	ld	r18, Y
 4e8:	39 81       	ldd	r19, Y+1	; 0x01
 4ea:	82 0f       	add	r24, r18
 4ec:	93 1f       	adc	r25, r19
 4ee:	20 91 16 01 	lds	r18, 0x0116
 4f2:	30 91 17 01 	lds	r19, 0x0117
 4f6:	28 17       	cp	r18, r24
 4f8:	39 07       	cpc	r19, r25
 4fa:	69 f4       	brne	.+26     	; 0x516 <free+0x118>
 4fc:	30 97       	sbiw	r30, 0x00	; 0
 4fe:	29 f4       	brne	.+10     	; 0x50a <free+0x10c>
 500:	10 92 19 01 	sts	0x0119, r1
 504:	10 92 18 01 	sts	0x0118, r1
 508:	02 c0       	rjmp	.+4      	; 0x50e <free+0x110>
 50a:	13 82       	std	Z+3, r1	; 0x03
 50c:	12 82       	std	Z+2, r1	; 0x02
 50e:	d0 93 17 01 	sts	0x0117, r29
 512:	c0 93 16 01 	sts	0x0116, r28
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <memset>:
 51c:	dc 01       	movw	r26, r24
 51e:	01 c0       	rjmp	.+2      	; 0x522 <memset+0x6>
 520:	6d 93       	st	X+, r22
 522:	41 50       	subi	r20, 0x01	; 1
 524:	50 40       	sbci	r21, 0x00	; 0
 526:	e0 f7       	brcc	.-8      	; 0x520 <memset+0x4>
 528:	08 95       	ret

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
