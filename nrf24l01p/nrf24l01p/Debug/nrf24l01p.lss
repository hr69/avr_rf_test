
nrf24l01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00001cd0  00001d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800268  00800268  00001ecc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005d71  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4e  00000000  00000000  00007f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd9  00000000  00000000  000089d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000aec  00000000  00000000  000097b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000138c  00000000  00000000  0000a29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e82  00000000  00000000  0000b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_16>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	11 12       	cpse	r1, r17
      6a:	13 14       	cp	r1, r3
      6c:	15 16       	cp	r1, r21

0000006e <_ZL10child_pipe>:
      6e:	0a 0b 0c 0d 0e 0f                                   ......

00000074 <_ZL17child_pipe_enable>:
      74:	00 01 02 03 04 05                                   ......

0000007a <__c.2299>:
      7a:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000086 <__ctors_start>:
      86:	51 02       	muls	r21, r17

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e0 ed       	ldi	r30, 0xD0	; 208
      9c:	fc e1       	ldi	r31, 0x1C	; 28
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a8 36       	cpi	r26, 0x68	; 104
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	22 e0       	ldi	r18, 0x02	; 2
      ac:	a8 e6       	ldi	r26, 0x68	; 104
      ae:	b2 e0       	ldi	r27, 0x02	; 2
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a2 39       	cpi	r26, 0x92	; 146
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c8 e8       	ldi	r28, 0x88	; 136
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	22 97       	sbiw	r28, 0x02	; 2
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__tablejump__>
      ca:	c6 38       	cpi	r28, 0x86	; 134
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 b9 00 	call	0x172	; 0x172 <main>
      d4:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_Z23usart_transmit_byte_valh>:
/**
 * transmit byte via pass by value
 * @param data data byte to be sent
 */
void usart_transmit_byte_val(uint8_t data){
	 while (!(UCSR0A & (1<<UDRE0)));
      dc:	e0 ec       	ldi	r30, 0xC0	; 192
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	90 81       	ld	r25, Z
      e2:	95 ff       	sbrs	r25, 5
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <_Z23usart_transmit_byte_valh+0x4>
	 UDR0 = data;
      e6:	80 93 c6 00 	sts	0x00C6, r24
      ea:	08 95       	ret

000000ec <_Z12uart_putcharcP6__file>:

/**
 * putchar for streaming file out
 */
int uart_putchar(char ch, FILE *stream)
{
      ec:	cf 93       	push	r28
      ee:	c8 2f       	mov	r28, r24
	if(ch=='\n')
      f0:	8a 30       	cpi	r24, 0x0A	; 10
      f2:	19 f4       	brne	.+6      	; 0xfa <_Z12uart_putcharcP6__file+0xe>
	uart_putchar('\r',stream);
      f4:	8d e0       	ldi	r24, 0x0D	; 13
      f6:	0e 94 76 00 	call	0xec	; 0xec <_Z12uart_putcharcP6__file>
	stdio_serial_send_function((uint8_t) ch);
      fa:	8c 2f       	mov	r24, r28
      fc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z23usart_transmit_byte_valh>
	return 0;
}
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <_Z22usart_receive_byte_refPh>:
/**
 * receive byte via reference
 * @param data address of data byte into which the data shall be recieved
 */
void usart_receive_byte_ref(uint8_t *data){
	 while (!(UCSR0A & (1<<RXC0)));
     108:	e0 ec       	ldi	r30, 0xC0	; 192
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	20 81       	ld	r18, Z
     10e:	22 23       	and	r18, r18
     110:	ec f7       	brge	.-6      	; 0x10c <_Z22usart_receive_byte_refPh+0x4>
	 *data = UDR0;
     112:	20 91 c6 00 	lds	r18, 0x00C6
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
     11a:	08 95       	ret

0000011c <_Z12uart_getcharP6__file>:
/**
 * get char for streaming file in
 */
int uart_getchar(FILE *stream)
{
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	8c 01       	movw	r16, r24
	char ch;
	stdio_serial_receive_function( (uint8_t *) &ch);
     12c:	ce 01       	movw	r24, r28
     12e:	01 96       	adiw	r24, 0x01	; 1
     130:	0e 94 84 00 	call	0x108	; 0x108 <_Z22usart_receive_byte_refPh>
	
	/* Echo the output back to the terminal */
	uart_putchar(ch,stream);
     134:	b8 01       	movw	r22, r16
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	0e 94 76 00 	call	0xec	; 0xec <_Z12uart_putcharcP6__file>

	return ch;
     13c:	89 81       	ldd	r24, Y+1	; 0x01
}
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0f 90       	pop	r0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <_Z23stdio_serial_initializev>:
/**
 * initializing the stdio file stream over uart
 */
void stdio_serial_initialize()
{
	uart_str = fdevopen(uart_putchar,uart_getchar);	
     14c:	6e e8       	ldi	r22, 0x8E	; 142
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	86 e7       	ldi	r24, 0x76	; 118
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 ab 06 	call	0xd56	; 0xd56 <fdevopen>
     158:	90 93 7b 02 	sts	0x027B, r25
     15c:	80 93 7a 02 	sts	0x027A, r24
	stdout = stdin = uart_str;
     160:	90 93 89 02 	sts	0x0289, r25
     164:	80 93 88 02 	sts	0x0288, r24
     168:	90 93 8b 02 	sts	0x028B, r25
     16c:	80 93 8a 02 	sts	0x028A, r24
     170:	08 95       	ret

00000172 <main>:

// Used to control whether this node is sending or receiving
bool role = 0;

int main(void)
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	62 97       	sbiw	r28, 0x12	; 18
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
	return elapsed_us;
	//return 0;
}

inline void initialize_timer_0A(){
	TCCR0A |= (1<<WGM01) | (1<<WGM00); //fast pwm
     186:	84 b5       	in	r24, 0x24	; 36
     188:	83 60       	ori	r24, 0x03	; 3
     18a:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1<<FOC0A) ;//force output compare match on channel A
	TCCR0B |= (1<<CS01) | (1<<CS00); // div by 64 , therefore , if 8MHz --> 1Mhz ....if 16 MHz --> 2 MHz
     18c:	85 b5       	in	r24, 0x25	; 37
     18e:	83 60       	ori	r24, 0x03	; 3
     190:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A = 4; //if 8 Mhz return 10 us on compare,  if 16 Mhz return 5 us on compare
	TIMSK0 |= (1<<TOIE0);
     192:	ee e6       	ldi	r30, 0x6E	; 110
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	81 60       	ori	r24, 0x01	; 1
     19a:	80 83       	st	Z, r24
	sei();
     19c:	78 94       	sei
 * initialize the usart baud rate
 * @param baud_rate the baud rate for teh usart module
 */
void usart_set_baud_rate(unsigned long baud_rate){
	unsigned int ubrr = (F_CPU/16/baud_rate)-1;
	UBRR0H = (unsigned char)(ubrr>>8);
     19e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     1a2:	83 e3       	ldi	r24, 0x33	; 51
     1a4:	80 93 c4 00 	sts	0x00C4, r24
 * @param stop_bits	0->1 stop bit, 1-> 2 stop bits
 * @param char_size	0->5-bit, 1->6-bit, 2->7-bit, 3->8-bit,7->9-bit
 * @param pol		0->tx or rising, rx on falling, 1-> tx on falling, rx on rising
 */
void usart_setup(uint8_t mode, uint8_t parity, uint8_t stop_bits, uint8_t char_size,uint8_t pol){
	 UCSR0C =  (mode<<6) | (parity<<4) | (stop_bits<<3) |(char_size<<1) | (pol<<0);
     1a8:	86 e0       	ldi	r24, 0x06	; 6
     1aa:	80 93 c2 00 	sts	0x00C2, r24

/**
 * enable the USART tx and rx
 */
void usart_enable(){
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     1ae:	88 e1       	ldi	r24, 0x18	; 24
     1b0:	80 93 c1 00 	sts	0x00C1, r24
	
	//UART
	usart_set_baud_rate(9600);
	usart_setup(0,0,0,3,0);
	usart_enable();
	stdio_serial_initialize();
     1b4:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z23stdio_serial_initializev>
	
	printf("RF24/examples/GettingStarted\n");
     1b8:	8d e1       	ldi	r24, 0x1D	; 29
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>
	printf("*** PRESS 'T' to begin transmitting to the other node\n");
     1c0:	8a e3       	ldi	r24, 0x3A	; 58
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>
	return elapsed_us;
	//return 0;
}

inline void initialize_timer_0A(){
	TCCR0A |= (1<<WGM01) | (1<<WGM00); //fast pwm
     1c8:	84 b5       	in	r24, 0x24	; 36
     1ca:	83 60       	ori	r24, 0x03	; 3
     1cc:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1<<FOC0A) ;//force output compare match on channel A
	TCCR0B |= (1<<CS01) | (1<<CS00); // div by 64 , therefore , if 8MHz --> 1Mhz ....if 16 MHz --> 2 MHz
     1ce:	85 b5       	in	r24, 0x25	; 37
     1d0:	83 60       	ori	r24, 0x03	; 3
     1d2:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A = 4; //if 8 Mhz return 10 us on compare,  if 16 Mhz return 5 us on compare
	TIMSK0 |= (1<<TOIE0);
     1d4:	ee e6       	ldi	r30, 0x6E	; 110
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	80 83       	st	Z, r24
	sei();
     1de:	78 94       	sei

	initialize_timer_0A();

    radio.begin();
     1e0:	89 e6       	ldi	r24, 0x69	; 105
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN4RF245beginEv>
	//radio.setDataRate(RF24_250KBPS);
	radio.setPALevel(RF24_PA_LOW);
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	89 e6       	ldi	r24, 0x69	; 105
     1ec:	92 e0       	ldi	r25, 0x02	; 2
     1ee:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN4RF2410setPALevelEh>
	
  // Open a writing and reading pipe on each radio, with opposite addresses
	if(radioNumber) {
     1f2:	80 91 79 02 	lds	r24, 0x0279
     1f6:	88 23       	and	r24, r24
     1f8:	71 f0       	breq	.+28     	; 0x216 <main+0xa4>
		radio.openWritingPipe(addresses[1]);
     1fa:	6c e0       	ldi	r22, 0x0C	; 12
     1fc:	71 e0       	ldi	r23, 0x01	; 1
     1fe:	89 e6       	ldi	r24, 0x69	; 105
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN4RF2415openWritingPipeEPKh>
		radio.openReadingPipe(1,addresses[0]);
     206:	46 e0       	ldi	r20, 0x06	; 6
     208:	51 e0       	ldi	r21, 0x01	; 1
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	89 e6       	ldi	r24, 0x69	; 105
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN4RF2415openReadingPipeEhPKh>
     214:	0d c0       	rjmp	.+26     	; 0x230 <main+0xbe>
	}
	else {
		radio.openWritingPipe(addresses[0]);
     216:	66 e0       	ldi	r22, 0x06	; 6
     218:	71 e0       	ldi	r23, 0x01	; 1
     21a:	89 e6       	ldi	r24, 0x69	; 105
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN4RF2415openWritingPipeEPKh>
		radio.openReadingPipe(1,addresses[1]);
     222:	4c e0       	ldi	r20, 0x0C	; 12
     224:	51 e0       	ldi	r21, 0x01	; 1
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	89 e6       	ldi	r24, 0x69	; 105
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN4RF2415openReadingPipeEhPKh>
	}
    
    radio.startListening();
     230:	89 e6       	ldi	r24, 0x69	; 105
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN4RF2414startListeningEv>
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     238:	ce 01       	movw	r24, r28
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	9a 8b       	std	Y+18, r25	; 0x12
     23e:	89 8b       	std	Y+17, r24	; 0x11
		
				radio.stopListening();                                        // First, stop listening so we can talk
				radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.
				radio.startListening();                                       // Now, resume listening so we catch the next packets.
				printf("Sent response ");
				printf("%ld\n", got_time);
     240:	0f 2e       	mov	r0, r31
     242:	f2 e9       	ldi	r31, 0x92	; 146
     244:	4f 2e       	mov	r4, r31
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	5f 2e       	mov	r5, r31
     24a:	f0 2d       	mov	r31, r0
		        radio.read( &got_time, sizeof(unsigned long) );
		        unsigned long time = millis();
		        
		        // Spew it
		        printf("Sent ");
		        printf("%ld", time);
     24c:	0f 2e       	mov	r0, r31
     24e:	f1 e3       	ldi	r31, 0x31	; 49
     250:	2f 2e       	mov	r2, r31
     252:	f2 e0       	ldi	r31, 0x02	; 2
     254:	3f 2e       	mov	r3, r31
     256:	f0 2d       	mov	r31, r0
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     258:	69 88       	ldd	r6, Y+17	; 0x11
     25a:	7a 88       	ldd	r7, Y+18	; 0x12
	        radio.stopListening();                                    // First, stop listening so we can talk.
	        
	        
	        printf("Now sending\n");

	        unsigned long time = 123456;                             // Take the time, and send it.  This will block until complete
     25c:	0f 2e       	mov	r0, r31
     25e:	f0 e4       	ldi	r31, 0x40	; 64
     260:	cf 2e       	mov	r12, r31
     262:	f2 ee       	ldi	r31, 0xE2	; 226
     264:	df 2e       	mov	r13, r31
     266:	ee 24       	eor	r14, r14
     268:	e3 94       	inc	r14
     26a:	f1 2c       	mov	r15, r1
     26c:	f0 2d       	mov	r31, r0
				printf("%ld\n", got_time);
			}
		}

		/****************** Change Roles via Serial Commands ***************************/
		if ( bit_is_set(UCSR0A, RXC0) )
     26e:	00 ec       	ldi	r16, 0xC0	; 192
     270:	10 e0       	ldi	r17, 0x00	; 0
	
	
    while(1) {
		
        /****************** Ping Out Role ***************************/
        if (role == 1)  {
     272:	80 91 68 02 	lds	r24, 0x0268
     276:	88 23       	and	r24, r24
     278:	09 f4       	brne	.+2      	; 0x27c <main+0x10a>
     27a:	51 c0       	rjmp	.+162    	; 0x31e <main+0x1ac>
	        
	        radio.stopListening();                                    // First, stop listening so we can talk.
     27c:	89 e6       	ldi	r24, 0x69	; 105
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 40 04 	call	0x880	; 0x880 <_ZN4RF2413stopListeningEv>
	        
	        
	        printf("Now sending\n");
     284:	80 e7       	ldi	r24, 0x70	; 112
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>

	        unsigned long time = 123456;                             // Take the time, and send it.  This will block until complete
     28c:	cd 86       	std	Y+13, r12	; 0x0d
     28e:	de 86       	std	Y+14, r13	; 0x0e
     290:	ef 86       	std	Y+15, r14	; 0x0f
     292:	f8 8a       	std	Y+16, r15	; 0x10
	        if (!radio.write( &time, sizeof(unsigned long) )){
     294:	44 e0       	ldi	r20, 0x04	; 4
     296:	be 01       	movw	r22, r28
     298:	63 5f       	subi	r22, 0xF3	; 243
     29a:	7f 4f       	sbci	r23, 0xFF	; 255
     29c:	89 e6       	ldi	r24, 0x69	; 105
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN4RF245writeEPKvh>
     2a4:	81 11       	cpse	r24, r1
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <main+0x146>
		        printf("failed");
     2a8:	ac e7       	ldi	r26, 0x7C	; 124
     2aa:	b1 e0       	ldi	r27, 0x01	; 1
     2ac:	bf 93       	push	r27
     2ae:	af 93       	push	r26
     2b0:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
	        }
	        
	        radio.startListening();                                    // Now, continue listening
     2b8:	89 e6       	ldi	r24, 0x69	; 105
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN4RF2414startListeningEv>
extern volatile int elapsed_us;
extern volatile int elapsed_ms;

inline int millis(){
	
	return elapsed_ms;
     2c0:	80 90 7c 02 	lds	r8, 0x027C
     2c4:	90 90 7d 02 	lds	r9, 0x027D
	        
	        unsigned long started_waiting_at = millis();               // Set up a timeout period, get the current microseconds
     2c8:	aa 24       	eor	r10, r10
     2ca:	97 fc       	sbrc	r9, 7
     2cc:	a0 94       	com	r10
     2ce:	ba 2c       	mov	r11, r10
	        bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
	        
	        while ( ! radio.available() ){                             // While nothing is received
     2d0:	12 c0       	rjmp	.+36     	; 0x2f6 <main+0x184>
     2d2:	80 91 7c 02 	lds	r24, 0x027C
     2d6:	90 91 7d 02 	lds	r25, 0x027D
		        if (millis() - started_waiting_at > 200 ){            // If waited longer than 200ms, indicate timeout and exit while loop
     2da:	aa 27       	eor	r26, r26
     2dc:	97 fd       	sbrc	r25, 7
     2de:	a0 95       	com	r26
     2e0:	ba 2f       	mov	r27, r26
     2e2:	88 19       	sub	r24, r8
     2e4:	99 09       	sbc	r25, r9
     2e6:	aa 09       	sbc	r26, r10
     2e8:	bb 09       	sbc	r27, r11
     2ea:	89 3c       	cpi	r24, 0xC9	; 201
     2ec:	91 05       	cpc	r25, r1
     2ee:	a1 05       	cpc	r26, r1
     2f0:	b1 05       	cpc	r27, r1
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <main+0x184>
     2f4:	82 c0       	rjmp	.+260    	; 0x3fa <main+0x288>
	        radio.startListening();                                    // Now, continue listening
	        
	        unsigned long started_waiting_at = millis();               // Set up a timeout period, get the current microseconds
	        bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
	        
	        while ( ! radio.available() ){                             // While nothing is received
     2f6:	89 e6       	ldi	r24, 0x69	; 105
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN4RF249availableEv>
     2fe:	88 23       	and	r24, r24
     300:	41 f3       	breq	.-48     	; 0x2d2 <main+0x160>
     302:	80 c0       	rjmp	.+256    	; 0x404 <main+0x292>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     304:	ff ef       	ldi	r31, 0xFF	; 255
     306:	29 e6       	ldi	r18, 0x69	; 105
     308:	88 e1       	ldi	r24, 0x18	; 24
     30a:	f1 50       	subi	r31, 0x01	; 1
     30c:	20 40       	sbci	r18, 0x00	; 0
     30e:	80 40       	sbci	r24, 0x00	; 0
     310:	e1 f7       	brne	.-8      	; 0x30a <main+0x198>
     312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x1a2>
     314:	00 00       	nop
	        _delay_ms(1000);
        }

		/****************** Pong Back Role ***************************/

		if ( role == 0 )
     316:	80 91 68 02 	lds	r24, 0x0268
     31a:	81 11       	cpse	r24, r1
     31c:	3a c0       	rjmp	.+116    	; 0x392 <main+0x220>
		{
			unsigned long got_time;
	
			if( radio.available()){
     31e:	89 e6       	ldi	r24, 0x69	; 105
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN4RF249availableEv>
     326:	88 23       	and	r24, r24
     328:	a1 f1       	breq	.+104    	; 0x392 <main+0x220>
     32a:	07 c0       	rjmp	.+14     	; 0x33a <main+0x1c8>
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
     32c:	44 e0       	ldi	r20, 0x04	; 4
     32e:	66 2d       	mov	r22, r6
     330:	77 2d       	mov	r23, r7
     332:	89 e6       	ldi	r24, 0x69	; 105
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN4RF244readEPvh>
		{
			unsigned long got_time;
	
			if( radio.available()){
				// Variable for the received timestamp
				while (radio.available()) {                                   // While there is data ready
     33a:	89 e6       	ldi	r24, 0x69	; 105
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN4RF249availableEv>
     342:	81 11       	cpse	r24, r1
     344:	f3 cf       	rjmp	.-26     	; 0x32c <main+0x1ba>
					radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
				}
		
				radio.stopListening();                                        // First, stop listening so we can talk
     346:	89 e6       	ldi	r24, 0x69	; 105
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	0e 94 40 04 	call	0x880	; 0x880 <_ZN4RF2413stopListeningEv>
				radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.
     34e:	44 e0       	ldi	r20, 0x04	; 4
     350:	66 2d       	mov	r22, r6
     352:	77 2d       	mov	r23, r7
     354:	89 e6       	ldi	r24, 0x69	; 105
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN4RF245writeEPKvh>
				radio.startListening();                                       // Now, resume listening so we catch the next packets.
     35c:	89 e6       	ldi	r24, 0x69	; 105
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN4RF2414startListeningEv>
				printf("Sent response ");
     364:	a3 e8       	ldi	r26, 0x83	; 131
     366:	b1 e0       	ldi	r27, 0x01	; 1
     368:	bf 93       	push	r27
     36a:	af 93       	push	r26
     36c:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
				printf("%ld\n", got_time);
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	8f 93       	push	r24
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	8f 93       	push	r24
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	8f 93       	push	r24
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	8f 93       	push	r24
     380:	5f 92       	push	r5
     382:	4f 92       	push	r4
     384:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
			}
		}

		/****************** Change Roles via Serial Commands ***************************/
		if ( bit_is_set(UCSR0A, RXC0) )
     392:	d8 01       	movw	r26, r16
     394:	8c 91       	ld	r24, X
     396:	88 23       	and	r24, r24
     398:	0c f0       	brlt	.+2      	; 0x39c <main+0x22a>
     39a:	6b cf       	rjmp	.-298    	; 0x272 <main+0x100>
		{
			char buffer[12];
			char c = scanf("%12s", buffer);
     39c:	ba 89       	ldd	r27, Y+18	; 0x12
     39e:	bf 93       	push	r27
     3a0:	e9 89       	ldd	r30, Y+17	; 0x11
     3a2:	ef 93       	push	r30
     3a4:	87 e9       	ldi	r24, 0x97	; 151
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	0e 94 37 07 	call	0xe6e	; 0xe6e <scanf>
			if ( c == 'T' && role == 0 ){
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	84 35       	cpi	r24, 0x54	; 84
     3ba:	61 f4       	brne	.+24     	; 0x3d4 <main+0x262>
     3bc:	80 91 68 02 	lds	r24, 0x0268
     3c0:	81 11       	cpse	r24, r1
     3c2:	55 cf       	rjmp	.-342    	; 0x26e <main+0xfc>
				printf("*** CHANGING TO TRANSMIT ROLE -- PRESS 'R' TO SWITCH BACK\n");
     3c4:	8c e9       	ldi	r24, 0x9C	; 156
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>
				role = 1;                  // Become the primary transmitter (ping out)
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 68 02 	sts	0x0268, r24
     3d2:	4d cf       	rjmp	.-358    	; 0x26e <main+0xfc>
				
			}else
			if ( c == 'R' && role == 1 ){
     3d4:	82 35       	cpi	r24, 0x52	; 82
     3d6:	09 f0       	breq	.+2      	; 0x3da <main+0x268>
     3d8:	4a cf       	rjmp	.-364    	; 0x26e <main+0xfc>
     3da:	80 91 68 02 	lds	r24, 0x0268
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <main+0x272>
     3e2:	45 cf       	rjmp	.-374    	; 0x26e <main+0xfc>
				printf("*** CHANGING TO RECEIVE ROLE -- PRESS 'T' TO SWITCH BACK\n");
     3e4:	86 ed       	ldi	r24, 0xD6	; 214
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>
				role = 0;                // Become the primary receiver (pong back)
     3ec:	10 92 68 02 	sts	0x0268, r1
				radio.startListening();
     3f0:	89 e6       	ldi	r24, 0x69	; 105
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN4RF2414startListeningEv>
     3f8:	3a cf       	rjmp	.-396    	; 0x26e <main+0xfc>
			        break;
		        }
	        }
	        
	        if ( timeout ){                                             // Describe the results
		        printf("Failed, response timed out.\n");
     3fa:	8f e0       	ldi	r24, 0x0F	; 15
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>
     402:	80 cf       	rjmp	.-256    	; 0x304 <main+0x192>
		        } else {
		        unsigned long got_time;                                 // Grab the response, compare, and send to debugging spew
		        radio.read( &got_time, sizeof(unsigned long) );
     404:	44 e0       	ldi	r20, 0x04	; 4
     406:	66 2d       	mov	r22, r6
     408:	77 2d       	mov	r23, r7
     40a:	89 e6       	ldi	r24, 0x69	; 105
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN4RF244readEPvh>
     412:	80 90 7c 02 	lds	r8, 0x027C
     416:	90 90 7d 02 	lds	r9, 0x027D
		        unsigned long time = millis();
     41a:	aa 24       	eor	r10, r10
     41c:	97 fc       	sbrc	r9, 7
     41e:	a0 94       	com	r10
     420:	ba 2c       	mov	r11, r10
		        
		        // Spew it
		        printf("Sent ");
     422:	ab e2       	ldi	r26, 0x2B	; 43
     424:	b2 e0       	ldi	r27, 0x02	; 2
     426:	bf 93       	push	r27
     428:	af 93       	push	r26
     42a:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
		        printf("%ld", time);
     42e:	bf 92       	push	r11
     430:	af 92       	push	r10
     432:	9f 92       	push	r9
     434:	8f 92       	push	r8
     436:	3f 92       	push	r3
     438:	2f 92       	push	r2
     43a:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
		        printf(", Got response ");
     43e:	a5 e3       	ldi	r26, 0x35	; 53
     440:	b2 e0       	ldi	r27, 0x02	; 2
     442:	bf 93       	push	r27
     444:	af 93       	push	r26
     446:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
		        printf("%ld", got_time);
     44a:	8c 81       	ldd	r24, Y+4	; 0x04
     44c:	8f 93       	push	r24
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	8f 93       	push	r24
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	8f 93       	push	r24
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	8f 93       	push	r24
     45a:	3f 92       	push	r3
     45c:	2f 92       	push	r2
     45e:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
		        printf(", Round-trip delay ");
     462:	a5 e4       	ldi	r26, 0x45	; 69
     464:	b2 e0       	ldi	r27, 0x02	; 2
     466:	bf 93       	push	r27
     468:	af 93       	push	r26
     46a:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
		        printf("%ld", time-got_time);
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	ab 81       	ldd	r26, Y+3	; 0x03
     474:	bc 81       	ldd	r27, Y+4	; 0x04
     476:	88 1a       	sub	r8, r24
     478:	99 0a       	sbc	r9, r25
     47a:	aa 0a       	sbc	r10, r26
     47c:	bb 0a       	sbc	r11, r27
     47e:	bf 92       	push	r11
     480:	af 92       	push	r10
     482:	9f 92       	push	r9
     484:	8f 92       	push	r8
     486:	3f 92       	push	r3
     488:	2f 92       	push	r2
     48a:	0e 94 f6 06 	call	0xdec	; 0xdec <printf>
		        printf(" microseconds\n");
     48e:	89 e5       	ldi	r24, 0x59	; 89
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 0a 07 	call	0xe14	; 0xe14 <puts>
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	31 cf       	rjmp	.-414    	; 0x304 <main+0x192>

000004a2 <_GLOBAL__sub_I__Z19usart_set_baud_ratem>:
/****************** User Config ***************************/
/***      Set this radio as radio number 0 or 1         ***/
bool radioNumber = 0;

/* Hardware configuration: Set up nRF24L01 radio on SPI bus plus pins 7 & 8 */
RF24 radio(7,8);
     4a2:	48 e0       	ldi	r20, 0x08	; 8
     4a4:	67 e0       	ldi	r22, 0x07	; 7
     4a6:	89 e6       	ldi	r24, 0x69	; 105
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN4RF24C1Ehh>
     4ae:	08 95       	ret

000004b0 <__vector_16>:
volatile int us_counter = 0;
volatile int ms_counter = 0;
volatile int elapsed_us = 0;
volatile int elapsed_ms = 0;

ISR (TIMER0_OVF_vect){
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	11 24       	eor	r1, r1
     4ba:	2f 93       	push	r18
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
	us_4++;
     4c0:	80 91 84 02 	lds	r24, 0x0284
     4c4:	90 91 85 02 	lds	r25, 0x0285
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	90 93 85 02 	sts	0x0285, r25
     4ce:	80 93 84 02 	sts	0x0284, r24
	if(us_4>=250){  ////if 8 Mhz make it >100 ,  if 16 Mhz   make it  > 200
     4d2:	80 91 84 02 	lds	r24, 0x0284
     4d6:	90 91 85 02 	lds	r25, 0x0285
     4da:	8a 3f       	cpi	r24, 0xFA	; 250
     4dc:	91 05       	cpc	r25, r1
     4de:	0c f4       	brge	.+2      	; 0x4e2 <__vector_16+0x32>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <__vector_16+0xb8>
		us_4 = 0;
     4e2:	10 92 85 02 	sts	0x0285, r1
     4e6:	10 92 84 02 	sts	0x0284, r1
		elapsed_us ++;  //increment the us
     4ea:	80 91 7e 02 	lds	r24, 0x027E
     4ee:	90 91 7f 02 	lds	r25, 0x027F
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	90 93 7f 02 	sts	0x027F, r25
     4f8:	80 93 7e 02 	sts	0x027E, r24
		us_counter++;
     4fc:	80 91 82 02 	lds	r24, 0x0282
     500:	90 91 83 02 	lds	r25, 0x0283
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	90 93 83 02 	sts	0x0283, r25
     50a:	80 93 82 02 	sts	0x0282, r24
		if(us_counter>1000){
     50e:	80 91 82 02 	lds	r24, 0x0282
     512:	90 91 83 02 	lds	r25, 0x0283
     516:	89 3e       	cpi	r24, 0xE9	; 233
     518:	93 40       	sbci	r25, 0x03	; 3
     51a:	2c f1       	brlt	.+74     	; 0x566 <__vector_16+0xb6>
			us_counter=0;
     51c:	10 92 83 02 	sts	0x0283, r1
     520:	10 92 82 02 	sts	0x0282, r1
			elapsed_ms++; //increment the ms
     524:	80 91 7c 02 	lds	r24, 0x027C
     528:	90 91 7d 02 	lds	r25, 0x027D
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 7d 02 	sts	0x027D, r25
     532:	80 93 7c 02 	sts	0x027C, r24
			ms_counter++;
     536:	80 91 80 02 	lds	r24, 0x0280
     53a:	90 91 81 02 	lds	r25, 0x0281
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	90 93 81 02 	sts	0x0281, r25
     544:	80 93 80 02 	sts	0x0280, r24
			if(ms_counter>=1000)
     548:	80 91 80 02 	lds	r24, 0x0280
     54c:	90 91 81 02 	lds	r25, 0x0281
     550:	88 3e       	cpi	r24, 0xE8	; 232
     552:	93 40       	sbci	r25, 0x03	; 3
     554:	44 f0       	brlt	.+16     	; 0x566 <__vector_16+0xb6>
			{
				ms_counter = 0;
     556:	10 92 81 02 	sts	0x0281, r1
     55a:	10 92 80 02 	sts	0x0280, r1
				PORTB^=1;
     55e:	95 b1       	in	r25, 0x05	; 5
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	89 27       	eor	r24, r25
     564:	85 b9       	out	0x05, r24	; 5
			}
		}
		asm("nop");
     566:	00 00       	nop
	}
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <_ZN4RF243csnEb>:
	  _SPI.setDataMode(RF24_DATA_MODE);
	  _SPI.setClockDivider(spi_speed ? spi_speed : RF24_CLOCK_DIVIDER);
	  _SPI.chipSelect(csn_pin);
	  delayMicroseconds(5);
#elif defined (__AVR__) 
	  if (mode == HIGH) {
     578:	66 23       	and	r22, r22
     57a:	41 f0       	breq	.+16     	; 0x58c <_ZN4RF243csnEb+0x14>
		  PORTB |= (1<<PINB2);  	// SCK->CSN HIGH
     57c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57e:	87 ec       	ldi	r24, 0xC7	; 199
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <_ZN4RF243csnEb+0xa>
     586:	00 c0       	rjmp	.+0      	; 0x588 <_ZN4RF243csnEb+0x10>
     588:	00 00       	nop
     58a:	08 95       	ret
		  delayMicroseconds(100); // allow csn to settle.
	  }
	  else {
		  PORTB &= ~(1<<PINB2);	// SCK->CSN LOW
     58c:	2a 98       	cbi	0x05, 2	; 5
     58e:	9d e1       	ldi	r25, 0x1D	; 29
     590:	9a 95       	dec	r25
     592:	f1 f7       	brne	.-4      	; 0x590 <_ZN4RF243csnEb+0x18>
     594:	00 00       	nop
     596:	08 95       	ret

00000598 <_ZN4RF242ceEb>:
/****************************************************************************/
int mode;
void RF24::ce(bool level)
{
	#if defined(__AVR__)
	if (ce_pin != csn_pin){
     598:	fc 01       	movw	r30, r24
     59a:	20 81       	ld	r18, Z
     59c:	81 81       	ldd	r24, Z+1	; 0x01
     59e:	28 17       	cp	r18, r24
     5a0:	99 f0       	breq	.+38     	; 0x5c8 <_ZN4RF242ceEb+0x30>
		if (mode == HIGH) {
     5a2:	80 91 86 02 	lds	r24, 0x0286
     5a6:	90 91 87 02 	lds	r25, 0x0287
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	41 f4       	brne	.+16     	; 0x5be <_ZN4RF242ceEb+0x26>
			CE_PORT |= (1<<CE_BIT);  	// SCK->CSN HIGH
     5ae:	5f 9a       	sbi	0x0b, 7	; 11
     5b0:	87 ec       	ldi	r24, 0xC7	; 199
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <_ZN4RF242ceEb+0x1c>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <_ZN4RF242ceEb+0x22>
     5ba:	00 00       	nop
     5bc:	08 95       	ret
			delayMicroseconds(100); // allow csn to settle.
		}
		else {
			CE_PORT &= ~(1<<CE_BIT);	// SCK->CSN LOW
     5be:	5f 98       	cbi	0x0b, 7	; 11
     5c0:	9d e1       	ldi	r25, 0x1D	; 29
     5c2:	9a 95       	dec	r25
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <_ZN4RF242ceEb+0x2a>
     5c6:	00 00       	nop
     5c8:	08 95       	ret

000005ca <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	16 2f       	mov	r17, r22
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     5d4:	84 b1       	in	r24, 0x04	; 4
     5d6:	8c 62       	ori	r24, 0x2C	; 44
     5d8:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     5da:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     5dc:	8c b5       	in	r24, 0x2c	; 44
     5de:	80 65       	ori	r24, 0x50	; 80
     5e0:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
  result = *++prx;   // result is 2nd byte of receive buffer  

	#elif defined(__AVR__)
	beginTransaction();
	AVR_SPI_MSTR_TRANSMIT_VAL( R_REGISTER | ( REGISTER_MASK & reg ) );
     5ea:	1f 71       	andi	r17, 0x1F	; 31
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     5ec:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     5ee:	0d b4       	in	r0, 0x2d	; 45
     5f0:	07 fe       	sbrs	r0, 7
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <_ZN4RF2413read_registerEh+0x24>
	return SPDR;
     5f4:	8e b5       	in	r24, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <_ZN4RF2413read_registerEh+0x30>
	return SPDR;
     600:	1e b5       	in	r17, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	ce 01       	movw	r24, r28
     606:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return result;
}
     60a:	81 2f       	mov	r24, r17
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	08 95       	ret

00000614 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	ec 01       	movw	r28, r24
     622:	06 2f       	mov	r16, r22
     624:	e4 2e       	mov	r14, r20
     626:	f5 2e       	mov	r15, r21
     628:	12 2f       	mov	r17, r18
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     62a:	84 b1       	in	r24, 0x04	; 4
     62c:	8c 62       	ori	r24, 0x2C	; 44
     62e:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     630:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     632:	8c b5       	in	r24, 0x2c	; 44
     634:	80 65       	ori	r24, 0x50	; 80
     636:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	ce 01       	movw	r24, r28
     63c:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, size);
  status = *prx; // status is 1st byte of receive buffer

  	#elif defined(__AVR__)
  	 beginTransaction();
  	 status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
     640:	0f 71       	andi	r16, 0x1F	; 31
     642:	00 62       	ori	r16, 0x20	; 32
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     644:	0e bd       	out	0x2e, r16	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7
     64a:	fd cf       	rjmp	.-6      	; 0x646 <_ZN4RF2414write_registerEhPKhh+0x32>
	return SPDR;
     64c:	0e b5       	in	r16, 0x2e	; 46
  	 while ( len-- )
     64e:	9f ef       	ldi	r25, 0xFF	; 255
     650:	91 0f       	add	r25, r17
     652:	11 23       	and	r17, r17
     654:	51 f0       	breq	.+20     	; 0x66a <_ZN4RF2414write_registerEhPKhh+0x56>
     656:	ee 2d       	mov	r30, r14
     658:	ff 2d       	mov	r31, r15
  	 AVR_SPI_MSTR_TRANSMIT_VAL(*buf++);
     65a:	21 91       	ld	r18, Z+
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     65c:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <_ZN4RF2414write_registerEhPKhh+0x4a>
	return SPDR;
     664:	2e b5       	in	r18, 0x2e	; 46
  status = *prx; // status is 1st byte of receive buffer

  	#elif defined(__AVR__)
  	 beginTransaction();
  	 status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
  	 while ( len-- )
     666:	91 50       	subi	r25, 0x01	; 1
     668:	c0 f7       	brcc	.-16     	; 0x65a <_ZN4RF2414write_registerEhPKhh+0x46>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	ce 01       	movw	r24, r28
     66e:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     672:	80 2f       	mov	r24, r16
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	08 95       	ret

00000682 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
     68c:	16 2f       	mov	r17, r22
     68e:	04 2f       	mov	r16, r20
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     690:	84 b1       	in	r24, 0x04	; 4
     692:	8c 62       	ori	r24, 0x2C	; 44
     694:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     696:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     698:	8c b5       	in	r24, 0x2c	; 44
     69a:	80 65       	ori	r24, 0x50	; 80
     69c:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	ce 01       	movw	r24, r28
     6a2:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
	_SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
	status = *prx++; // status is 1st byte of receive buffer

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( W_REGISTER | ( REGISTER_MASK & reg ) );
     6a6:	1f 71       	andi	r17, 0x1F	; 31
     6a8:	10 62       	ori	r17, 0x20	; 32
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     6aa:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     6ac:	0d b4       	in	r0, 0x2d	; 45
     6ae:	07 fe       	sbrs	r0, 7
     6b0:	fd cf       	rjmp	.-6      	; 0x6ac <_ZN4RF2414write_registerEhh+0x2a>
	return SPDR;
     6b2:	1e b5       	in	r17, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     6b4:	0e bd       	out	0x2e, r16	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <_ZN4RF2414write_registerEhh+0x34>
	return SPDR;
     6bc:	8e b5       	in	r24, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	ce 01       	movw	r24, r28
     6c2:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     6c6:	81 2f       	mov	r24, r17
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
     6e2:	d6 2e       	mov	r13, r22
     6e4:	e7 2e       	mov	r14, r23
     6e6:	f2 2e       	mov	r15, r18
  uint8_t status;
  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

   data_len = rf24_min(data_len, payload_size);
     6e8:	0b 81       	ldd	r16, Y+3	; 0x03
     6ea:	14 2f       	mov	r17, r20
     6ec:	04 17       	cp	r16, r20
     6ee:	08 f4       	brcc	.+2      	; 0x6f2 <_ZN4RF2413write_payloadEPKvhh+0x20>
     6f0:	10 2f       	mov	r17, r16
   uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     6f2:	8c 81       	ldd	r24, Y+4	; 0x04
     6f4:	81 11       	cpse	r24, r1
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <_ZN4RF2413write_payloadEPKvhh+0x2a>
     6f8:	01 1b       	sub	r16, r17
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <_ZN4RF2413write_payloadEPKvhh+0x2c>
     6fc:	00 e0       	ldi	r16, 0x00	; 0
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     6fe:	84 b1       	in	r24, 0x04	; 4
     700:	8c 62       	ori	r24, 0x2C	; 44
     702:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     704:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     706:	8c b5       	in	r24, 0x2c	; 44
     708:	80 65       	ori	r24, 0x50	; 80
     70a:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     714:	fe bc       	out	0x2e, r15	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <_ZN4RF2413write_payloadEPKvhh+0x44>
	return SPDR;
     71c:	fe b4       	in	r15, 0x2e	; 46
	status = *prx; // status is 1st byte of receive buffer
	
	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( writeType );
	while ( data_len-- ) {
     71e:	9f ef       	ldi	r25, 0xFF	; 255
     720:	91 0f       	add	r25, r17
     722:	11 23       	and	r17, r17
     724:	51 f0       	breq	.+20     	; 0x73a <_ZN4RF2413write_payloadEPKvhh+0x68>
     726:	ed 2d       	mov	r30, r13
     728:	fe 2d       	mov	r31, r14
		AVR_SPI_MSTR_TRANSMIT_VAL(*current++);
     72a:	21 91       	ld	r18, Z+
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     72c:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     72e:	0d b4       	in	r0, 0x2d	; 45
     730:	07 fe       	sbrs	r0, 7
     732:	fd cf       	rjmp	.-6      	; 0x72e <_ZN4RF2413write_payloadEPKvhh+0x5c>
	return SPDR;
     734:	2e b5       	in	r18, 0x2e	; 46
	status = *prx; // status is 1st byte of receive buffer
	
	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( writeType );
	while ( data_len-- ) {
     736:	91 50       	subi	r25, 0x01	; 1
     738:	c0 f7       	brcc	.-16     	; 0x72a <_ZN4RF2413write_payloadEPKvhh+0x58>
		AVR_SPI_MSTR_TRANSMIT_VAL(*current++);
	}
	while ( blank_len-- ) {
     73a:	9f ef       	ldi	r25, 0xFF	; 255
     73c:	90 0f       	add	r25, r16
     73e:	00 23       	and	r16, r16
     740:	39 f0       	breq	.+14     	; 0x750 <_ZN4RF2413write_payloadEPKvhh+0x7e>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     742:	1e bc       	out	0x2e, r1	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     744:	0d b4       	in	r0, 0x2d	; 45
     746:	07 fe       	sbrs	r0, 7
     748:	fd cf       	rjmp	.-6      	; 0x744 <_ZN4RF2413write_payloadEPKvhh+0x72>
	return SPDR;
     74a:	2e b5       	in	r18, 0x2e	; 46
     74c:	91 50       	subi	r25, 0x01	; 1
     74e:	c8 f7       	brcc	.-14     	; 0x742 <_ZN4RF2413write_payloadEPKvhh+0x70>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	ce 01       	movw	r24, r28
     754:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     758:	8f 2d       	mov	r24, r15
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	08 95       	ret

0000076a <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
     77a:	d6 2e       	mov	r13, r22
     77c:	e7 2e       	mov	r14, r23
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);

  if(data_len > payload_size) data_len = payload_size;
     77e:	0b 81       	ldd	r16, Y+3	; 0x03
     780:	14 2f       	mov	r17, r20
     782:	04 17       	cp	r16, r20
     784:	08 f4       	brcc	.+2      	; 0x788 <_ZN4RF2412read_payloadEPvh+0x1e>
     786:	10 2f       	mov	r17, r16
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     788:	8c 81       	ldd	r24, Y+4	; 0x04
     78a:	81 11       	cpse	r24, r1
     78c:	02 c0       	rjmp	.+4      	; 0x792 <_ZN4RF2412read_payloadEPvh+0x28>
     78e:	01 1b       	sub	r16, r17
     790:	01 c0       	rjmp	.+2      	; 0x794 <_ZN4RF2412read_payloadEPvh+0x2a>
     792:	00 e0       	ldi	r16, 0x00	; 0
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     794:	84 b1       	in	r24, 0x04	; 4
     796:	8c 62       	ori	r24, 0x2C	; 44
     798:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     79a:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     79c:	8c b5       	in	r24, 0x2c	; 44
     79e:	80 65       	ori	r24, 0x50	; 80
     7a0:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     7aa:	81 e6       	ldi	r24, 0x61	; 97
     7ac:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <_ZN4RF2412read_payloadEPvh+0x44>
	return SPDR;
     7b4:	fe b4       	in	r15, 0x2e	; 46
	*current = *prx;

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( R_RX_PAYLOAD );
	while ( data_len-- ) {
     7b6:	9f ef       	ldi	r25, 0xFF	; 255
     7b8:	91 0f       	add	r25, r17
     7ba:	11 23       	and	r17, r17
     7bc:	59 f0       	breq	.+22     	; 0x7d4 <_ZN4RF2412read_payloadEPvh+0x6a>
     7be:	ed 2d       	mov	r30, r13
     7c0:	fe 2d       	mov	r31, r14
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     7c2:	3f ef       	ldi	r19, 0xFF	; 255
     7c4:	3e bd       	out	0x2e, r19	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <_ZN4RF2412read_payloadEPvh+0x5c>
	return SPDR;
     7cc:	2e b5       	in	r18, 0x2e	; 46
		*current++ = AVR_SPI_MSTR_TRANSMIT_VAL(0xFF);
     7ce:	21 93       	st	Z+, r18
	*current = *prx;

	#elif defined(__AVR__)
	beginTransaction();
	status = AVR_SPI_MSTR_TRANSMIT_VAL( R_RX_PAYLOAD );
	while ( data_len-- ) {
     7d0:	91 50       	subi	r25, 0x01	; 1
     7d2:	c0 f7       	brcc	.-16     	; 0x7c4 <_ZN4RF2412read_payloadEPvh+0x5a>
		*current++ = AVR_SPI_MSTR_TRANSMIT_VAL(0xFF);
	}
	while ( blank_len-- ) {
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
     7d6:	90 0f       	add	r25, r16
     7d8:	00 23       	and	r16, r16
     7da:	41 f0       	breq	.+16     	; 0x7ec <_ZN4RF2412read_payloadEPvh+0x82>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	2e bd       	out	0x2e, r18	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     7e0:	0d b4       	in	r0, 0x2d	; 45
     7e2:	07 fe       	sbrs	r0, 7
     7e4:	fd cf       	rjmp	.-6      	; 0x7e0 <_ZN4RF2412read_payloadEPvh+0x76>
	return SPDR;
     7e6:	3e b5       	in	r19, 0x2e	; 46
     7e8:	91 50       	subi	r25, 0x01	; 1
     7ea:	c8 f7       	brcc	.-14     	; 0x7de <_ZN4RF2412read_payloadEPvh+0x74>
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	ce 01       	movw	r24, r28
     7f0:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     7f4:	8f 2d       	mov	r24, r15
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	08 95       	ret

00000806 <_ZN4RF248spiTransEh>:
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
     80e:	16 2f       	mov	r17, r22
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     810:	84 b1       	in	r24, 0x04	; 4
     812:	8c 62       	ori	r24, 0x2C	; 44
     814:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     816:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     818:	8c b5       	in	r24, 0x2c	; 44
     81a:	80 65       	ori	r24, 0x50	; 80
     81c:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	ce 01       	movw	r24, r28
     822:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     826:	1e bd       	out	0x2e, r17	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <_ZN4RF248spiTransEh+0x22>
	return SPDR;
     82e:	1e b5       	in	r17, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	ce 01       	movw	r24, r28
     834:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
     838:	81 2f       	mov	r24, r17
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	08 95       	ret

00000842 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
     842:	62 ee       	ldi	r22, 0xE2	; 226
     844:	0e 94 03 04 	call	0x806	; 0x806 <_ZN4RF248spiTransEh>
}
     848:	08 95       	ret

0000084a <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
     84a:	61 ee       	ldi	r22, 0xE1	; 225
     84c:	0e 94 03 04 	call	0x806	; 0x806 <_ZN4RF248spiTransEh>
}
     850:	08 95       	ret

00000852 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(NOP);
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	0e 94 03 04 	call	0x806	; 0x806 <_ZN4RF248spiTransEh>
}
     858:	08 95       	ret

0000085a <_ZN4RF24C1Ehh>:
{
	pipe0_reading_address[0]=0;
}
/****************************************************************************/

RF24::RF24(uint8_t _cepin, uint8_t _cspin):
     85a:	fc 01       	movw	r30, r24
  ce_pin(_cepin), csn_pin(_cspin), p_variant(false),
  payload_size(32), dynamic_payloads_enabled(false), addr_width(5)//,pipe0_reading_address(0)
     85c:	60 83       	st	Z, r22
     85e:	41 83       	std	Z+1, r20	; 0x01
     860:	12 82       	std	Z+2, r1	; 0x02
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	83 83       	std	Z+3, r24	; 0x03
     866:	14 82       	std	Z+4, r1	; 0x04
     868:	85 e0       	ldi	r24, 0x05	; 5
     86a:	82 87       	std	Z+10, r24	; 0x0a
{
  pipe0_reading_address[0]=0;
     86c:	15 82       	std	Z+5, r1	; 0x05
     86e:	08 95       	ret

00000870 <_ZN4RF2410setChannelEh>:
#endif

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     870:	46 2f       	mov	r20, r22
  const uint8_t max_channel = 127;
  write_register(RF_CH,rf24_min(channel,max_channel));
     872:	60 38       	cpi	r22, 0x80	; 128
     874:	08 f0       	brcs	.+2      	; 0x878 <_ZN4RF2410setChannelEh+0x8>
     876:	4f e7       	ldi	r20, 0x7F	; 127
     878:	65 e0       	ldi	r22, 0x05	; 5
     87a:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
     87e:	08 95       	ret

00000880 <_ZN4RF2413stopListeningEv>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::stopListening(void)
{  
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24
  ce(LOW);
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN4RF242ceEb>
     88c:	8f e8       	ldi	r24, 0x8F	; 143
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <_ZN4RF2413stopListeningEv+0x10>
     894:	00 c0       	rjmp	.+0      	; 0x896 <_ZN4RF2413stopListeningEv+0x16>
     896:	00 00       	nop
	delayMicroseconds(200);
 #else
delayMicroseconds(txRxDelay);
 #endif 
  
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
     898:	6d e1       	ldi	r22, 0x1D	; 29
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     8a0:	81 ff       	sbrs	r24, 1
     8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <_ZN4RF2413stopListeningEv+0x36>
     8a4:	8f e8       	ldi	r24, 0x8F	; 143
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <_ZN4RF2413stopListeningEv+0x28>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <_ZN4RF2413stopListeningEv+0x2e>
     8ae:	00 00       	nop
     #if defined (__AVR__)
     delayMicroseconds(200);
     #else
     delayMicroseconds(txRxDelay);
     #endif
	flush_tx();
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN4RF248flush_txEv>
  }
  //flush_rx();
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     8be:	48 2f       	mov	r20, r24
     8c0:	4e 7f       	andi	r20, 0xFE	; 254
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	ce 01       	movw	r24, r28
     8c6:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
  if (ce_pin == csn_pin) {
    powerDown();
	powerUp();
  }
  #endif
  write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     8ca:	62 e0       	ldi	r22, 0x02	; 2
     8cc:	ce 01       	movw	r24, r28
     8ce:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     8d2:	e4 e7       	ldi	r30, 0x74	; 116
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	e4 91       	lpm	r30, Z
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <_ZN4RF2413stopListeningEv+0x64>
     8e0:	44 0f       	add	r20, r20
     8e2:	55 1f       	adc	r21, r21
     8e4:	ea 95       	dec	r30
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <_ZN4RF2413stopListeningEv+0x60>
     8e8:	fa 01       	movw	r30, r20
     8ea:	48 2f       	mov	r20, r24
     8ec:	4e 2b       	or	r20, r30
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
  
  //delayMicroseconds(100);

}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
   uint8_t cfg = read_register(CONFIG);
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
     908:	81 fd       	sbrc	r24, 1
     90a:	10 c0       	rjmp	.+32     	; 0x92c <__stack+0x2d>
      write_register(CONFIG,read_register(CONFIG) | _BV(PWR_UP));
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	ce 01       	movw	r24, r28
     910:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     914:	48 2f       	mov	r20, r24
     916:	42 60       	ori	r20, 0x02	; 2
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	ce 01       	movw	r24, r28
     91c:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	8f e0       	ldi	r24, 0x0F	; 15
     922:	97 e2       	ldi	r25, 0x27	; 39
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <__stack+0x25>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x2b>
     92a:	00 00       	nop
	  _delay_ms(5);
	  #else
      delay(5);
	  #endif
   }
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <_ZN4RF2414startFastWriteEPKvhbb>:
//Per the documentation, we want to set PTX Mode when not listening. Then all we do is write data and set CE high
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite( const void* buf, uint8_t len, const bool multicast, bool startTx){ //TMRh20
     932:	0f 93       	push	r16
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24

	//write_payload( buf,len);
	write_payload( buf, len,multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD ) ;
     93a:	22 23       	and	r18, r18
     93c:	11 f0       	breq	.+4      	; 0x942 <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     93e:	20 eb       	ldi	r18, 0xB0	; 176
     940:	01 c0       	rjmp	.+2      	; 0x944 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     942:	20 ea       	ldi	r18, 0xA0	; 160
     944:	ce 01       	movw	r24, r28
     946:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN4RF2413write_payloadEPKvhh>
	if(startTx){
     94a:	00 23       	and	r16, r16
     94c:	21 f0       	breq	.+8      	; 0x956 <_ZN4RF2414startFastWriteEPKvhbb+0x24>
		ce(HIGH);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	ce 01       	movw	r24, r28
     952:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN4RF242ceEb>
	}

}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <_ZN4RF245writeEPKvhb>:
#endif
/******************************************************************/

//Similar to the previous write, clears the interrupt flags
bool RF24::write( const void* buf, uint8_t len, const bool multicast )
{
     95e:	0f 93       	push	r16
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ec 01       	movw	r28, r24
	//Start Writing
	startFastWrite(buf,len,multicast);
     966:	01 e0       	ldi	r16, 0x01	; 1
     968:	0e 94 99 04 	call	0x932	; 0x932 <_ZN4RF2414startFastWriteEPKvhbb>
	//Wait until complete or failed
	#if defined (FAILURE_HANDLING) || defined (RF24_LINUX)
		uint32_t timer = millis();
	#endif 
	
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) { 
     96c:	ce 01       	movw	r24, r28
     96e:	0e 94 29 04 	call	0x852	; 0x852 <_ZN4RF2410get_statusEv>
     972:	80 73       	andi	r24, 0x30	; 48
     974:	d9 f3       	breq	.-10     	; 0x96c <_ZN4RF245writeEPKvhb+0xe>
				#endif
			}
		#endif
	}
    
	ce(LOW);
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	ce 01       	movw	r24, r28
     97a:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN4RF242ceEb>

	uint8_t status = write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     97e:	40 e7       	ldi	r20, 0x70	; 112
     980:	67 e0       	ldi	r22, 0x07	; 7
     982:	ce 01       	movw	r24, r28
     984:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

  //Max retries exceeded
  if( status & _BV(MAX_RT)){
     988:	84 ff       	sbrs	r24, 4
     98a:	05 c0       	rjmp	.+10     	; 0x996 <_ZN4RF245writeEPKvhb+0x38>
  	flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     98c:	ce 01       	movw	r24, r28
     98e:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN4RF248flush_txEv>
  	return 0;
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	01 c0       	rjmp	.+2      	; 0x998 <_ZN4RF245writeEPKvhb+0x3a>
  }
	//TX OK 1 or 0
  return 1;
     996:	81 e0       	ldi	r24, 0x01	; 1
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <_ZN4RF245writeEPKvh>:

bool RF24::write( const void* buf, uint8_t len ){
	return write(buf,len,0);
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN4RF245writeEPKvhb>
}
     9a6:	08 95       	ret

000009a8 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	8b 01       	movw	r16, r22
  if (!( read_register(FIFO_STATUS) & _BV(RX_EMPTY) )){
     9b4:	67 e1       	ldi	r22, 0x17	; 23
     9b6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     9ba:	80 fd       	sbrc	r24, 0
     9bc:	0e c0       	rjmp	.+28     	; 0x9da <_ZN4RF249availableEPh+0x32>

    // If the caller wants the pipe number, include that
    if ( pipe_num ){
     9be:	01 15       	cp	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	69 f0       	breq	.+26     	; 0x9de <_ZN4RF249availableEPh+0x36>
	  uint8_t status = get_status();
     9c4:	ce 01       	movw	r24, r28
     9c6:	0e 94 29 04 	call	0x852	; 0x852 <_ZN4RF2410get_statusEv>
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	95 95       	asr	r25
     9ce:	87 95       	ror	r24
     9d0:	87 70       	andi	r24, 0x07	; 7
     9d2:	f8 01       	movw	r30, r16
     9d4:	80 83       	st	Z, r24
  	}
  	return 1;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <_ZN4RF249availableEPh+0x38>
  }


  return 0;
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <_ZN4RF249availableEPh+0x38>
    // If the caller wants the pipe number, include that
    if ( pipe_num ){
	  uint8_t status = get_status();
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
  	}
  	return 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1


  return 0;


}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <_ZN4RF249availableEv>:

/****************************************************************************/

bool RF24::available(void)
{
  return available(NULL);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN4RF249availableEPh>
}
     9f2:	08 95       	ret

000009f4 <_ZN4RF244readEPvh>:

}

/****************************************************************************/

void RF24::read( void* buf, uint8_t len ){
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24

  // Fetch the payload
  read_payload( buf, len );
     9fa:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN4RF2412read_payloadEPvh>

  //Clear the two possible interrupt flags with one command
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS) );
     9fe:	40 e7       	ldi	r20, 0x70	; 112
     a00:	67 e0       	ldi	r22, 0x07	; 7
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <_ZN4RF2415openWritingPipeEPKh>:
  write_register(RX_PW_P0,payload_size);
}

/****************************************************************************/
void RF24::openWritingPipe(const uint8_t *address)
{
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
     a18:	8b 01       	movw	r16, r22
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0,address, addr_width);
     a1a:	2a 85       	ldd	r18, Y+10	; 0x0a
     a1c:	ab 01       	movw	r20, r22
     a1e:	6a e0       	ldi	r22, 0x0A	; 10
     a20:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN4RF2414write_registerEhPKhh>
  write_register(TX_ADDR, address, addr_width);
     a24:	2a 85       	ldd	r18, Y+10	; 0x0a
     a26:	a8 01       	movw	r20, r16
     a28:	60 e1       	ldi	r22, 0x10	; 16
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN4RF2414write_registerEhPKhh>

  //const uint8_t max_payload_size = 32;
  //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
  write_register(RX_PW_P0,payload_size);
     a30:	4b 81       	ldd	r20, Y+3	; 0x03
     a32:	61 e1       	ldi	r22, 0x11	; 17
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
}
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <_ZN4RF2415openReadingPipeEhPKh>:
}

/****************************************************************************/

void RF24::openReadingPipe(uint8_t child, const uint8_t *address)
{
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
     a50:	f6 2e       	mov	r15, r22
     a52:	8a 01       	movw	r16, r20
  // If this is pipe 0, cache the address.  This is needed because
  // openWritingPipe() will overwrite the pipe 0 address, so
  // startListening() will have to restore it.
  if (child == 0){
     a54:	61 11       	cpse	r22, r1
     a56:	07 c0       	rjmp	.+14     	; 0xa66 <_ZN4RF2415openReadingPipeEhPKh+0x22>
    memcpy(pipe0_reading_address,address,addr_width);
     a58:	4a 85       	ldd	r20, Y+10	; 0x0a
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	b8 01       	movw	r22, r16
     a5e:	05 96       	adiw	r24, 0x05	; 5
     a60:	0e 94 a2 06 	call	0xd44	; 0xd44 <memcpy>
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <_ZN4RF2415openReadingPipeEhPKh+0x30>
  }
  if (child <= 6)
     a66:	66 e0       	ldi	r22, 0x06	; 6
     a68:	6f 15       	cp	r22, r15
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <_ZN4RF2415openReadingPipeEhPKh+0x2a>
     a6c:	36 c0       	rjmp	.+108    	; 0xada <_ZN4RF2415openReadingPipeEhPKh+0x96>
  {
    // For pipes 2-5, only write the LSB
    if ( child < 2 ){
     a6e:	71 e0       	ldi	r23, 0x01	; 1
     a70:	7f 15       	cp	r23, r15
     a72:	58 f0       	brcs	.+22     	; 0xa8a <_ZN4RF2415openReadingPipeEhPKh+0x46>
      write_register(pgm_read_byte(&child_pipe[child]), address, addr_width);
     a74:	ef 2d       	mov	r30, r15
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e2 59       	subi	r30, 0x92	; 146
     a7a:	ff 4f       	sbci	r31, 0xFF	; 255
     a7c:	64 91       	lpm	r22, Z
     a7e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a80:	a8 01       	movw	r20, r16
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN4RF2414write_registerEhPKhh>
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <_ZN4RF2415openReadingPipeEhPKh+0x56>
    }else{
      write_register(pgm_read_byte(&child_pipe[child]), address, 1);
     a8a:	ef 2d       	mov	r30, r15
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	e2 59       	subi	r30, 0x92	; 146
     a90:	ff 4f       	sbci	r31, 0xFF	; 255
     a92:	64 91       	lpm	r22, Z
     a94:	21 e0       	ldi	r18, 0x01	; 1
     a96:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN4RF2414write_registerEhPKhh>
	}
    write_register(pgm_read_byte(&child_payload_size[child]),payload_size);
     a9a:	0f 2d       	mov	r16, r15
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	f8 01       	movw	r30, r16
     aa0:	e8 59       	subi	r30, 0x98	; 152
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	64 91       	lpm	r22, Z
     aa6:	4b 81       	ldd	r20, Y+3	; 0x03
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     aae:	62 e0       	ldi	r22, 0x02	; 2
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     ab6:	f8 01       	movw	r30, r16
     ab8:	ec 58       	subi	r30, 0x8C	; 140
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	44 91       	lpm	r20, Z
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	b9 01       	movw	r22, r18
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <_ZN4RF2415openReadingPipeEhPKh+0x86>
     ac6:	66 0f       	add	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	4a 95       	dec	r20
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <_ZN4RF2415openReadingPipeEhPKh+0x82>
     ace:	ab 01       	movw	r20, r22
     ad0:	48 2b       	or	r20, r24
     ad2:	62 e0       	ldi	r22, 0x02	; 2
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

  }
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	08 95       	ret

00000ae6 <_ZN4RF2416closeReadingPipeEh>:

/****************************************************************************/

void RF24::closeReadingPipe( uint8_t pipe )
{
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ec 01       	movw	r28, r24
     aee:	16 2f       	mov	r17, r22
  write_register(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     af0:	62 e0       	ldi	r22, 0x02	; 2
     af2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     af6:	e1 2f       	mov	r30, r17
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	ec 58       	subi	r30, 0x8C	; 140
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	e4 91       	lpm	r30, Z
     b00:	21 e0       	ldi	r18, 0x01	; 1
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	a9 01       	movw	r20, r18
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <_ZN4RF2416closeReadingPipeEh+0x26>
     b08:	44 0f       	add	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	ea 95       	dec	r30
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <_ZN4RF2416closeReadingPipeEh+0x22>
     b10:	fa 01       	movw	r30, r20
     b12:	e0 95       	com	r30
     b14:	4e 2f       	mov	r20, r30
     b16:	48 23       	and	r20, r24
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	08 95       	ret

00000b28 <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	ec 01       	movw	r28, r24
 #if !defined (RF24_TINY) && ! defined(LITTLEWIRE)
  powerUp();
     b2e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN4RF247powerUpEv>
 #endif
  write_register(CONFIG, read_register(CONFIG) | _BV(PRIM_RX));
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	ce 01       	movw	r24, r28
     b36:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     b3a:	48 2f       	mov	r20, r24
     b3c:	41 60       	ori	r20, 0x01	; 1
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
  write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     b46:	40 e7       	ldi	r20, 0x70	; 112
     b48:	67 e0       	ldi	r22, 0x07	; 7
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
  ce(HIGH);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	ce 01       	movw	r24, r28
     b54:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN4RF242ceEb>
  // Restore the pipe0 adddress, if exists
  if (pipe0_reading_address[0] > 0){
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	88 23       	and	r24, r24
     b5c:	49 f0       	breq	.+18     	; 0xb70 <_ZN4RF2414startListeningEv+0x48>
    write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);	
     b5e:	2a 85       	ldd	r18, Y+10	; 0x0a
     b60:	ae 01       	movw	r20, r28
     b62:	4b 5f       	subi	r20, 0xFB	; 251
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	6a e0       	ldi	r22, 0x0A	; 10
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN4RF2414write_registerEhPKhh>
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <_ZN4RF2414startListeningEv+0x50>
  }else{
	closeReadingPipe(0);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	ce 01       	movw	r24, r28
     b74:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN4RF2416closeReadingPipeEh>
  }

  // Flush buffers
  //flush_rx();
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
     b78:	6d e1       	ldi	r22, 0x1D	; 29
     b7a:	ce 01       	movw	r24, r28
     b7c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     b80:	81 ff       	sbrs	r24, 1
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <_ZN4RF2414startListeningEv+0x62>
	flush_tx();
     b84:	ce 01       	movw	r24, r28
     b86:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN4RF248flush_txEv>
  }

  // Go!
  //delayMicroseconds(100);
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     b96:	84 b1       	in	r24, 0x04	; 4
     b98:	8c 62       	ori	r24, 0x2C	; 44
     b9a:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     b9c:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     b9e:	8c b5       	in	r24, 0x2c	; 44
     ba0:	80 65       	ori	r24, 0x50	; 80
     ba2:	8c bd       	out	0x2c, r24	; 44
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#elif defined (__AVR__)
	AVR_SPI_MSTR_INIT(); 
	#endif
    csn(LOW);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	ce 01       	movw	r24, r28
     ba8:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     bac:	80 e5       	ldi	r24, 0x50	; 80
     bae:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     bb0:	0d b4       	in	r0, 0x2d	; 45
     bb2:	07 fe       	sbrs	r0, 7
     bb4:	fd cf       	rjmp	.-6      	; 0xbb0 <_ZN4RF2415toggle_featuresEv+0x20>
	return SPDR;
     bb6:	8e b5       	in	r24, 0x2e	; 46
 * @param data value of data byte to be sent
 * return data sent back from the salve
 */
inline uint8_t spi_master_transmit_byte_val(uint8_t data){
	//fill SPDR with data to write
	SPDR = data;
     bb8:	83 e7       	ldi	r24, 0x73	; 115
     bba:	8e bd       	out	0x2e, r24	; 46
	//wait for transmission to complete
	while(!(SPSR&(1<<SPIF)));
     bbc:	0d b4       	in	r0, 0x2d	; 45
     bbe:	07 fe       	sbrs	r0, 7
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <_ZN4RF2415toggle_featuresEv+0x2c>
	return SPDR;
     bc2:	8e b5       	in	r24, 0x2e	; 46
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	ce 01       	movw	r24, r28
     bc8:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
  #endif

}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ec 01       	movw	r28, r24
     bda:	16 2f       	mov	r17, r22

  uint8_t setup = read_register(RF_SETUP) & 0b11111000;
     bdc:	66 e0       	ldi	r22, 0x06	; 6
     bde:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     be2:	88 7f       	andi	r24, 0xF8	; 248

  if(level > 3){  						// If invalid level, go to max PA
     be4:	14 30       	cpi	r17, 0x04	; 4
     be6:	20 f4       	brcc	.+8      	; 0xbf0 <_ZN4RF2410setPALevelEh+0x1e>
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
     be8:	41 2f       	mov	r20, r17
     bea:	44 0f       	add	r20, r20
     bec:	4f 5f       	subi	r20, 0xFF	; 255
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <_ZN4RF2410setPALevelEh+0x20>
{

  uint8_t setup = read_register(RF_SETUP) & 0b11111000;

  if(level > 3){  						// If invalid level, go to max PA
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
     bf0:	47 e0       	ldi	r20, 0x07	; 7
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
     bf2:	48 2b       	or	r20, r24
     bf4:	66 e0       	ldi	r22, 0x06	; 6
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	08 95       	ret

00000c04 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	16 2f       	mov	r17, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     c12:	66 e0       	ldi	r22, 0x06	; 6
     c14:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     c18:	87 7d       	andi	r24, 0xD7	; 215
     c1a:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
  #endif
  if( speed == RF24_250KBPS )
     c1c:	12 30       	cpi	r17, 0x02	; 2
     c1e:	59 f4       	brne	.+22     	; 0xc36 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x32>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     c20:	80 62       	ori	r24, 0x20	; 32
     c22:	f8 2e       	mov	r15, r24
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
     c24:	0b e9       	ldi	r16, 0x9B	; 155
     c26:	10 e0       	ldi	r17, 0x00	; 0
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	0b 87       	std	Y+11, r16	; 0x0b
     c2e:	1c 87       	std	Y+12, r17	; 0x0c
     c30:	2d 87       	std	Y+13, r18	; 0x0d
     c32:	3e 87       	std	Y+14, r19	; 0x0e
     c34:	15 c0       	rjmp	.+42     	; 0xc60 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     c36:	11 30       	cpi	r17, 0x01	; 1
     c38:	49 f0       	breq	.+18     	; 0xc4c <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
     c3a:	05 e5       	ldi	r16, 0x55	; 85
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	0b 87       	std	Y+11, r16	; 0x0b
     c44:	1c 87       	std	Y+12, r17	; 0x0c
     c46:	2d 87       	std	Y+13, r18	; 0x0d
     c48:	3e 87       	std	Y+14, r19	; 0x0e
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5c>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     c4c:	88 60       	ori	r24, 0x08	; 8
     c4e:	f8 2e       	mov	r15, r24
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txRxDelay=190;
      #else //16Mhz Arduino	  
	  txRxDelay=65;
     c50:	01 e4       	ldi	r16, 0x41	; 65
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	0b 87       	std	Y+11, r16	; 0x0b
     c5a:	1c 87       	std	Y+12, r17	; 0x0c
     c5c:	2d 87       	std	Y+13, r18	; 0x0d
     c5e:	3e 87       	std	Y+14, r19	; 0x0e
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
     c60:	4f 2d       	mov	r20, r15
     c62:	66 e0       	ldi	r22, 0x06	; 6
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     c6a:	66 e0       	ldi	r22, 0x06	; 6
     c6c:	ce 01       	movw	r24, r28
     c6e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	f8 12       	cpse	r15, r24
     c76:	90 e0       	ldi	r25, 0x00	; 0
  {
    result = true;
  }
  return result;
}
     c78:	89 2f       	mov	r24, r25
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	08 95       	ret

00000c86 <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
  #elif defined(LITTLEWIRE)
    pinMode(csn_pin,OUTPUT);
    _SPI.begin();
    csn(HIGH);
  #elif defined(__AVR__)
	CE_PORT |= (1<<CE_BIT);
     c8c:	5f 9a       	sbi	0x0b, 7	; 11
	CSN_PORT|=(1<<CSN_BIT);
     c8e:	28 9a       	sbi	0x05, 0	; 5
/**
 * initialize the SPI module as master
 */
inline void spi_master_initialize(){
	//set !SS,MOSI,SCK pin as output pins
	SPI_DDR |= (1<<PINB2) | (1<<MOSI_BIT) | (1<<SCK_BIT);
     c90:	84 b1       	in	r24, 0x04	; 4
     c92:	8c 62       	ori	r24, 0x2C	; 44
     c94:	84 b9       	out	0x04, r24	; 4
	//set MISO as input pin
	SPI_DDR &= ~(1<<MISO_BIT);
     c96:	24 98       	cbi	0x04, 4	; 4
	//enable SPI and set as master
	SPCR |= (1<<SPE) | (1<<MSTR);
     c98:	8c b5       	in	r24, 0x2c	; 44
     c9a:	80 65       	ori	r24, 0x50	; 80
     c9c:	8c bd       	out	0x2c, r24	; 44
	spi_master_initialize();
	csn(HIGH);
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4RF243csnEb>
     ca6:	8f e0       	ldi	r24, 0x0F	; 15
     ca8:	97 e2       	ldi	r25, 0x27	; 39
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <_ZN4RF245beginEv+0x24>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <_ZN4RF245beginEv+0x2a>
     cb0:	00 00       	nop
  #else
  delay( 5 ) ;
  #endif

  // Reset CONFIG and enable 16-bit CRC.
  write_register( CONFIG, 0b00001100 ) ;
     cb2:	4c e0       	ldi	r20, 0x0C	; 12
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     cbc:	4f e5       	ldi	r20, 0x5F	; 95
     cbe:	64 e0       	ldi	r22, 0x04	; 4
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	ce 01       	movw	r24, r28
     cca:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     cce:	88 23       	and	r24, r24
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <_ZN4RF245beginEv+0x50>
  {
    p_variant = true ;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8a 83       	std	Y+2, r24	; 0x02
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	6d e1       	ldi	r22, 0x1D	; 29
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	6c e1       	ldi	r22, 0x1C	; 28
     cf2:	ce 01       	movw	r24, r28
     cf4:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     cf8:	40 e7       	ldi	r20, 0x70	; 112
     cfa:	67 e0       	ldi	r22, 0x07	; 7
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     d02:	6c e4       	ldi	r22, 0x4C	; 76
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 38 04 	call	0x870	; 0x870 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 21 04 	call	0x842	; 0x842 <_ZN4RF248flush_rxEv>
  flush_tx();
     d10:	ce 01       	movw	r24, r28
     d12:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(CONFIG, ( read_register(CONFIG) ) & ~_BV(PRIM_RX) );
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	ce 01       	movw	r24, r28
     d20:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN4RF2413read_registerEh>
     d24:	48 2f       	mov	r20, r24
     d26:	4e 7f       	andi	r20, 0xFE	; 254
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	ce 01       	movw	r24, r28
     d2c:	0e 94 41 03 	call	0x682	; 0x682 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
}
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <__tablejump2__>:
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31

00000d3c <__tablejump__>:
     d3c:	05 90       	lpm	r0, Z+
     d3e:	f4 91       	lpm	r31, Z
     d40:	e0 2d       	mov	r30, r0
     d42:	09 94       	ijmp

00000d44 <memcpy>:
     d44:	fb 01       	movw	r30, r22
     d46:	dc 01       	movw	r26, r24
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <memcpy+0xa>
     d4a:	01 90       	ld	r0, Z+
     d4c:	0d 92       	st	X+, r0
     d4e:	41 50       	subi	r20, 0x01	; 1
     d50:	50 40       	sbci	r21, 0x00	; 0
     d52:	d8 f7       	brcc	.-10     	; 0xd4a <memcpy+0x6>
     d54:	08 95       	ret

00000d56 <fdevopen>:
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	ec 01       	movw	r28, r24
     d60:	8b 01       	movw	r16, r22
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	31 f4       	brne	.+12     	; 0xd72 <fdevopen+0x1c>
     d66:	61 15       	cp	r22, r1
     d68:	71 05       	cpc	r23, r1
     d6a:	19 f4       	brne	.+6      	; 0xd72 <fdevopen+0x1c>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	38 c0       	rjmp	.+112    	; 0xde2 <fdevopen+0x8c>
     d72:	6e e0       	ldi	r22, 0x0E	; 14
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <calloc>
     d7e:	fc 01       	movw	r30, r24
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	a1 f3       	breq	.-24     	; 0xd6c <fdevopen+0x16>
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	83 83       	std	Z+3, r24	; 0x03
     d88:	01 15       	cp	r16, r1
     d8a:	11 05       	cpc	r17, r1
     d8c:	71 f0       	breq	.+28     	; 0xdaa <fdevopen+0x54>
     d8e:	13 87       	std	Z+11, r17	; 0x0b
     d90:	02 87       	std	Z+10, r16	; 0x0a
     d92:	81 e8       	ldi	r24, 0x81	; 129
     d94:	83 83       	std	Z+3, r24	; 0x03
     d96:	80 91 88 02 	lds	r24, 0x0288
     d9a:	90 91 89 02 	lds	r25, 0x0289
     d9e:	89 2b       	or	r24, r25
     da0:	21 f4       	brne	.+8      	; 0xdaa <fdevopen+0x54>
     da2:	f0 93 89 02 	sts	0x0289, r31
     da6:	e0 93 88 02 	sts	0x0288, r30
     daa:	20 97       	sbiw	r28, 0x00	; 0
     dac:	c9 f0       	breq	.+50     	; 0xde0 <fdevopen+0x8a>
     dae:	d1 87       	std	Z+9, r29	; 0x09
     db0:	c0 87       	std	Z+8, r28	; 0x08
     db2:	83 81       	ldd	r24, Z+3	; 0x03
     db4:	82 60       	ori	r24, 0x02	; 2
     db6:	83 83       	std	Z+3, r24	; 0x03
     db8:	80 91 8a 02 	lds	r24, 0x028A
     dbc:	90 91 8b 02 	lds	r25, 0x028B
     dc0:	89 2b       	or	r24, r25
     dc2:	71 f4       	brne	.+28     	; 0xde0 <fdevopen+0x8a>
     dc4:	f0 93 8b 02 	sts	0x028B, r31
     dc8:	e0 93 8a 02 	sts	0x028A, r30
     dcc:	80 91 8c 02 	lds	r24, 0x028C
     dd0:	90 91 8d 02 	lds	r25, 0x028D
     dd4:	89 2b       	or	r24, r25
     dd6:	21 f4       	brne	.+8      	; 0xde0 <fdevopen+0x8a>
     dd8:	f0 93 8d 02 	sts	0x028D, r31
     ddc:	e0 93 8c 02 	sts	0x028C, r30
     de0:	cf 01       	movw	r24, r30
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <printf>:
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ec ef       	ldi	r30, 0xFC	; 252
     df2:	f6 e0       	ldi	r31, 0x06	; 6
     df4:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__prologue_saves__+0x20>
     df8:	fe 01       	movw	r30, r28
     dfa:	35 96       	adiw	r30, 0x05	; 5
     dfc:	61 91       	ld	r22, Z+
     dfe:	71 91       	ld	r23, Z+
     e00:	af 01       	movw	r20, r30
     e02:	80 91 8a 02 	lds	r24, 0x028A
     e06:	90 91 8b 02 	lds	r25, 0x028B
     e0a:	0e 94 4b 07 	call	0xe96	; 0xe96 <vfprintf>
     e0e:	e2 e0       	ldi	r30, 0x02	; 2
     e10:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__epilogue_restores__+0x20>

00000e14 <puts>:
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	e0 91 8a 02 	lds	r30, 0x028A
     e20:	f0 91 8b 02 	lds	r31, 0x028B
     e24:	23 81       	ldd	r18, Z+3	; 0x03
     e26:	21 ff       	sbrs	r18, 1
     e28:	1b c0       	rjmp	.+54     	; 0xe60 <puts+0x4c>
     e2a:	ec 01       	movw	r28, r24
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	89 91       	ld	r24, Y+
     e32:	60 91 8a 02 	lds	r22, 0x028A
     e36:	70 91 8b 02 	lds	r23, 0x028B
     e3a:	db 01       	movw	r26, r22
     e3c:	18 96       	adiw	r26, 0x08	; 8
     e3e:	ed 91       	ld	r30, X+
     e40:	fc 91       	ld	r31, X
     e42:	19 97       	sbiw	r26, 0x09	; 9
     e44:	88 23       	and	r24, r24
     e46:	31 f0       	breq	.+12     	; 0xe54 <puts+0x40>
     e48:	09 95       	icall
     e4a:	89 2b       	or	r24, r25
     e4c:	89 f3       	breq	.-30     	; 0xe30 <puts+0x1c>
     e4e:	0f ef       	ldi	r16, 0xFF	; 255
     e50:	1f ef       	ldi	r17, 0xFF	; 255
     e52:	ee cf       	rjmp	.-36     	; 0xe30 <puts+0x1c>
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	09 95       	icall
     e58:	89 2b       	or	r24, r25
     e5a:	11 f4       	brne	.+4      	; 0xe60 <puts+0x4c>
     e5c:	c8 01       	movw	r24, r16
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <puts+0x50>
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <scanf>:
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ed e3       	ldi	r30, 0x3D	; 61
     e74:	f7 e0       	ldi	r31, 0x07	; 7
     e76:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__prologue_saves__+0x20>
     e7a:	fe 01       	movw	r30, r28
     e7c:	35 96       	adiw	r30, 0x05	; 5
     e7e:	61 91       	ld	r22, Z+
     e80:	71 91       	ld	r23, Z+
     e82:	af 01       	movw	r20, r30
     e84:	80 91 88 02 	lds	r24, 0x0288
     e88:	90 91 89 02 	lds	r25, 0x0289
     e8c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <vfscanf>
     e90:	e2 e0       	ldi	r30, 0x02	; 2
     e92:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__epilogue_restores__+0x20>

00000e96 <vfprintf>:
     e96:	ac e0       	ldi	r26, 0x0C	; 12
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e5       	ldi	r30, 0x51	; 81
     e9c:	f7 e0       	ldi	r31, 0x07	; 7
     e9e:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__prologue_saves__>
     ea2:	7c 01       	movw	r14, r24
     ea4:	6b 01       	movw	r12, r22
     ea6:	8a 01       	movw	r16, r20
     ea8:	fc 01       	movw	r30, r24
     eaa:	17 82       	std	Z+7, r1	; 0x07
     eac:	16 82       	std	Z+6, r1	; 0x06
     eae:	83 81       	ldd	r24, Z+3	; 0x03
     eb0:	81 ff       	sbrs	r24, 1
     eb2:	bd c1       	rjmp	.+890    	; 0x122e <vfprintf+0x398>
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	4c 01       	movw	r8, r24
     eba:	f7 01       	movw	r30, r14
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	f6 01       	movw	r30, r12
     ec0:	93 fd       	sbrc	r25, 3
     ec2:	85 91       	lpm	r24, Z+
     ec4:	93 ff       	sbrs	r25, 3
     ec6:	81 91       	ld	r24, Z+
     ec8:	6f 01       	movw	r12, r30
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfprintf+0x3a>
     ece:	ab c1       	rjmp	.+854    	; 0x1226 <vfprintf+0x390>
     ed0:	85 32       	cpi	r24, 0x25	; 37
     ed2:	39 f4       	brne	.+14     	; 0xee2 <vfprintf+0x4c>
     ed4:	93 fd       	sbrc	r25, 3
     ed6:	85 91       	lpm	r24, Z+
     ed8:	93 ff       	sbrs	r25, 3
     eda:	81 91       	ld	r24, Z+
     edc:	6f 01       	movw	r12, r30
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	29 f4       	brne	.+10     	; 0xeec <vfprintf+0x56>
     ee2:	b7 01       	movw	r22, r14
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
     eea:	e7 cf       	rjmp	.-50     	; 0xeba <vfprintf+0x24>
     eec:	51 2c       	mov	r5, r1
     eee:	31 2c       	mov	r3, r1
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	20 32       	cpi	r18, 0x20	; 32
     ef4:	a0 f4       	brcc	.+40     	; 0xf1e <vfprintf+0x88>
     ef6:	8b 32       	cpi	r24, 0x2B	; 43
     ef8:	69 f0       	breq	.+26     	; 0xf14 <vfprintf+0x7e>
     efa:	30 f4       	brcc	.+12     	; 0xf08 <vfprintf+0x72>
     efc:	80 32       	cpi	r24, 0x20	; 32
     efe:	59 f0       	breq	.+22     	; 0xf16 <vfprintf+0x80>
     f00:	83 32       	cpi	r24, 0x23	; 35
     f02:	69 f4       	brne	.+26     	; 0xf1e <vfprintf+0x88>
     f04:	20 61       	ori	r18, 0x10	; 16
     f06:	2c c0       	rjmp	.+88     	; 0xf60 <vfprintf+0xca>
     f08:	8d 32       	cpi	r24, 0x2D	; 45
     f0a:	39 f0       	breq	.+14     	; 0xf1a <vfprintf+0x84>
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	39 f4       	brne	.+14     	; 0xf1e <vfprintf+0x88>
     f10:	21 60       	ori	r18, 0x01	; 1
     f12:	26 c0       	rjmp	.+76     	; 0xf60 <vfprintf+0xca>
     f14:	22 60       	ori	r18, 0x02	; 2
     f16:	24 60       	ori	r18, 0x04	; 4
     f18:	23 c0       	rjmp	.+70     	; 0xf60 <vfprintf+0xca>
     f1a:	28 60       	ori	r18, 0x08	; 8
     f1c:	21 c0       	rjmp	.+66     	; 0xf60 <vfprintf+0xca>
     f1e:	27 fd       	sbrc	r18, 7
     f20:	27 c0       	rjmp	.+78     	; 0xf70 <vfprintf+0xda>
     f22:	30 ed       	ldi	r19, 0xD0	; 208
     f24:	38 0f       	add	r19, r24
     f26:	3a 30       	cpi	r19, 0x0A	; 10
     f28:	78 f4       	brcc	.+30     	; 0xf48 <vfprintf+0xb2>
     f2a:	26 ff       	sbrs	r18, 6
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0xa4>
     f2e:	fa e0       	ldi	r31, 0x0A	; 10
     f30:	5f 9e       	mul	r5, r31
     f32:	30 0d       	add	r19, r0
     f34:	11 24       	eor	r1, r1
     f36:	53 2e       	mov	r5, r19
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <vfprintf+0xca>
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	38 9e       	mul	r3, r24
     f3e:	30 0d       	add	r19, r0
     f40:	11 24       	eor	r1, r1
     f42:	33 2e       	mov	r3, r19
     f44:	20 62       	ori	r18, 0x20	; 32
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <vfprintf+0xca>
     f48:	8e 32       	cpi	r24, 0x2E	; 46
     f4a:	21 f4       	brne	.+8      	; 0xf54 <vfprintf+0xbe>
     f4c:	26 fd       	sbrc	r18, 6
     f4e:	6b c1       	rjmp	.+726    	; 0x1226 <vfprintf+0x390>
     f50:	20 64       	ori	r18, 0x40	; 64
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0xca>
     f54:	8c 36       	cpi	r24, 0x6C	; 108
     f56:	11 f4       	brne	.+4      	; 0xf5c <vfprintf+0xc6>
     f58:	20 68       	ori	r18, 0x80	; 128
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0xca>
     f5c:	88 36       	cpi	r24, 0x68	; 104
     f5e:	41 f4       	brne	.+16     	; 0xf70 <vfprintf+0xda>
     f60:	f6 01       	movw	r30, r12
     f62:	93 fd       	sbrc	r25, 3
     f64:	85 91       	lpm	r24, Z+
     f66:	93 ff       	sbrs	r25, 3
     f68:	81 91       	ld	r24, Z+
     f6a:	6f 01       	movw	r12, r30
     f6c:	81 11       	cpse	r24, r1
     f6e:	c1 cf       	rjmp	.-126    	; 0xef2 <vfprintf+0x5c>
     f70:	98 2f       	mov	r25, r24
     f72:	9f 7d       	andi	r25, 0xDF	; 223
     f74:	95 54       	subi	r25, 0x45	; 69
     f76:	93 30       	cpi	r25, 0x03	; 3
     f78:	28 f4       	brcc	.+10     	; 0xf84 <vfprintf+0xee>
     f7a:	0c 5f       	subi	r16, 0xFC	; 252
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	ff e3       	ldi	r31, 0x3F	; 63
     f80:	f9 83       	std	Y+1, r31	; 0x01
     f82:	0d c0       	rjmp	.+26     	; 0xf9e <vfprintf+0x108>
     f84:	83 36       	cpi	r24, 0x63	; 99
     f86:	31 f0       	breq	.+12     	; 0xf94 <vfprintf+0xfe>
     f88:	83 37       	cpi	r24, 0x73	; 115
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <vfprintf+0x112>
     f8c:	83 35       	cpi	r24, 0x53	; 83
     f8e:	09 f0       	breq	.+2      	; 0xf92 <vfprintf+0xfc>
     f90:	5b c0       	rjmp	.+182    	; 0x1048 <vfprintf+0x1b2>
     f92:	22 c0       	rjmp	.+68     	; 0xfd8 <vfprintf+0x142>
     f94:	f8 01       	movw	r30, r16
     f96:	80 81       	ld	r24, Z
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	0e 5f       	subi	r16, 0xFE	; 254
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	44 24       	eor	r4, r4
     fa0:	43 94       	inc	r4
     fa2:	51 2c       	mov	r5, r1
     fa4:	54 01       	movw	r10, r8
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <vfprintf+0x13c>
     fa8:	38 01       	movw	r6, r16
     faa:	f2 e0       	ldi	r31, 0x02	; 2
     fac:	6f 0e       	add	r6, r31
     fae:	71 1c       	adc	r7, r1
     fb0:	f8 01       	movw	r30, r16
     fb2:	a0 80       	ld	r10, Z
     fb4:	b1 80       	ldd	r11, Z+1	; 0x01
     fb6:	26 ff       	sbrs	r18, 6
     fb8:	03 c0       	rjmp	.+6      	; 0xfc0 <vfprintf+0x12a>
     fba:	65 2d       	mov	r22, r5
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <vfprintf+0x12e>
     fc0:	6f ef       	ldi	r22, 0xFF	; 255
     fc2:	7f ef       	ldi	r23, 0xFF	; 255
     fc4:	c5 01       	movw	r24, r10
     fc6:	2c 87       	std	Y+12, r18	; 0x0c
     fc8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <strnlen>
     fcc:	2c 01       	movw	r4, r24
     fce:	83 01       	movw	r16, r6
     fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fd2:	2f 77       	andi	r18, 0x7F	; 127
     fd4:	22 2e       	mov	r2, r18
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <vfprintf+0x170>
     fd8:	38 01       	movw	r6, r16
     fda:	f2 e0       	ldi	r31, 0x02	; 2
     fdc:	6f 0e       	add	r6, r31
     fde:	71 1c       	adc	r7, r1
     fe0:	f8 01       	movw	r30, r16
     fe2:	a0 80       	ld	r10, Z
     fe4:	b1 80       	ldd	r11, Z+1	; 0x01
     fe6:	26 ff       	sbrs	r18, 6
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <vfprintf+0x15a>
     fea:	65 2d       	mov	r22, r5
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x15e>
     ff0:	6f ef       	ldi	r22, 0xFF	; 255
     ff2:	7f ef       	ldi	r23, 0xFF	; 255
     ff4:	c5 01       	movw	r24, r10
     ff6:	2c 87       	std	Y+12, r18	; 0x0c
     ff8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <strnlen_P>
     ffc:	2c 01       	movw	r4, r24
     ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1000:	20 68       	ori	r18, 0x80	; 128
    1002:	22 2e       	mov	r2, r18
    1004:	83 01       	movw	r16, r6
    1006:	23 fc       	sbrc	r2, 3
    1008:	1b c0       	rjmp	.+54     	; 0x1040 <vfprintf+0x1aa>
    100a:	83 2d       	mov	r24, r3
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	48 16       	cp	r4, r24
    1010:	59 06       	cpc	r5, r25
    1012:	b0 f4       	brcc	.+44     	; 0x1040 <vfprintf+0x1aa>
    1014:	b7 01       	movw	r22, r14
    1016:	80 e2       	ldi	r24, 0x20	; 32
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    101e:	3a 94       	dec	r3
    1020:	f4 cf       	rjmp	.-24     	; 0x100a <vfprintf+0x174>
    1022:	f5 01       	movw	r30, r10
    1024:	27 fc       	sbrc	r2, 7
    1026:	85 91       	lpm	r24, Z+
    1028:	27 fe       	sbrs	r2, 7
    102a:	81 91       	ld	r24, Z+
    102c:	5f 01       	movw	r10, r30
    102e:	b7 01       	movw	r22, r14
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    1036:	31 10       	cpse	r3, r1
    1038:	3a 94       	dec	r3
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	4f 1a       	sub	r4, r31
    103e:	51 08       	sbc	r5, r1
    1040:	41 14       	cp	r4, r1
    1042:	51 04       	cpc	r5, r1
    1044:	71 f7       	brne	.-36     	; 0x1022 <vfprintf+0x18c>
    1046:	e5 c0       	rjmp	.+458    	; 0x1212 <vfprintf+0x37c>
    1048:	84 36       	cpi	r24, 0x64	; 100
    104a:	11 f0       	breq	.+4      	; 0x1050 <vfprintf+0x1ba>
    104c:	89 36       	cpi	r24, 0x69	; 105
    104e:	39 f5       	brne	.+78     	; 0x109e <vfprintf+0x208>
    1050:	f8 01       	movw	r30, r16
    1052:	27 ff       	sbrs	r18, 7
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <vfprintf+0x1ce>
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	0c 5f       	subi	r16, 0xFC	; 252
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <vfprintf+0x1de>
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	88 27       	eor	r24, r24
    106a:	77 fd       	sbrc	r23, 7
    106c:	80 95       	com	r24
    106e:	98 2f       	mov	r25, r24
    1070:	0e 5f       	subi	r16, 0xFE	; 254
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	2f 76       	andi	r18, 0x6F	; 111
    1076:	b2 2e       	mov	r11, r18
    1078:	97 ff       	sbrs	r25, 7
    107a:	09 c0       	rjmp	.+18     	; 0x108e <vfprintf+0x1f8>
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	20 68       	ori	r18, 0x80	; 128
    108c:	b2 2e       	mov	r11, r18
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	a4 01       	movw	r20, r8
    1094:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__ultoa_invert>
    1098:	a8 2e       	mov	r10, r24
    109a:	a8 18       	sub	r10, r8
    109c:	44 c0       	rjmp	.+136    	; 0x1126 <vfprintf+0x290>
    109e:	85 37       	cpi	r24, 0x75	; 117
    10a0:	29 f4       	brne	.+10     	; 0x10ac <vfprintf+0x216>
    10a2:	2f 7e       	andi	r18, 0xEF	; 239
    10a4:	b2 2e       	mov	r11, r18
    10a6:	2a e0       	ldi	r18, 0x0A	; 10
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	25 c0       	rjmp	.+74     	; 0x10f6 <vfprintf+0x260>
    10ac:	f2 2f       	mov	r31, r18
    10ae:	f9 7f       	andi	r31, 0xF9	; 249
    10b0:	bf 2e       	mov	r11, r31
    10b2:	8f 36       	cpi	r24, 0x6F	; 111
    10b4:	c1 f0       	breq	.+48     	; 0x10e6 <vfprintf+0x250>
    10b6:	18 f4       	brcc	.+6      	; 0x10be <vfprintf+0x228>
    10b8:	88 35       	cpi	r24, 0x58	; 88
    10ba:	79 f0       	breq	.+30     	; 0x10da <vfprintf+0x244>
    10bc:	b4 c0       	rjmp	.+360    	; 0x1226 <vfprintf+0x390>
    10be:	80 37       	cpi	r24, 0x70	; 112
    10c0:	19 f0       	breq	.+6      	; 0x10c8 <vfprintf+0x232>
    10c2:	88 37       	cpi	r24, 0x78	; 120
    10c4:	21 f0       	breq	.+8      	; 0x10ce <vfprintf+0x238>
    10c6:	af c0       	rjmp	.+350    	; 0x1226 <vfprintf+0x390>
    10c8:	2f 2f       	mov	r18, r31
    10ca:	20 61       	ori	r18, 0x10	; 16
    10cc:	b2 2e       	mov	r11, r18
    10ce:	b4 fe       	sbrs	r11, 4
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <vfprintf+0x256>
    10d2:	8b 2d       	mov	r24, r11
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	b8 2e       	mov	r11, r24
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <vfprintf+0x256>
    10da:	24 ff       	sbrs	r18, 4
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <vfprintf+0x25c>
    10de:	9f 2f       	mov	r25, r31
    10e0:	96 60       	ori	r25, 0x06	; 6
    10e2:	b9 2e       	mov	r11, r25
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <vfprintf+0x25c>
    10e6:	28 e0       	ldi	r18, 0x08	; 8
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <vfprintf+0x260>
    10ec:	20 e1       	ldi	r18, 0x10	; 16
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x260>
    10f2:	20 e1       	ldi	r18, 0x10	; 16
    10f4:	32 e0       	ldi	r19, 0x02	; 2
    10f6:	f8 01       	movw	r30, r16
    10f8:	b7 fe       	sbrs	r11, 7
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <vfprintf+0x274>
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	0c 5f       	subi	r16, 0xFC	; 252
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0x280>
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 5f       	subi	r16, 0xFE	; 254
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	a4 01       	movw	r20, r8
    1118:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__ultoa_invert>
    111c:	a8 2e       	mov	r10, r24
    111e:	a8 18       	sub	r10, r8
    1120:	fb 2d       	mov	r31, r11
    1122:	ff 77       	andi	r31, 0x7F	; 127
    1124:	bf 2e       	mov	r11, r31
    1126:	b6 fe       	sbrs	r11, 6
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <vfprintf+0x2aa>
    112a:	2b 2d       	mov	r18, r11
    112c:	2e 7f       	andi	r18, 0xFE	; 254
    112e:	a5 14       	cp	r10, r5
    1130:	50 f4       	brcc	.+20     	; 0x1146 <vfprintf+0x2b0>
    1132:	b4 fe       	sbrs	r11, 4
    1134:	0a c0       	rjmp	.+20     	; 0x114a <vfprintf+0x2b4>
    1136:	b2 fc       	sbrc	r11, 2
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x2b4>
    113a:	2b 2d       	mov	r18, r11
    113c:	2e 7e       	andi	r18, 0xEE	; 238
    113e:	05 c0       	rjmp	.+10     	; 0x114a <vfprintf+0x2b4>
    1140:	7a 2c       	mov	r7, r10
    1142:	2b 2d       	mov	r18, r11
    1144:	03 c0       	rjmp	.+6      	; 0x114c <vfprintf+0x2b6>
    1146:	7a 2c       	mov	r7, r10
    1148:	01 c0       	rjmp	.+2      	; 0x114c <vfprintf+0x2b6>
    114a:	75 2c       	mov	r7, r5
    114c:	24 ff       	sbrs	r18, 4
    114e:	0d c0       	rjmp	.+26     	; 0x116a <vfprintf+0x2d4>
    1150:	fe 01       	movw	r30, r28
    1152:	ea 0d       	add	r30, r10
    1154:	f1 1d       	adc	r31, r1
    1156:	80 81       	ld	r24, Z
    1158:	80 33       	cpi	r24, 0x30	; 48
    115a:	11 f4       	brne	.+4      	; 0x1160 <vfprintf+0x2ca>
    115c:	29 7e       	andi	r18, 0xE9	; 233
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x2dc>
    1160:	22 ff       	sbrs	r18, 2
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x2da>
    1164:	73 94       	inc	r7
    1166:	73 94       	inc	r7
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vfprintf+0x2dc>
    116a:	82 2f       	mov	r24, r18
    116c:	86 78       	andi	r24, 0x86	; 134
    116e:	09 f0       	breq	.+2      	; 0x1172 <vfprintf+0x2dc>
    1170:	73 94       	inc	r7
    1172:	23 fd       	sbrc	r18, 3
    1174:	13 c0       	rjmp	.+38     	; 0x119c <vfprintf+0x306>
    1176:	20 ff       	sbrs	r18, 0
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x2f0>
    117a:	5a 2c       	mov	r5, r10
    117c:	73 14       	cp	r7, r3
    117e:	18 f4       	brcc	.+6      	; 0x1186 <vfprintf+0x2f0>
    1180:	53 0c       	add	r5, r3
    1182:	57 18       	sub	r5, r7
    1184:	73 2c       	mov	r7, r3
    1186:	73 14       	cp	r7, r3
    1188:	68 f4       	brcc	.+26     	; 0x11a4 <vfprintf+0x30e>
    118a:	b7 01       	movw	r22, r14
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	2c 87       	std	Y+12, r18	; 0x0c
    1192:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    1196:	73 94       	inc	r7
    1198:	2c 85       	ldd	r18, Y+12	; 0x0c
    119a:	f5 cf       	rjmp	.-22     	; 0x1186 <vfprintf+0x2f0>
    119c:	73 14       	cp	r7, r3
    119e:	10 f4       	brcc	.+4      	; 0x11a4 <vfprintf+0x30e>
    11a0:	37 18       	sub	r3, r7
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <vfprintf+0x310>
    11a4:	31 2c       	mov	r3, r1
    11a6:	24 ff       	sbrs	r18, 4
    11a8:	12 c0       	rjmp	.+36     	; 0x11ce <vfprintf+0x338>
    11aa:	b7 01       	movw	r22, r14
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	2c 87       	std	Y+12, r18	; 0x0c
    11b2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    11b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b8:	22 ff       	sbrs	r18, 2
    11ba:	17 c0       	rjmp	.+46     	; 0x11ea <vfprintf+0x354>
    11bc:	21 ff       	sbrs	r18, 1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <vfprintf+0x330>
    11c0:	88 e5       	ldi	r24, 0x58	; 88
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x334>
    11c6:	88 e7       	ldi	r24, 0x78	; 120
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	b7 01       	movw	r22, r14
    11cc:	0c c0       	rjmp	.+24     	; 0x11e6 <vfprintf+0x350>
    11ce:	82 2f       	mov	r24, r18
    11d0:	86 78       	andi	r24, 0x86	; 134
    11d2:	59 f0       	breq	.+22     	; 0x11ea <vfprintf+0x354>
    11d4:	21 fd       	sbrc	r18, 1
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <vfprintf+0x346>
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	01 c0       	rjmp	.+2      	; 0x11de <vfprintf+0x348>
    11dc:	8b e2       	ldi	r24, 0x2B	; 43
    11de:	27 fd       	sbrc	r18, 7
    11e0:	8d e2       	ldi	r24, 0x2D	; 45
    11e2:	b7 01       	movw	r22, r14
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    11ea:	a5 14       	cp	r10, r5
    11ec:	38 f4       	brcc	.+14     	; 0x11fc <vfprintf+0x366>
    11ee:	b7 01       	movw	r22, r14
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    11f8:	5a 94       	dec	r5
    11fa:	f7 cf       	rjmp	.-18     	; 0x11ea <vfprintf+0x354>
    11fc:	aa 94       	dec	r10
    11fe:	f4 01       	movw	r30, r8
    1200:	ea 0d       	add	r30, r10
    1202:	f1 1d       	adc	r31, r1
    1204:	80 81       	ld	r24, Z
    1206:	b7 01       	movw	r22, r14
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    120e:	a1 10       	cpse	r10, r1
    1210:	f5 cf       	rjmp	.-22     	; 0x11fc <vfprintf+0x366>
    1212:	33 20       	and	r3, r3
    1214:	09 f4       	brne	.+2      	; 0x1218 <vfprintf+0x382>
    1216:	51 ce       	rjmp	.-862    	; 0xeba <vfprintf+0x24>
    1218:	b7 01       	movw	r22, r14
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <fputc>
    1222:	3a 94       	dec	r3
    1224:	f6 cf       	rjmp	.-20     	; 0x1212 <vfprintf+0x37c>
    1226:	f7 01       	movw	r30, r14
    1228:	86 81       	ldd	r24, Z+6	; 0x06
    122a:	97 81       	ldd	r25, Z+7	; 0x07
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x39c>
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	2c 96       	adiw	r28, 0x0c	; 12
    1234:	e2 e1       	ldi	r30, 0x12	; 18
    1236:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__epilogue_restores__>

0000123a <putval>:
    123a:	20 fd       	sbrc	r18, 0
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <putval+0x16>
    123e:	fc 01       	movw	r30, r24
    1240:	23 fd       	sbrc	r18, 3
    1242:	05 c0       	rjmp	.+10     	; 0x124e <putval+0x14>
    1244:	22 ff       	sbrs	r18, 2
    1246:	02 c0       	rjmp	.+4      	; 0x124c <putval+0x12>
    1248:	73 83       	std	Z+3, r23	; 0x03
    124a:	62 83       	std	Z+2, r22	; 0x02
    124c:	51 83       	std	Z+1, r21	; 0x01
    124e:	40 83       	st	Z, r20
    1250:	08 95       	ret

00001252 <mulacc>:
    1252:	44 fd       	sbrc	r20, 4
    1254:	10 c0       	rjmp	.+32     	; 0x1276 <mulacc+0x24>
    1256:	46 fd       	sbrc	r20, 6
    1258:	10 c0       	rjmp	.+32     	; 0x127a <mulacc+0x28>
    125a:	db 01       	movw	r26, r22
    125c:	fc 01       	movw	r30, r24
    125e:	aa 0f       	add	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	ee 1f       	adc	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	10 94       	com	r1
    1268:	d1 f7       	brne	.-12     	; 0x125e <mulacc+0xc>
    126a:	6a 0f       	add	r22, r26
    126c:	7b 1f       	adc	r23, r27
    126e:	8e 1f       	adc	r24, r30
    1270:	9f 1f       	adc	r25, r31
    1272:	31 e0       	ldi	r19, 0x01	; 1
    1274:	03 c0       	rjmp	.+6      	; 0x127c <mulacc+0x2a>
    1276:	33 e0       	ldi	r19, 0x03	; 3
    1278:	01 c0       	rjmp	.+2      	; 0x127c <mulacc+0x2a>
    127a:	34 e0       	ldi	r19, 0x04	; 4
    127c:	66 0f       	add	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	88 1f       	adc	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	31 50       	subi	r19, 0x01	; 1
    1286:	d1 f7       	brne	.-12     	; 0x127c <mulacc+0x2a>
    1288:	62 0f       	add	r22, r18
    128a:	71 1d       	adc	r23, r1
    128c:	81 1d       	adc	r24, r1
    128e:	91 1d       	adc	r25, r1
    1290:	08 95       	ret

00001292 <skip_spaces>:
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	8c 01       	movw	r16, r24
    129c:	c8 01       	movw	r24, r16
    129e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    12a2:	ec 01       	movw	r28, r24
    12a4:	97 fd       	sbrc	r25, 7
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <skip_spaces+0x26>
    12a8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <isspace>
    12ac:	89 2b       	or	r24, r25
    12ae:	b1 f7       	brne	.-20     	; 0x129c <skip_spaces+0xa>
    12b0:	b8 01       	movw	r22, r16
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <ungetc>
    12b8:	ce 01       	movw	r24, r28
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <conv_int>:
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	a6 2e       	mov	r10, r22
    12de:	4a 01       	movw	r8, r20
    12e0:	02 2f       	mov	r16, r18
    12e2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    12e6:	ac 01       	movw	r20, r24
    12e8:	55 27       	eor	r21, r21
    12ea:	4b 32       	cpi	r20, 0x2B	; 43
    12ec:	51 05       	cpc	r21, r1
    12ee:	21 f0       	breq	.+8      	; 0x12f8 <conv_int+0x34>
    12f0:	4d 32       	cpi	r20, 0x2D	; 45
    12f2:	51 05       	cpc	r21, r1
    12f4:	51 f4       	brne	.+20     	; 0x130a <conv_int+0x46>
    12f6:	00 68       	ori	r16, 0x80	; 128
    12f8:	aa 94       	dec	r10
    12fa:	11 f4       	brne	.+4      	; 0x1300 <conv_int+0x3c>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	67 c0       	rjmp	.+206    	; 0x13ce <conv_int+0x10a>
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    1306:	97 fd       	sbrc	r25, 7
    1308:	f9 cf       	rjmp	.-14     	; 0x12fc <conv_int+0x38>
    130a:	10 2f       	mov	r17, r16
    130c:	1d 7f       	andi	r17, 0xFD	; 253
    130e:	30 2f       	mov	r19, r16
    1310:	30 73       	andi	r19, 0x30	; 48
    1312:	01 f5       	brne	.+64     	; 0x1354 <conv_int+0x90>
    1314:	80 33       	cpi	r24, 0x30	; 48
    1316:	f1 f4       	brne	.+60     	; 0x1354 <conv_int+0x90>
    1318:	ff 24       	eor	r15, r15
    131a:	fa 94       	dec	r15
    131c:	fa 0c       	add	r15, r10
    131e:	09 f4       	brne	.+2      	; 0x1322 <conv_int+0x5e>
    1320:	42 c0       	rjmp	.+132    	; 0x13a6 <conv_int+0xe2>
    1322:	ce 01       	movw	r24, r28
    1324:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    1328:	97 fd       	sbrc	r25, 7
    132a:	3d c0       	rjmp	.+122    	; 0x13a6 <conv_int+0xe2>
    132c:	38 2f       	mov	r19, r24
    132e:	3f 7d       	andi	r19, 0xDF	; 223
    1330:	38 35       	cpi	r19, 0x58	; 88
    1332:	51 f4       	brne	.+20     	; 0x1348 <conv_int+0x84>
    1334:	12 64       	ori	r17, 0x42	; 66
    1336:	aa 94       	dec	r10
    1338:	aa 94       	dec	r10
    133a:	a9 f1       	breq	.+106    	; 0x13a6 <conv_int+0xe2>
    133c:	ce 01       	movw	r24, r28
    133e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    1342:	97 ff       	sbrs	r25, 7
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <conv_int+0x90>
    1346:	2f c0       	rjmp	.+94     	; 0x13a6 <conv_int+0xe2>
    1348:	06 ff       	sbrs	r16, 6
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <conv_int+0x8c>
    134c:	12 60       	ori	r17, 0x02	; 2
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <conv_int+0x8e>
    1350:	12 61       	ori	r17, 0x12	; 18
    1352:	af 2c       	mov	r10, r15
    1354:	c1 2c       	mov	r12, r1
    1356:	d1 2c       	mov	r13, r1
    1358:	76 01       	movw	r14, r12
    135a:	20 ed       	ldi	r18, 0xD0	; 208
    135c:	28 0f       	add	r18, r24
    135e:	28 30       	cpi	r18, 0x08	; 8
    1360:	80 f0       	brcs	.+32     	; 0x1382 <conv_int+0xbe>
    1362:	14 ff       	sbrs	r17, 4
    1364:	04 c0       	rjmp	.+8      	; 0x136e <conv_int+0xaa>
    1366:	be 01       	movw	r22, r28
    1368:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <ungetc>
    136c:	19 c0       	rjmp	.+50     	; 0x13a0 <conv_int+0xdc>
    136e:	2a 30       	cpi	r18, 0x0A	; 10
    1370:	40 f0       	brcs	.+16     	; 0x1382 <conv_int+0xbe>
    1372:	16 ff       	sbrs	r17, 6
    1374:	f8 cf       	rjmp	.-16     	; 0x1366 <conv_int+0xa2>
    1376:	2f 7d       	andi	r18, 0xDF	; 223
    1378:	3f ee       	ldi	r19, 0xEF	; 239
    137a:	32 0f       	add	r19, r18
    137c:	36 30       	cpi	r19, 0x06	; 6
    137e:	98 f7       	brcc	.-26     	; 0x1366 <conv_int+0xa2>
    1380:	27 50       	subi	r18, 0x07	; 7
    1382:	41 2f       	mov	r20, r17
    1384:	c7 01       	movw	r24, r14
    1386:	b6 01       	movw	r22, r12
    1388:	0e 94 29 09 	call	0x1252	; 0x1252 <mulacc>
    138c:	6b 01       	movw	r12, r22
    138e:	7c 01       	movw	r14, r24
    1390:	12 60       	ori	r17, 0x02	; 2
    1392:	aa 94       	dec	r10
    1394:	59 f0       	breq	.+22     	; 0x13ac <conv_int+0xe8>
    1396:	ce 01       	movw	r24, r28
    1398:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    139c:	97 ff       	sbrs	r25, 7
    139e:	dd cf       	rjmp	.-70     	; 0x135a <conv_int+0x96>
    13a0:	11 fd       	sbrc	r17, 1
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <conv_int+0xe8>
    13a4:	ab cf       	rjmp	.-170    	; 0x12fc <conv_int+0x38>
    13a6:	c1 2c       	mov	r12, r1
    13a8:	d1 2c       	mov	r13, r1
    13aa:	76 01       	movw	r14, r12
    13ac:	17 ff       	sbrs	r17, 7
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <conv_int+0xfc>
    13b0:	f0 94       	com	r15
    13b2:	e0 94       	com	r14
    13b4:	d0 94       	com	r13
    13b6:	c0 94       	com	r12
    13b8:	c1 1c       	adc	r12, r1
    13ba:	d1 1c       	adc	r13, r1
    13bc:	e1 1c       	adc	r14, r1
    13be:	f1 1c       	adc	r15, r1
    13c0:	21 2f       	mov	r18, r17
    13c2:	b7 01       	movw	r22, r14
    13c4:	a6 01       	movw	r20, r12
    13c6:	c4 01       	movw	r24, r8
    13c8:	0e 94 1d 09 	call	0x123a	; 0x123a <putval>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	08 95       	ret

000013e6 <conv_brk>:
    13e6:	a1 e2       	ldi	r26, 0x21	; 33
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0xa>
    13f2:	5c 01       	movw	r10, r24
    13f4:	7a 01       	movw	r14, r20
    13f6:	8e 01       	movw	r16, r28
    13f8:	0f 5f       	subi	r16, 0xFF	; 255
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	68 01       	movw	r12, r16
    13fe:	80 e2       	ldi	r24, 0x20	; 32
    1400:	d8 01       	movw	r26, r16
    1402:	1d 92       	st	X+, r1
    1404:	8a 95       	dec	r24
    1406:	e9 f7       	brne	.-6      	; 0x1402 <conv_brk+0x1c>
    1408:	f5 01       	movw	r30, r10
    140a:	73 80       	ldd	r7, Z+3	; 0x03
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	81 2c       	mov	r8, r1
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	91 2c       	mov	r9, r1
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	f9 01       	movw	r30, r18
    141c:	73 fc       	sbrc	r7, 3
    141e:	a5 91       	lpm	r26, Z+
    1420:	73 fe       	sbrs	r7, 3
    1422:	a1 91       	ld	r26, Z+
    1424:	8f 01       	movw	r16, r30
    1426:	7a 2f       	mov	r23, r26
    1428:	9f 01       	movw	r18, r30
    142a:	a1 11       	cpse	r26, r1
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <conv_brk+0x4e>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	7d c0       	rjmp	.+250    	; 0x152e <conv_brk+0x148>
    1434:	ae 35       	cpi	r26, 0x5E	; 94
    1436:	19 f4       	brne	.+6      	; 0x143e <conv_brk+0x58>
    1438:	41 15       	cp	r20, r1
    143a:	51 05       	cpc	r21, r1
    143c:	59 f1       	breq	.+86     	; 0x1494 <conv_brk+0xae>
    143e:	e9 2d       	mov	r30, r9
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	e4 17       	cp	r30, r20
    1444:	f5 07       	cpc	r31, r21
    1446:	3c f4       	brge	.+14     	; 0x1456 <conv_brk+0x70>
    1448:	ad 35       	cpi	r26, 0x5D	; 93
    144a:	69 f1       	breq	.+90     	; 0x14a6 <conv_brk+0xc0>
    144c:	ad 32       	cpi	r26, 0x2D	; 45
    144e:	19 f4       	brne	.+6      	; 0x1456 <conv_brk+0x70>
    1450:	bb 23       	and	r27, r27
    1452:	19 f1       	breq	.+70     	; 0x149a <conv_brk+0xb4>
    1454:	03 c0       	rjmp	.+6      	; 0x145c <conv_brk+0x76>
    1456:	b1 11       	cpse	r27, r1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <conv_brk+0x76>
    145a:	8a 2e       	mov	r8, r26
    145c:	e7 2f       	mov	r30, r23
    145e:	e6 95       	lsr	r30
    1460:	e6 95       	lsr	r30
    1462:	e6 95       	lsr	r30
    1464:	86 01       	movw	r16, r12
    1466:	0e 0f       	add	r16, r30
    1468:	11 1d       	adc	r17, r1
    146a:	f8 01       	movw	r30, r16
    146c:	a7 2f       	mov	r26, r23
    146e:	a7 70       	andi	r26, 0x07	; 7
    1470:	8c 01       	movw	r16, r24
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <conv_brk+0x92>
    1474:	00 0f       	add	r16, r16
    1476:	11 1f       	adc	r17, r17
    1478:	aa 95       	dec	r26
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <conv_brk+0x8e>
    147c:	d8 01       	movw	r26, r16
    147e:	b0 81       	ld	r27, Z
    1480:	ba 2b       	or	r27, r26
    1482:	b0 83       	st	Z, r27
    1484:	78 15       	cp	r23, r8
    1486:	59 f0       	breq	.+22     	; 0x149e <conv_brk+0xb8>
    1488:	78 15       	cp	r23, r8
    148a:	10 f4       	brcc	.+4      	; 0x1490 <conv_brk+0xaa>
    148c:	7f 5f       	subi	r23, 0xFF	; 255
    148e:	e6 cf       	rjmp	.-52     	; 0x145c <conv_brk+0x76>
    1490:	71 50       	subi	r23, 0x01	; 1
    1492:	e4 cf       	rjmp	.-56     	; 0x145c <conv_brk+0x76>
    1494:	99 24       	eor	r9, r9
    1496:	93 94       	inc	r9
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <conv_brk+0xba>
    149a:	b1 e0       	ldi	r27, 0x01	; 1
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <conv_brk+0xba>
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	4f 5f       	subi	r20, 0xFF	; 255
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	ba cf       	rjmp	.-140    	; 0x141a <conv_brk+0x34>
    14a6:	bb 23       	and	r27, r27
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <conv_brk+0xca>
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	80 62       	ori	r24, 0x20	; 32
    14ae:	8e 83       	std	Y+6, r24	; 0x06
    14b0:	91 10       	cpse	r9, r1
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <conv_brk+0xd4>
    14b4:	99 24       	eor	r9, r9
    14b6:	93 94       	inc	r9
    14b8:	15 c0       	rjmp	.+42     	; 0x14e4 <conv_brk+0xfe>
    14ba:	f6 01       	movw	r30, r12
    14bc:	ce 01       	movw	r24, r28
    14be:	81 96       	adiw	r24, 0x21	; 33
    14c0:	20 81       	ld	r18, Z
    14c2:	20 95       	com	r18
    14c4:	21 93       	st	Z+, r18
    14c6:	e8 17       	cp	r30, r24
    14c8:	f9 07       	cpc	r31, r25
    14ca:	d1 f7       	brne	.-12     	; 0x14c0 <conv_brk+0xda>
    14cc:	f3 cf       	rjmp	.-26     	; 0x14b4 <conv_brk+0xce>
    14ce:	e1 14       	cp	r14, r1
    14d0:	f1 04       	cpc	r15, r1
    14d2:	29 f0       	breq	.+10     	; 0x14de <conv_brk+0xf8>
    14d4:	d7 01       	movw	r26, r14
    14d6:	8c 93       	st	X, r24
    14d8:	f7 01       	movw	r30, r14
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	7f 01       	movw	r14, r30
    14de:	61 50       	subi	r22, 0x01	; 1
    14e0:	01 f1       	breq	.+64     	; 0x1522 <conv_brk+0x13c>
    14e2:	91 2c       	mov	r9, r1
    14e4:	c5 01       	movw	r24, r10
    14e6:	69 a3       	std	Y+33, r22	; 0x21
    14e8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    14ec:	69 a1       	ldd	r22, Y+33	; 0x21
    14ee:	97 fd       	sbrc	r25, 7
    14f0:	16 c0       	rjmp	.+44     	; 0x151e <conv_brk+0x138>
    14f2:	28 2f       	mov	r18, r24
    14f4:	26 95       	lsr	r18
    14f6:	26 95       	lsr	r18
    14f8:	26 95       	lsr	r18
    14fa:	f6 01       	movw	r30, r12
    14fc:	e2 0f       	add	r30, r18
    14fe:	f1 1d       	adc	r31, r1
    1500:	20 81       	ld	r18, Z
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	ac 01       	movw	r20, r24
    1506:	47 70       	andi	r20, 0x07	; 7
    1508:	55 27       	eor	r21, r21
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <conv_brk+0x12a>
    150c:	35 95       	asr	r19
    150e:	27 95       	ror	r18
    1510:	4a 95       	dec	r20
    1512:	e2 f7       	brpl	.-8      	; 0x150c <conv_brk+0x126>
    1514:	20 fd       	sbrc	r18, 0
    1516:	db cf       	rjmp	.-74     	; 0x14ce <conv_brk+0xe8>
    1518:	b5 01       	movw	r22, r10
    151a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <ungetc>
    151e:	91 10       	cpse	r9, r1
    1520:	86 cf       	rjmp	.-244    	; 0x142e <conv_brk+0x48>
    1522:	e1 14       	cp	r14, r1
    1524:	f1 04       	cpc	r15, r1
    1526:	11 f0       	breq	.+4      	; 0x152c <conv_brk+0x146>
    1528:	d7 01       	movw	r26, r14
    152a:	1c 92       	st	X, r1
    152c:	c8 01       	movw	r24, r16
    152e:	a1 96       	adiw	r28, 0x21	; 33
    1530:	ed e0       	ldi	r30, 0x0D	; 13
    1532:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0xa>

00001536 <vfscanf>:
    1536:	4f 92       	push	r4
    1538:	5f 92       	push	r5
    153a:	7f 92       	push	r7
    153c:	8f 92       	push	r8
    153e:	9f 92       	push	r9
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	1f 92       	push	r1
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	8c 01       	movw	r16, r24
    155c:	2b 01       	movw	r4, r22
    155e:	7a 01       	movw	r14, r20
    1560:	fc 01       	movw	r30, r24
    1562:	17 82       	std	Z+7, r1	; 0x07
    1564:	16 82       	std	Z+6, r1	; 0x06
    1566:	a1 2c       	mov	r10, r1
    1568:	f8 01       	movw	r30, r16
    156a:	d3 80       	ldd	r13, Z+3	; 0x03
    156c:	f2 01       	movw	r30, r4
    156e:	d3 fc       	sbrc	r13, 3
    1570:	85 91       	lpm	r24, Z+
    1572:	d3 fe       	sbrs	r13, 3
    1574:	81 91       	ld	r24, Z+
    1576:	38 2f       	mov	r19, r24
    1578:	2f 01       	movw	r4, r30
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <vfscanf+0x4a>
    157e:	fc c0       	rjmp	.+504    	; 0x1778 <vfscanf+0x242>
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	39 83       	std	Y+1, r19	; 0x01
    1584:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <isspace>
    1588:	39 81       	ldd	r19, Y+1	; 0x01
    158a:	89 2b       	or	r24, r25
    158c:	21 f0       	breq	.+8      	; 0x1596 <vfscanf+0x60>
    158e:	c8 01       	movw	r24, r16
    1590:	0e 94 49 09 	call	0x1292	; 0x1292 <skip_spaces>
    1594:	e9 cf       	rjmp	.-46     	; 0x1568 <vfscanf+0x32>
    1596:	35 32       	cpi	r19, 0x25	; 37
    1598:	41 f4       	brne	.+16     	; 0x15aa <vfscanf+0x74>
    159a:	f2 01       	movw	r30, r4
    159c:	d3 fc       	sbrc	r13, 3
    159e:	35 91       	lpm	r19, Z+
    15a0:	d3 fe       	sbrs	r13, 3
    15a2:	31 91       	ld	r19, Z+
    15a4:	2f 01       	movw	r4, r30
    15a6:	35 32       	cpi	r19, 0x25	; 37
    15a8:	69 f4       	brne	.+26     	; 0x15c4 <vfscanf+0x8e>
    15aa:	c8 01       	movw	r24, r16
    15ac:	39 83       	std	Y+1, r19	; 0x01
    15ae:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    15b2:	39 81       	ldd	r19, Y+1	; 0x01
    15b4:	97 fd       	sbrc	r25, 7
    15b6:	de c0       	rjmp	.+444    	; 0x1774 <vfscanf+0x23e>
    15b8:	38 17       	cp	r19, r24
    15ba:	b1 f2       	breq	.-84     	; 0x1568 <vfscanf+0x32>
    15bc:	b8 01       	movw	r22, r16
    15be:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <ungetc>
    15c2:	da c0       	rjmp	.+436    	; 0x1778 <vfscanf+0x242>
    15c4:	3a 32       	cpi	r19, 0x2A	; 42
    15c6:	41 f4       	brne	.+16     	; 0x15d8 <vfscanf+0xa2>
    15c8:	d3 fc       	sbrc	r13, 3
    15ca:	35 91       	lpm	r19, Z+
    15cc:	d3 fe       	sbrs	r13, 3
    15ce:	31 91       	ld	r19, Z+
    15d0:	2f 01       	movw	r4, r30
    15d2:	bb 24       	eor	r11, r11
    15d4:	b3 94       	inc	r11
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <vfscanf+0xa4>
    15d8:	b1 2c       	mov	r11, r1
    15da:	71 2c       	mov	r7, r1
    15dc:	20 ed       	ldi	r18, 0xD0	; 208
    15de:	23 0f       	add	r18, r19
    15e0:	2a 30       	cpi	r18, 0x0A	; 10
    15e2:	90 f4       	brcc	.+36     	; 0x1608 <vfscanf+0xd2>
    15e4:	fb 2d       	mov	r31, r11
    15e6:	f2 60       	ori	r31, 0x02	; 2
    15e8:	bf 2e       	mov	r11, r31
    15ea:	67 2d       	mov	r22, r7
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	0e 94 29 09 	call	0x1252	; 0x1252 <mulacc>
    15f8:	76 2e       	mov	r7, r22
    15fa:	f2 01       	movw	r30, r4
    15fc:	d3 fc       	sbrc	r13, 3
    15fe:	35 91       	lpm	r19, Z+
    1600:	d3 fe       	sbrs	r13, 3
    1602:	31 91       	ld	r19, Z+
    1604:	2f 01       	movw	r4, r30
    1606:	ea cf       	rjmp	.-44     	; 0x15dc <vfscanf+0xa6>
    1608:	b1 fe       	sbrs	r11, 1
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <vfscanf+0xdc>
    160c:	71 10       	cpse	r7, r1
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <vfscanf+0xe0>
    1610:	b3 c0       	rjmp	.+358    	; 0x1778 <vfscanf+0x242>
    1612:	77 24       	eor	r7, r7
    1614:	7a 94       	dec	r7
    1616:	38 36       	cpi	r19, 0x68	; 104
    1618:	19 f0       	breq	.+6      	; 0x1620 <vfscanf+0xea>
    161a:	3c 36       	cpi	r19, 0x6C	; 108
    161c:	61 f0       	breq	.+24     	; 0x1636 <vfscanf+0x100>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <vfscanf+0x112>
    1620:	f2 01       	movw	r30, r4
    1622:	d3 fc       	sbrc	r13, 3
    1624:	35 91       	lpm	r19, Z+
    1626:	d3 fe       	sbrs	r13, 3
    1628:	31 91       	ld	r19, Z+
    162a:	2f 01       	movw	r4, r30
    162c:	38 36       	cpi	r19, 0x68	; 104
    162e:	61 f4       	brne	.+24     	; 0x1648 <vfscanf+0x112>
    1630:	fb 2d       	mov	r31, r11
    1632:	f8 60       	ori	r31, 0x08	; 8
    1634:	bf 2e       	mov	r11, r31
    1636:	8b 2d       	mov	r24, r11
    1638:	84 60       	ori	r24, 0x04	; 4
    163a:	b8 2e       	mov	r11, r24
    163c:	f2 01       	movw	r30, r4
    163e:	d3 fc       	sbrc	r13, 3
    1640:	35 91       	lpm	r19, Z+
    1642:	d3 fe       	sbrs	r13, 3
    1644:	31 91       	ld	r19, Z+
    1646:	2f 01       	movw	r4, r30
    1648:	33 23       	and	r19, r19
    164a:	09 f4       	brne	.+2      	; 0x164e <vfscanf+0x118>
    164c:	95 c0       	rjmp	.+298    	; 0x1778 <vfscanf+0x242>
    164e:	63 2f       	mov	r22, r19
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	8a e7       	ldi	r24, 0x7A	; 122
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	39 83       	std	Y+1, r19	; 0x01
    1658:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <strchr_P>
    165c:	39 81       	ldd	r19, Y+1	; 0x01
    165e:	89 2b       	or	r24, r25
    1660:	09 f4       	brne	.+2      	; 0x1664 <vfscanf+0x12e>
    1662:	8a c0       	rjmp	.+276    	; 0x1778 <vfscanf+0x242>
    1664:	b0 fc       	sbrc	r11, 0
    1666:	07 c0       	rjmp	.+14     	; 0x1676 <vfscanf+0x140>
    1668:	f7 01       	movw	r30, r14
    166a:	c0 80       	ld	r12, Z
    166c:	d1 80       	ldd	r13, Z+1	; 0x01
    166e:	c7 01       	movw	r24, r14
    1670:	02 96       	adiw	r24, 0x02	; 2
    1672:	7c 01       	movw	r14, r24
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfscanf+0x144>
    1676:	c1 2c       	mov	r12, r1
    1678:	d1 2c       	mov	r13, r1
    167a:	3e 36       	cpi	r19, 0x6E	; 110
    167c:	51 f4       	brne	.+20     	; 0x1692 <vfscanf+0x15c>
    167e:	f8 01       	movw	r30, r16
    1680:	46 81       	ldd	r20, Z+6	; 0x06
    1682:	57 81       	ldd	r21, Z+7	; 0x07
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	2b 2d       	mov	r18, r11
    168a:	c6 01       	movw	r24, r12
    168c:	0e 94 1d 09 	call	0x123a	; 0x123a <putval>
    1690:	6b cf       	rjmp	.-298    	; 0x1568 <vfscanf+0x32>
    1692:	33 36       	cpi	r19, 0x63	; 99
    1694:	a1 f4       	brne	.+40     	; 0x16be <vfscanf+0x188>
    1696:	b1 fc       	sbrc	r11, 1
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfscanf+0x168>
    169a:	77 24       	eor	r7, r7
    169c:	73 94       	inc	r7
    169e:	c8 01       	movw	r24, r16
    16a0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    16a4:	97 fd       	sbrc	r25, 7
    16a6:	66 c0       	rjmp	.+204    	; 0x1774 <vfscanf+0x23e>
    16a8:	c1 14       	cp	r12, r1
    16aa:	d1 04       	cpc	r13, r1
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <vfscanf+0x182>
    16ae:	f6 01       	movw	r30, r12
    16b0:	80 83       	st	Z, r24
    16b2:	c6 01       	movw	r24, r12
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	6c 01       	movw	r12, r24
    16b8:	7a 94       	dec	r7
    16ba:	89 f7       	brne	.-30     	; 0x169e <vfscanf+0x168>
    16bc:	57 c0       	rjmp	.+174    	; 0x176c <vfscanf+0x236>
    16be:	3b 35       	cpi	r19, 0x5B	; 91
    16c0:	59 f4       	brne	.+22     	; 0x16d8 <vfscanf+0x1a2>
    16c2:	92 01       	movw	r18, r4
    16c4:	a6 01       	movw	r20, r12
    16c6:	67 2d       	mov	r22, r7
    16c8:	c8 01       	movw	r24, r16
    16ca:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <conv_brk>
    16ce:	2c 01       	movw	r4, r24
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <vfscanf+0x1a0>
    16d4:	4b c0       	rjmp	.+150    	; 0x176c <vfscanf+0x236>
    16d6:	45 c0       	rjmp	.+138    	; 0x1762 <vfscanf+0x22c>
    16d8:	c8 01       	movw	r24, r16
    16da:	39 83       	std	Y+1, r19	; 0x01
    16dc:	0e 94 49 09 	call	0x1292	; 0x1292 <skip_spaces>
    16e0:	39 81       	ldd	r19, Y+1	; 0x01
    16e2:	97 fd       	sbrc	r25, 7
    16e4:	47 c0       	rjmp	.+142    	; 0x1774 <vfscanf+0x23e>
    16e6:	3f 36       	cpi	r19, 0x6F	; 111
    16e8:	69 f1       	breq	.+90     	; 0x1744 <vfscanf+0x20e>
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <vfscanf+0x1c0>
    16ec:	34 36       	cpi	r19, 0x64	; 100
    16ee:	31 f1       	breq	.+76     	; 0x173c <vfscanf+0x206>
    16f0:	39 36       	cpi	r19, 0x69	; 105
    16f2:	79 f1       	breq	.+94     	; 0x1752 <vfscanf+0x21c>
    16f4:	2b c0       	rjmp	.+86     	; 0x174c <vfscanf+0x216>
    16f6:	33 37       	cpi	r19, 0x73	; 115
    16f8:	69 f0       	breq	.+26     	; 0x1714 <vfscanf+0x1de>
    16fa:	35 37       	cpi	r19, 0x75	; 117
    16fc:	f9 f0       	breq	.+62     	; 0x173c <vfscanf+0x206>
    16fe:	26 c0       	rjmp	.+76     	; 0x174c <vfscanf+0x216>
    1700:	c1 14       	cp	r12, r1
    1702:	d1 04       	cpc	r13, r1
    1704:	29 f0       	breq	.+10     	; 0x1710 <vfscanf+0x1da>
    1706:	f6 01       	movw	r30, r12
    1708:	80 82       	st	Z, r8
    170a:	c6 01       	movw	r24, r12
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	6c 01       	movw	r12, r24
    1710:	7a 94       	dec	r7
    1712:	71 f0       	breq	.+28     	; 0x1730 <vfscanf+0x1fa>
    1714:	c8 01       	movw	r24, r16
    1716:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <fgetc>
    171a:	4c 01       	movw	r8, r24
    171c:	97 fd       	sbrc	r25, 7
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <vfscanf+0x1fa>
    1720:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <isspace>
    1724:	89 2b       	or	r24, r25
    1726:	61 f3       	breq	.-40     	; 0x1700 <vfscanf+0x1ca>
    1728:	b8 01       	movw	r22, r16
    172a:	c4 01       	movw	r24, r8
    172c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <ungetc>
    1730:	c1 14       	cp	r12, r1
    1732:	d1 04       	cpc	r13, r1
    1734:	d9 f0       	breq	.+54     	; 0x176c <vfscanf+0x236>
    1736:	f6 01       	movw	r30, r12
    1738:	10 82       	st	Z, r1
    173a:	18 c0       	rjmp	.+48     	; 0x176c <vfscanf+0x236>
    173c:	fb 2d       	mov	r31, r11
    173e:	f0 62       	ori	r31, 0x20	; 32
    1740:	bf 2e       	mov	r11, r31
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <vfscanf+0x21c>
    1744:	8b 2d       	mov	r24, r11
    1746:	80 61       	ori	r24, 0x10	; 16
    1748:	b8 2e       	mov	r11, r24
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <vfscanf+0x21c>
    174c:	9b 2d       	mov	r25, r11
    174e:	90 64       	ori	r25, 0x40	; 64
    1750:	b9 2e       	mov	r11, r25
    1752:	2b 2d       	mov	r18, r11
    1754:	a6 01       	movw	r20, r12
    1756:	67 2d       	mov	r22, r7
    1758:	c8 01       	movw	r24, r16
    175a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <conv_int>
    175e:	81 11       	cpse	r24, r1
    1760:	05 c0       	rjmp	.+10     	; 0x176c <vfscanf+0x236>
    1762:	f8 01       	movw	r30, r16
    1764:	83 81       	ldd	r24, Z+3	; 0x03
    1766:	80 73       	andi	r24, 0x30	; 48
    1768:	29 f4       	brne	.+10     	; 0x1774 <vfscanf+0x23e>
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfscanf+0x242>
    176c:	b0 fc       	sbrc	r11, 0
    176e:	fc ce       	rjmp	.-520    	; 0x1568 <vfscanf+0x32>
    1770:	a3 94       	inc	r10
    1772:	fa ce       	rjmp	.-524    	; 0x1568 <vfscanf+0x32>
    1774:	aa 20       	and	r10, r10
    1776:	19 f0       	breq	.+6      	; 0x177e <vfscanf+0x248>
    1778:	8a 2d       	mov	r24, r10
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <vfscanf+0x24c>
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	9f ef       	ldi	r25, 0xFF	; 255
    1782:	0f 90       	pop	r0
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	7f 90       	pop	r7
    179e:	5f 90       	pop	r5
    17a0:	4f 90       	pop	r4
    17a2:	08 95       	ret

000017a4 <calloc>:
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	86 9f       	mul	r24, r22
    17ae:	80 01       	movw	r16, r0
    17b0:	87 9f       	mul	r24, r23
    17b2:	10 0d       	add	r17, r0
    17b4:	96 9f       	mul	r25, r22
    17b6:	10 0d       	add	r17, r0
    17b8:	11 24       	eor	r1, r1
    17ba:	c8 01       	movw	r24, r16
    17bc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <malloc>
    17c0:	ec 01       	movw	r28, r24
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <calloc+0x2c>
    17c6:	a8 01       	movw	r20, r16
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <memset>
    17d0:	ce 01       	movw	r24, r28
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <malloc>:
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	10 f4       	brcc	.+4      	; 0x17ea <malloc+0xe>
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	e0 91 90 02 	lds	r30, 0x0290
    17ee:	f0 91 91 02 	lds	r31, 0x0291
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	30 97       	sbiw	r30, 0x00	; 0
    17fc:	39 f1       	breq	.+78     	; 0x184c <malloc+0x70>
    17fe:	40 81       	ld	r20, Z
    1800:	51 81       	ldd	r21, Z+1	; 0x01
    1802:	48 17       	cp	r20, r24
    1804:	59 07       	cpc	r21, r25
    1806:	b8 f0       	brcs	.+46     	; 0x1836 <malloc+0x5a>
    1808:	48 17       	cp	r20, r24
    180a:	59 07       	cpc	r21, r25
    180c:	71 f4       	brne	.+28     	; 0x182a <malloc+0x4e>
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	10 97       	sbiw	r26, 0x00	; 0
    1814:	29 f0       	breq	.+10     	; 0x1820 <malloc+0x44>
    1816:	13 96       	adiw	r26, 0x03	; 3
    1818:	9c 93       	st	X, r25
    181a:	8e 93       	st	-X, r24
    181c:	12 97       	sbiw	r26, 0x02	; 2
    181e:	2c c0       	rjmp	.+88     	; 0x1878 <malloc+0x9c>
    1820:	90 93 91 02 	sts	0x0291, r25
    1824:	80 93 90 02 	sts	0x0290, r24
    1828:	27 c0       	rjmp	.+78     	; 0x1878 <malloc+0x9c>
    182a:	21 15       	cp	r18, r1
    182c:	31 05       	cpc	r19, r1
    182e:	31 f0       	breq	.+12     	; 0x183c <malloc+0x60>
    1830:	42 17       	cp	r20, r18
    1832:	53 07       	cpc	r21, r19
    1834:	18 f0       	brcs	.+6      	; 0x183c <malloc+0x60>
    1836:	a9 01       	movw	r20, r18
    1838:	db 01       	movw	r26, r22
    183a:	01 c0       	rjmp	.+2      	; 0x183e <malloc+0x62>
    183c:	ef 01       	movw	r28, r30
    183e:	9a 01       	movw	r18, r20
    1840:	bd 01       	movw	r22, r26
    1842:	df 01       	movw	r26, r30
    1844:	02 80       	ldd	r0, Z+2	; 0x02
    1846:	f3 81       	ldd	r31, Z+3	; 0x03
    1848:	e0 2d       	mov	r30, r0
    184a:	d7 cf       	rjmp	.-82     	; 0x17fa <malloc+0x1e>
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	f9 f0       	breq	.+62     	; 0x1890 <malloc+0xb4>
    1852:	28 1b       	sub	r18, r24
    1854:	39 0b       	sbc	r19, r25
    1856:	24 30       	cpi	r18, 0x04	; 4
    1858:	31 05       	cpc	r19, r1
    185a:	80 f4       	brcc	.+32     	; 0x187c <malloc+0xa0>
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	61 15       	cp	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	21 f0       	breq	.+8      	; 0x186e <malloc+0x92>
    1866:	fb 01       	movw	r30, r22
    1868:	93 83       	std	Z+3, r25	; 0x03
    186a:	82 83       	std	Z+2, r24	; 0x02
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <malloc+0x9a>
    186e:	90 93 91 02 	sts	0x0291, r25
    1872:	80 93 90 02 	sts	0x0290, r24
    1876:	fe 01       	movw	r30, r28
    1878:	32 96       	adiw	r30, 0x02	; 2
    187a:	44 c0       	rjmp	.+136    	; 0x1904 <malloc+0x128>
    187c:	fe 01       	movw	r30, r28
    187e:	e2 0f       	add	r30, r18
    1880:	f3 1f       	adc	r31, r19
    1882:	81 93       	st	Z+, r24
    1884:	91 93       	st	Z+, r25
    1886:	22 50       	subi	r18, 0x02	; 2
    1888:	31 09       	sbc	r19, r1
    188a:	39 83       	std	Y+1, r19	; 0x01
    188c:	28 83       	st	Y, r18
    188e:	3a c0       	rjmp	.+116    	; 0x1904 <malloc+0x128>
    1890:	20 91 8e 02 	lds	r18, 0x028E
    1894:	30 91 8f 02 	lds	r19, 0x028F
    1898:	23 2b       	or	r18, r19
    189a:	41 f4       	brne	.+16     	; 0x18ac <malloc+0xd0>
    189c:	20 91 02 01 	lds	r18, 0x0102
    18a0:	30 91 03 01 	lds	r19, 0x0103
    18a4:	30 93 8f 02 	sts	0x028F, r19
    18a8:	20 93 8e 02 	sts	0x028E, r18
    18ac:	20 91 00 01 	lds	r18, 0x0100
    18b0:	30 91 01 01 	lds	r19, 0x0101
    18b4:	21 15       	cp	r18, r1
    18b6:	31 05       	cpc	r19, r1
    18b8:	41 f4       	brne	.+16     	; 0x18ca <malloc+0xee>
    18ba:	2d b7       	in	r18, 0x3d	; 61
    18bc:	3e b7       	in	r19, 0x3e	; 62
    18be:	40 91 04 01 	lds	r20, 0x0104
    18c2:	50 91 05 01 	lds	r21, 0x0105
    18c6:	24 1b       	sub	r18, r20
    18c8:	35 0b       	sbc	r19, r21
    18ca:	e0 91 8e 02 	lds	r30, 0x028E
    18ce:	f0 91 8f 02 	lds	r31, 0x028F
    18d2:	e2 17       	cp	r30, r18
    18d4:	f3 07       	cpc	r31, r19
    18d6:	a0 f4       	brcc	.+40     	; 0x1900 <malloc+0x124>
    18d8:	2e 1b       	sub	r18, r30
    18da:	3f 0b       	sbc	r19, r31
    18dc:	28 17       	cp	r18, r24
    18de:	39 07       	cpc	r19, r25
    18e0:	78 f0       	brcs	.+30     	; 0x1900 <malloc+0x124>
    18e2:	ac 01       	movw	r20, r24
    18e4:	4e 5f       	subi	r20, 0xFE	; 254
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	24 17       	cp	r18, r20
    18ea:	35 07       	cpc	r19, r21
    18ec:	48 f0       	brcs	.+18     	; 0x1900 <malloc+0x124>
    18ee:	4e 0f       	add	r20, r30
    18f0:	5f 1f       	adc	r21, r31
    18f2:	50 93 8f 02 	sts	0x028F, r21
    18f6:	40 93 8e 02 	sts	0x028E, r20
    18fa:	81 93       	st	Z+, r24
    18fc:	91 93       	st	Z+, r25
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <malloc+0x128>
    1900:	e0 e0       	ldi	r30, 0x00	; 0
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	cf 01       	movw	r24, r30
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <free>:
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	09 f4       	brne	.+2      	; 0x1916 <free+0xa>
    1914:	87 c0       	rjmp	.+270    	; 0x1a24 <free+0x118>
    1916:	fc 01       	movw	r30, r24
    1918:	32 97       	sbiw	r30, 0x02	; 2
    191a:	13 82       	std	Z+3, r1	; 0x03
    191c:	12 82       	std	Z+2, r1	; 0x02
    191e:	c0 91 90 02 	lds	r28, 0x0290
    1922:	d0 91 91 02 	lds	r29, 0x0291
    1926:	20 97       	sbiw	r28, 0x00	; 0
    1928:	81 f4       	brne	.+32     	; 0x194a <free+0x3e>
    192a:	20 81       	ld	r18, Z
    192c:	31 81       	ldd	r19, Z+1	; 0x01
    192e:	28 0f       	add	r18, r24
    1930:	39 1f       	adc	r19, r25
    1932:	80 91 8e 02 	lds	r24, 0x028E
    1936:	90 91 8f 02 	lds	r25, 0x028F
    193a:	82 17       	cp	r24, r18
    193c:	93 07       	cpc	r25, r19
    193e:	79 f5       	brne	.+94     	; 0x199e <free+0x92>
    1940:	f0 93 8f 02 	sts	0x028F, r31
    1944:	e0 93 8e 02 	sts	0x028E, r30
    1948:	6d c0       	rjmp	.+218    	; 0x1a24 <free+0x118>
    194a:	de 01       	movw	r26, r28
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	ae 17       	cp	r26, r30
    1952:	bf 07       	cpc	r27, r31
    1954:	50 f4       	brcc	.+20     	; 0x196a <free+0x5e>
    1956:	12 96       	adiw	r26, 0x02	; 2
    1958:	4d 91       	ld	r20, X+
    195a:	5c 91       	ld	r21, X
    195c:	13 97       	sbiw	r26, 0x03	; 3
    195e:	9d 01       	movw	r18, r26
    1960:	41 15       	cp	r20, r1
    1962:	51 05       	cpc	r21, r1
    1964:	09 f1       	breq	.+66     	; 0x19a8 <free+0x9c>
    1966:	da 01       	movw	r26, r20
    1968:	f3 cf       	rjmp	.-26     	; 0x1950 <free+0x44>
    196a:	b3 83       	std	Z+3, r27	; 0x03
    196c:	a2 83       	std	Z+2, r26	; 0x02
    196e:	40 81       	ld	r20, Z
    1970:	51 81       	ldd	r21, Z+1	; 0x01
    1972:	84 0f       	add	r24, r20
    1974:	95 1f       	adc	r25, r21
    1976:	8a 17       	cp	r24, r26
    1978:	9b 07       	cpc	r25, r27
    197a:	71 f4       	brne	.+28     	; 0x1998 <free+0x8c>
    197c:	8d 91       	ld	r24, X+
    197e:	9c 91       	ld	r25, X
    1980:	11 97       	sbiw	r26, 0x01	; 1
    1982:	84 0f       	add	r24, r20
    1984:	95 1f       	adc	r25, r21
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	12 96       	adiw	r26, 0x02	; 2
    198e:	8d 91       	ld	r24, X+
    1990:	9c 91       	ld	r25, X
    1992:	13 97       	sbiw	r26, 0x03	; 3
    1994:	93 83       	std	Z+3, r25	; 0x03
    1996:	82 83       	std	Z+2, r24	; 0x02
    1998:	21 15       	cp	r18, r1
    199a:	31 05       	cpc	r19, r1
    199c:	29 f4       	brne	.+10     	; 0x19a8 <free+0x9c>
    199e:	f0 93 91 02 	sts	0x0291, r31
    19a2:	e0 93 90 02 	sts	0x0290, r30
    19a6:	3e c0       	rjmp	.+124    	; 0x1a24 <free+0x118>
    19a8:	d9 01       	movw	r26, r18
    19aa:	13 96       	adiw	r26, 0x03	; 3
    19ac:	fc 93       	st	X, r31
    19ae:	ee 93       	st	-X, r30
    19b0:	12 97       	sbiw	r26, 0x02	; 2
    19b2:	4d 91       	ld	r20, X+
    19b4:	5d 91       	ld	r21, X+
    19b6:	a4 0f       	add	r26, r20
    19b8:	b5 1f       	adc	r27, r21
    19ba:	ea 17       	cp	r30, r26
    19bc:	fb 07       	cpc	r31, r27
    19be:	79 f4       	brne	.+30     	; 0x19de <free+0xd2>
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	84 0f       	add	r24, r20
    19c6:	95 1f       	adc	r25, r21
    19c8:	02 96       	adiw	r24, 0x02	; 2
    19ca:	d9 01       	movw	r26, r18
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	9c 93       	st	X, r25
    19d0:	8e 93       	st	-X, r24
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	13 96       	adiw	r26, 0x03	; 3
    19d8:	9c 93       	st	X, r25
    19da:	8e 93       	st	-X, r24
    19dc:	12 97       	sbiw	r26, 0x02	; 2
    19de:	e0 e0       	ldi	r30, 0x00	; 0
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <free+0xe4>
    19ea:	fe 01       	movw	r30, r28
    19ec:	ec 01       	movw	r28, r24
    19ee:	f9 cf       	rjmp	.-14     	; 0x19e2 <free+0xd6>
    19f0:	ce 01       	movw	r24, r28
    19f2:	02 96       	adiw	r24, 0x02	; 2
    19f4:	28 81       	ld	r18, Y
    19f6:	39 81       	ldd	r19, Y+1	; 0x01
    19f8:	82 0f       	add	r24, r18
    19fa:	93 1f       	adc	r25, r19
    19fc:	20 91 8e 02 	lds	r18, 0x028E
    1a00:	30 91 8f 02 	lds	r19, 0x028F
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	69 f4       	brne	.+26     	; 0x1a24 <free+0x118>
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <free+0x10c>
    1a0e:	10 92 91 02 	sts	0x0291, r1
    1a12:	10 92 90 02 	sts	0x0290, r1
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <free+0x110>
    1a18:	13 82       	std	Z+3, r1	; 0x03
    1a1a:	12 82       	std	Z+2, r1	; 0x02
    1a1c:	d0 93 8f 02 	sts	0x028F, r29
    1a20:	c0 93 8e 02 	sts	0x028E, r28
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <isspace>:
    1a2a:	91 11       	cpse	r25, r1
    1a2c:	15 c1       	rjmp	.+554    	; 0x1c58 <__ctype_isfalse>
    1a2e:	80 32       	cpi	r24, 0x20	; 32
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <isspace+0xe>
    1a32:	89 50       	subi	r24, 0x09	; 9
    1a34:	85 50       	subi	r24, 0x05	; 5
    1a36:	d0 f7       	brcc	.-12     	; 0x1a2c <isspace+0x2>
    1a38:	08 95       	ret

00001a3a <strchr_P>:
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	05 90       	lpm	r0, Z+
    1a3e:	06 16       	cp	r0, r22
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <strchr_P+0x10>
    1a42:	00 20       	and	r0, r0
    1a44:	d9 f7       	brne	.-10     	; 0x1a3c <strchr_P+0x2>
    1a46:	c0 01       	movw	r24, r0
    1a48:	08 95       	ret
    1a4a:	31 97       	sbiw	r30, 0x01	; 1
    1a4c:	cf 01       	movw	r24, r30
    1a4e:	08 95       	ret

00001a50 <strnlen_P>:
    1a50:	fc 01       	movw	r30, r24
    1a52:	05 90       	lpm	r0, Z+
    1a54:	61 50       	subi	r22, 0x01	; 1
    1a56:	70 40       	sbci	r23, 0x00	; 0
    1a58:	01 10       	cpse	r0, r1
    1a5a:	d8 f7       	brcc	.-10     	; 0x1a52 <strnlen_P+0x2>
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	8e 0f       	add	r24, r30
    1a62:	9f 1f       	adc	r25, r31
    1a64:	08 95       	ret

00001a66 <memset>:
    1a66:	dc 01       	movw	r26, r24
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <memset+0x6>
    1a6a:	6d 93       	st	X+, r22
    1a6c:	41 50       	subi	r20, 0x01	; 1
    1a6e:	50 40       	sbci	r21, 0x00	; 0
    1a70:	e0 f7       	brcc	.-8      	; 0x1a6a <memset+0x4>
    1a72:	08 95       	ret

00001a74 <strnlen>:
    1a74:	fc 01       	movw	r30, r24
    1a76:	61 50       	subi	r22, 0x01	; 1
    1a78:	70 40       	sbci	r23, 0x00	; 0
    1a7a:	01 90       	ld	r0, Z+
    1a7c:	01 10       	cpse	r0, r1
    1a7e:	d8 f7       	brcc	.-10     	; 0x1a76 <strnlen+0x2>
    1a80:	80 95       	com	r24
    1a82:	90 95       	com	r25
    1a84:	8e 0f       	add	r24, r30
    1a86:	9f 1f       	adc	r25, r31
    1a88:	08 95       	ret

00001a8a <fgetc>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	ec 01       	movw	r28, r24
    1a90:	2b 81       	ldd	r18, Y+3	; 0x03
    1a92:	20 ff       	sbrs	r18, 0
    1a94:	33 c0       	rjmp	.+102    	; 0x1afc <fgetc+0x72>
    1a96:	26 ff       	sbrs	r18, 6
    1a98:	0a c0       	rjmp	.+20     	; 0x1aae <fgetc+0x24>
    1a9a:	2f 7b       	andi	r18, 0xBF	; 191
    1a9c:	2b 83       	std	Y+3, r18	; 0x03
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	9f 83       	std	Y+7, r25	; 0x07
    1aa6:	8e 83       	std	Y+6, r24	; 0x06
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	29 c0       	rjmp	.+82     	; 0x1b00 <fgetc+0x76>
    1aae:	22 ff       	sbrs	r18, 2
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <fgetc+0x46>
    1ab2:	e8 81       	ld	r30, Y
    1ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab6:	80 81       	ld	r24, Z
    1ab8:	99 27       	eor	r25, r25
    1aba:	87 fd       	sbrc	r24, 7
    1abc:	90 95       	com	r25
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <fgetc+0x3e>
    1ac2:	20 62       	ori	r18, 0x20	; 32
    1ac4:	2b 83       	std	Y+3, r18	; 0x03
    1ac6:	1a c0       	rjmp	.+52     	; 0x1afc <fgetc+0x72>
    1ac8:	31 96       	adiw	r30, 0x01	; 1
    1aca:	f9 83       	std	Y+1, r31	; 0x01
    1acc:	e8 83       	st	Y, r30
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <fgetc+0x62>
    1ad0:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ad2:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ad4:	09 95       	icall
    1ad6:	97 ff       	sbrs	r25, 7
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <fgetc+0x62>
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	11 f4       	brne	.+4      	; 0x1ae4 <fgetc+0x5a>
    1ae0:	80 e1       	ldi	r24, 0x10	; 16
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <fgetc+0x5c>
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	82 2b       	or	r24, r18
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <fgetc+0x72>
    1aec:	2e 81       	ldd	r18, Y+6	; 0x06
    1aee:	3f 81       	ldd	r19, Y+7	; 0x07
    1af0:	2f 5f       	subi	r18, 0xFF	; 255
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
    1af4:	3f 83       	std	Y+7, r19	; 0x07
    1af6:	2e 83       	std	Y+6, r18	; 0x06
    1af8:	99 27       	eor	r25, r25
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <fgetc+0x76>
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f ef       	ldi	r25, 0xFF	; 255
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <fputc>:
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	18 2f       	mov	r17, r24
    1b10:	09 2f       	mov	r16, r25
    1b12:	eb 01       	movw	r28, r22
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	81 fd       	sbrc	r24, 1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <fputc+0x1a>
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	9f ef       	ldi	r25, 0xFF	; 255
    1b1e:	20 c0       	rjmp	.+64     	; 0x1b60 <fputc+0x5a>
    1b20:	82 ff       	sbrs	r24, 2
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <fputc+0x3e>
    1b24:	4e 81       	ldd	r20, Y+6	; 0x06
    1b26:	5f 81       	ldd	r21, Y+7	; 0x07
    1b28:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2c:	42 17       	cp	r20, r18
    1b2e:	53 07       	cpc	r21, r19
    1b30:	7c f4       	brge	.+30     	; 0x1b50 <fputc+0x4a>
    1b32:	e8 81       	ld	r30, Y
    1b34:	f9 81       	ldd	r31, Y+1	; 0x01
    1b36:	9f 01       	movw	r18, r30
    1b38:	2f 5f       	subi	r18, 0xFF	; 255
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	39 83       	std	Y+1, r19	; 0x01
    1b3e:	28 83       	st	Y, r18
    1b40:	10 83       	st	Z, r17
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <fputc+0x4a>
    1b44:	e8 85       	ldd	r30, Y+8	; 0x08
    1b46:	f9 85       	ldd	r31, Y+9	; 0x09
    1b48:	81 2f       	mov	r24, r17
    1b4a:	09 95       	icall
    1b4c:	89 2b       	or	r24, r25
    1b4e:	29 f7       	brne	.-54     	; 0x1b1a <fputc+0x14>
    1b50:	2e 81       	ldd	r18, Y+6	; 0x06
    1b52:	3f 81       	ldd	r19, Y+7	; 0x07
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	3f 83       	std	Y+7, r19	; 0x07
    1b5a:	2e 83       	std	Y+6, r18	; 0x06
    1b5c:	81 2f       	mov	r24, r17
    1b5e:	90 2f       	mov	r25, r16
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <ungetc>:
    1b6a:	fb 01       	movw	r30, r22
    1b6c:	23 81       	ldd	r18, Z+3	; 0x03
    1b6e:	20 ff       	sbrs	r18, 0
    1b70:	12 c0       	rjmp	.+36     	; 0x1b96 <ungetc+0x2c>
    1b72:	26 fd       	sbrc	r18, 6
    1b74:	10 c0       	rjmp	.+32     	; 0x1b96 <ungetc+0x2c>
    1b76:	8f 3f       	cpi	r24, 0xFF	; 255
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	93 07       	cpc	r25, r19
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <ungetc+0x2c>
    1b7e:	82 83       	std	Z+2, r24	; 0x02
    1b80:	2f 7d       	andi	r18, 0xDF	; 223
    1b82:	20 64       	ori	r18, 0x40	; 64
    1b84:	23 83       	std	Z+3, r18	; 0x03
    1b86:	26 81       	ldd	r18, Z+6	; 0x06
    1b88:	37 81       	ldd	r19, Z+7	; 0x07
    1b8a:	21 50       	subi	r18, 0x01	; 1
    1b8c:	31 09       	sbc	r19, r1
    1b8e:	37 83       	std	Z+7, r19	; 0x07
    1b90:	26 83       	std	Z+6, r18	; 0x06
    1b92:	99 27       	eor	r25, r25
    1b94:	08 95       	ret
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	9f ef       	ldi	r25, 0xFF	; 255
    1b9a:	08 95       	ret

00001b9c <__ultoa_invert>:
    1b9c:	fa 01       	movw	r30, r20
    1b9e:	aa 27       	eor	r26, r26
    1ba0:	28 30       	cpi	r18, 0x08	; 8
    1ba2:	51 f1       	breq	.+84     	; 0x1bf8 <__ultoa_invert+0x5c>
    1ba4:	20 31       	cpi	r18, 0x10	; 16
    1ba6:	81 f1       	breq	.+96     	; 0x1c08 <__ultoa_invert+0x6c>
    1ba8:	e8 94       	clt
    1baa:	6f 93       	push	r22
    1bac:	6e 7f       	andi	r22, 0xFE	; 254
    1bae:	6e 5f       	subi	r22, 0xFE	; 254
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	af 4f       	sbci	r26, 0xFF	; 255
    1bb8:	b1 e0       	ldi	r27, 0x01	; 1
    1bba:	3e d0       	rcall	.+124    	; 0x1c38 <__ultoa_invert+0x9c>
    1bbc:	b4 e0       	ldi	r27, 0x04	; 4
    1bbe:	3c d0       	rcall	.+120    	; 0x1c38 <__ultoa_invert+0x9c>
    1bc0:	67 0f       	add	r22, r23
    1bc2:	78 1f       	adc	r23, r24
    1bc4:	89 1f       	adc	r24, r25
    1bc6:	9a 1f       	adc	r25, r26
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	68 0f       	add	r22, r24
    1bcc:	79 1f       	adc	r23, r25
    1bce:	8a 1f       	adc	r24, r26
    1bd0:	91 1d       	adc	r25, r1
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	6a 0f       	add	r22, r26
    1bd6:	71 1d       	adc	r23, r1
    1bd8:	81 1d       	adc	r24, r1
    1bda:	91 1d       	adc	r25, r1
    1bdc:	a1 1d       	adc	r26, r1
    1bde:	20 d0       	rcall	.+64     	; 0x1c20 <__ultoa_invert+0x84>
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <__ultoa_invert+0x48>
    1be2:	68 94       	set
    1be4:	3f 91       	pop	r19
    1be6:	2a e0       	ldi	r18, 0x0A	; 10
    1be8:	26 9f       	mul	r18, r22
    1bea:	11 24       	eor	r1, r1
    1bec:	30 19       	sub	r19, r0
    1bee:	30 5d       	subi	r19, 0xD0	; 208
    1bf0:	31 93       	st	Z+, r19
    1bf2:	de f6       	brtc	.-74     	; 0x1baa <__ultoa_invert+0xe>
    1bf4:	cf 01       	movw	r24, r30
    1bf6:	08 95       	ret
    1bf8:	46 2f       	mov	r20, r22
    1bfa:	47 70       	andi	r20, 0x07	; 7
    1bfc:	40 5d       	subi	r20, 0xD0	; 208
    1bfe:	41 93       	st	Z+, r20
    1c00:	b3 e0       	ldi	r27, 0x03	; 3
    1c02:	0f d0       	rcall	.+30     	; 0x1c22 <__ultoa_invert+0x86>
    1c04:	c9 f7       	brne	.-14     	; 0x1bf8 <__ultoa_invert+0x5c>
    1c06:	f6 cf       	rjmp	.-20     	; 0x1bf4 <__ultoa_invert+0x58>
    1c08:	46 2f       	mov	r20, r22
    1c0a:	4f 70       	andi	r20, 0x0F	; 15
    1c0c:	40 5d       	subi	r20, 0xD0	; 208
    1c0e:	4a 33       	cpi	r20, 0x3A	; 58
    1c10:	18 f0       	brcs	.+6      	; 0x1c18 <__ultoa_invert+0x7c>
    1c12:	49 5d       	subi	r20, 0xD9	; 217
    1c14:	31 fd       	sbrc	r19, 1
    1c16:	40 52       	subi	r20, 0x20	; 32
    1c18:	41 93       	st	Z+, r20
    1c1a:	02 d0       	rcall	.+4      	; 0x1c20 <__ultoa_invert+0x84>
    1c1c:	a9 f7       	brne	.-22     	; 0x1c08 <__ultoa_invert+0x6c>
    1c1e:	ea cf       	rjmp	.-44     	; 0x1bf4 <__ultoa_invert+0x58>
    1c20:	b4 e0       	ldi	r27, 0x04	; 4
    1c22:	a6 95       	lsr	r26
    1c24:	97 95       	ror	r25
    1c26:	87 95       	ror	r24
    1c28:	77 95       	ror	r23
    1c2a:	67 95       	ror	r22
    1c2c:	ba 95       	dec	r27
    1c2e:	c9 f7       	brne	.-14     	; 0x1c22 <__ultoa_invert+0x86>
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	61 05       	cpc	r22, r1
    1c34:	71 05       	cpc	r23, r1
    1c36:	08 95       	ret
    1c38:	9b 01       	movw	r18, r22
    1c3a:	ac 01       	movw	r20, r24
    1c3c:	0a 2e       	mov	r0, r26
    1c3e:	06 94       	lsr	r0
    1c40:	57 95       	ror	r21
    1c42:	47 95       	ror	r20
    1c44:	37 95       	ror	r19
    1c46:	27 95       	ror	r18
    1c48:	ba 95       	dec	r27
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <__ultoa_invert+0xa2>
    1c4c:	62 0f       	add	r22, r18
    1c4e:	73 1f       	adc	r23, r19
    1c50:	84 1f       	adc	r24, r20
    1c52:	95 1f       	adc	r25, r21
    1c54:	a0 1d       	adc	r26, r0
    1c56:	08 95       	ret

00001c58 <__ctype_isfalse>:
    1c58:	99 27       	eor	r25, r25
    1c5a:	88 27       	eor	r24, r24

00001c5c <__ctype_istrue>:
    1c5c:	08 95       	ret

00001c5e <__prologue_saves__>:
    1c5e:	2f 92       	push	r2
    1c60:	3f 92       	push	r3
    1c62:	4f 92       	push	r4
    1c64:	5f 92       	push	r5
    1c66:	6f 92       	push	r6
    1c68:	7f 92       	push	r7
    1c6a:	8f 92       	push	r8
    1c6c:	9f 92       	push	r9
    1c6e:	af 92       	push	r10
    1c70:	bf 92       	push	r11
    1c72:	cf 92       	push	r12
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	ca 1b       	sub	r28, r26
    1c88:	db 0b       	sbc	r29, r27
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	09 94       	ijmp

00001c96 <__epilogue_restores__>:
    1c96:	2a 88       	ldd	r2, Y+18	; 0x12
    1c98:	39 88       	ldd	r3, Y+17	; 0x11
    1c9a:	48 88       	ldd	r4, Y+16	; 0x10
    1c9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ca4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ca6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca8:	b9 84       	ldd	r11, Y+9	; 0x09
    1caa:	c8 84       	ldd	r12, Y+8	; 0x08
    1cac:	df 80       	ldd	r13, Y+7	; 0x07
    1cae:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb0:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb2:	0c 81       	ldd	r16, Y+4	; 0x04
    1cb4:	1b 81       	ldd	r17, Y+3	; 0x03
    1cb6:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb8:	b9 81       	ldd	r27, Y+1	; 0x01
    1cba:	ce 0f       	add	r28, r30
    1cbc:	d1 1d       	adc	r29, r1
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	ed 01       	movw	r28, r26
    1cca:	08 95       	ret

00001ccc <_exit>:
    1ccc:	f8 94       	cli

00001cce <__stop_program>:
    1cce:	ff cf       	rjmp	.-2      	; 0x1cce <__stop_program>
